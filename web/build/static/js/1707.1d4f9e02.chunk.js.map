{"version":3,"file":"static/js/1707.1d4f9e02.chunk.js","mappings":"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","sources":["pages/AIAgentPage.js"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nimport { \n  Card, \n  Input, \n  Button, \n  Checkbox, \n  Space, \n  Typography, \n  Alert,\n  message,\n} from 'antd';\nimport { \n  SendOutlined, \n  RobotOutlined,\n} from '@ant-design/icons';\nimport ReactMarkdown from 'react-markdown';\nimport { useApp } from '../contexts/AppContext';\nimport { ACTION_TYPES } from '../contexts/AppContext';\nimport apiService from '../services/apiService';\nimport { \n  PageHeader, \n  StatusAlert, \n  ExecutionPlan\n} from '../components';\n\nconst { TextArea } = Input;\nconst { Text, Paragraph } = Typography;\n\nconst AIAgentPage = () => {\n  const { state, dispatch } = useApp();\n  const [request, setRequest] = useState('');\n  const [dryRun, setDryRun] = useState(true);\n  const [executionTimer, setExecutionTimer] = useState(null);\n  \n  // Ref for execution plan section to enable smooth scrolling\n  const executionPlanRef = useRef(null);\n\n  // Start execution timer\n  const startExecutionTimer = useCallback(() => {\n    const startTime = new Date();\n    \n    const timer = setInterval(() => {\n      const now = new Date();\n      const elapsed = Math.floor((now - startTime) / 1000);\n      const minutes = Math.floor(elapsed / 60);\n      const seconds = elapsed % 60;\n      const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n      \n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_EXECUTION_ELAPSED,\n        payload: timeString,\n      });\n    }, 1000);\n    \n    setExecutionTimer(timer);\n  }, [dispatch]);\n\n  // Stop execution timer\n  const stopExecutionTimer = useCallback(() => {\n    if (executionTimer) {\n      clearInterval(executionTimer);\n      setExecutionTimer(null);\n    }\n  }, [executionTimer]);\n\n  // Helper function to update step status\n  const updateStepStatus = useCallback((stepId, status) => {\n    dispatch({\n      type: ACTION_TYPES.UPDATE_STEP_STATUS,\n      payload: { stepId, status }\n    });\n  }, [dispatch]);\n\n  // Helper function to update execution progress\n  const updateExecutionProgress = useCallback(() => {\n    dispatch({\n      type: ACTION_TYPES.UPDATE_EXECUTION_PROGRESS\n    });\n  }, [dispatch]);\n\n  // Helper function to update execution log\n  const updateExecutionLog = useCallback((logData) => {\n    dispatch({\n      type: ACTION_TYPES.ADD_AGENT_EXECUTION_LOG,\n      payload: {\n        ...logData,\n        timestamp: new Date(),\n      }\n    });\n  }, [dispatch]);\n\n  // Helper function to show inline recovery options\n  const showInlineRecovery = useCallback((failureContext, recoveryOptions, stepId) => {\n    dispatch({\n      type: ACTION_TYPES.SET_RECOVERY_OPTIONS,\n      payload: {\n        stepId,\n        failureContext,\n        recoveryOptions,\n        visible: true\n      }\n    });\n  }, [dispatch]);\n\n  // Helper function to proceed with recovery\n  const proceedWithRecovery = useCallback(async (stepId, optionIndex) => {\n    // Hide recovery options and show progress\n    dispatch({\n      type: ACTION_TYPES.SET_RECOVERY_OPTIONS,\n      payload: {\n        stepId,\n        failureContext: null,\n        recoveryOptions: [],\n        visible: false,\n        inProgress: true,\n        selectedOption: optionIndex\n      }\n    });\n\n    try {\n      // Send recovery decision via WebSocket\n      if (state.websocket && state.websocket.readyState === WebSocket.OPEN) {\n        const message = {\n          type: 'recovery_decision',\n          stepId: stepId,\n          selectedOptionIndex: String(optionIndex), // Convert to string to match server expectations\n          timestamp: new Date().toISOString()\n        };\n        \n        state.websocket.send(JSON.stringify(message));\n        \n        updateExecutionLog({\n          type: 'info',\n          message: `Recovery option selected: ${optionIndex === 'skip' ? 'Skip Step' : `Option ${parseInt(optionIndex) + 1}`}`,\n          stepId: stepId,\n        });\n      }\n    } catch (error) {\n      console.error('Failed to send recovery decision:', error);\n      updateExecutionLog({\n        type: 'error',\n        message: 'Failed to communicate recovery decision to server',\n        stepId: stepId,\n      });\n    }\n  }, [dispatch, state.websocket, updateExecutionLog]);\n\n  // Helper function to abort execution during recovery\n  const abortExecutionRecovery = useCallback(async (stepId) => {\n    // Clear recovery options\n    dispatch({\n      type: ACTION_TYPES.CLEAR_RECOVERY_OPTIONS,\n    });\n\n    try {\n      // Send abort decision via WebSocket\n      if (state.websocket && state.websocket.readyState === WebSocket.OPEN) {\n        const message = {\n          type: 'recovery_abort',\n          stepId: stepId,\n          timestamp: new Date().toISOString()\n        };\n        \n        state.websocket.send(JSON.stringify(message));\n        \n        updateExecutionLog({\n          type: 'error',\n          message: 'Execution aborted by user during recovery',\n          stepId: stepId,\n        });\n      }\n    } catch (error) {\n      console.error('Failed to send recovery abort:', error);\n    }\n\n    // Update execution status\n    stopExecutionTimer();\n    dispatch({\n      type: ACTION_TYPES.UPDATE_EXECUTION_STATUS,\n      payload: 'aborted',\n    });\n  }, [dispatch, state.websocket, updateExecutionLog, stopExecutionTimer]);\n\n  // AI Agent specific WebSocket message handler\n  const handleAIAgentWebSocketMessage = useCallback((data) => {\n    switch (data.type) {\n      case 'processing_started':\n        dispatch({\n          type: ACTION_TYPES.SET_STATUS_MESSAGE,\n          payload: `Processing: ${data.request}`,\n        });\n        dispatch({\n          type: ACTION_TYPES.SET_LOADING,\n          payload: { key: 'agent', value: true },\n        });\n        break;\n      \n      case 'processing_completed':\n        if (data.success) {\n          dispatch({\n            type: ACTION_TYPES.SET_STATUS_MESSAGE,\n            payload: 'Processing completed successfully',\n          });\n        } else {\n          dispatch({\n            type: ACTION_TYPES.SET_STATUS_MESSAGE,\n            payload: 'Processing failed',\n          });\n        }\n        dispatch({\n          type: ACTION_TYPES.SET_LOADING,\n          payload: { key: 'agent', value: false },\n        });\n        break;\n      \n      case 'execution_started':\n        startExecutionTimer();\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_COMPLETED,\n          payload: false,\n        });\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_PROGRESS,\n          payload: 0,\n        });\n        updateExecutionLog({\n          type: 'info',\n          message: data.message || 'Execution started',\n          stepId: null, // global log\n        });\n        break;\n        \n      case 'step_started':\n        updateStepStatus(data.stepId, 'running');\n        updateExecutionLog({\n          type: 'info',\n          message: data.message,\n          stepId: data.stepId,\n        });\n        break;\n      \n      case 'step_progress':\n        updateExecutionLog({\n          type: 'info',\n          message: data.message,\n          stepId: data.stepId,\n        });\n        break;\n      \n      case 'step_completed':\n        updateStepStatus(data.stepId, 'completed');\n        updateExecutionProgress();\n        updateExecutionLog({\n          type: 'success',\n          message: data.message,\n          stepId: data.stepId,\n        });\n        break;\n      \n      case 'step_failed':\n        updateStepStatus(data.stepId, 'failed');\n        updateExecutionLog({\n          type: 'error',\n          message: data.message,\n          stepId: data.stepId,\n        });\n        break;\n      \n      case 'execution_completed':\n        stopExecutionTimer();\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_PROGRESS,\n          payload: 100,\n        });\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_COMPLETED,\n          payload: true,\n        });\n        dispatch({\n          type: ACTION_TYPES.UPDATE_EXECUTION_STATUS,\n          payload: 'completed',\n        });\n        updateExecutionLog({\n          type: 'success',\n          message: data.message || 'Execution completed successfully',\n          stepId: null, // global log\n        });\n        message.success('Execution completed successfully');\n        // Auto-refresh infrastructure state after 1 second\n        setTimeout(() => {\n          dispatch({ type: ACTION_TYPES.REFRESH_INFRASTRUCTURE });\n        }, 1000);\n        break;\n      \n      case 'execution_aborted':\n        stopExecutionTimer();\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_COMPLETED,\n          payload: true,\n        });\n        dispatch({\n          type: ACTION_TYPES.UPDATE_EXECUTION_STATUS,\n          payload: 'aborted',\n        });\n        updateExecutionLog({\n          type: 'error',\n          message: data.message || 'Execution was aborted',\n          stepId: null, // global log\n        });\n        message.error('Execution was aborted');\n        break;\n      \n      // Recovery messages\n      case 'step_recovery_generating':\n        updateStepStatus(data.stepId, 'recovery-generating');\n        updateExecutionLog({\n          type: 'warning',\n          message: data.message || 'Generating recovery options...',\n          stepId: data.stepId,\n        });\n        break;\n        \n      case 'step_recovery_needed':\n        updateStepStatus(data.stepId, 'recovery-pending');\n        updateExecutionLog({\n          type: 'warning',\n          message: data.message || 'Recovery options available',\n          stepId: data.stepId,\n        });\n        // Show inline recovery options\n        showInlineRecovery(data.failureContext, data.recoveryOptions, data.stepId);\n        break;\n        \n      case 'step_recovery_started':\n        updateStepStatus(data.stepId, 'recovery-in-progress');\n        updateExecutionLog({\n          type: 'info',\n          message: data.message || 'Starting recovery...',\n          stepId: data.stepId,\n        });\n        break;\n        \n      case 'step_recovery_progress':\n        updateExecutionLog({\n          type: 'info',\n          message: data.message,\n          stepId: data.stepId,\n        });\n        // Update recovery progress if in progress\n        dispatch({\n          type: ACTION_TYPES.UPDATE_RECOVERY_PROGRESS,\n          payload: { stepId: data.stepId, message: data.message }\n        });\n        break;\n        \n      case 'step_recovery_completed':\n        updateStepStatus(data.stepId, 'completed');\n        updateExecutionProgress();\n        updateExecutionLog({\n          type: 'success',\n          message: data.message || 'Recovery completed successfully',\n          stepId: data.stepId,\n        });\n        // Clear recovery options for this step\n        dispatch({\n          type: ACTION_TYPES.CLEAR_RECOVERY_OPTIONS,\n          payload: { stepId: data.stepId }\n        });\n        break;\n        \n      case 'step_recovery_failed':\n        updateStepStatus(data.stepId, 'failed');\n        updateExecutionLog({\n          type: 'error',\n          message: data.message || 'Recovery failed',\n          stepId: data.stepId,\n        });\n        // Clear recovery options for this step\n        dispatch({\n          type: ACTION_TYPES.CLEAR_RECOVERY_OPTIONS,\n          payload: { stepId: data.stepId }\n        });\n        break;\n      \n      default:\n        break;\n    }\n  }, [dispatch, startExecutionTimer, stopExecutionTimer, updateStepStatus, updateExecutionProgress, updateExecutionLog, showInlineRecovery]);\n\n  // Setup direct WebSocket message handler\n  useEffect(() => {\n    const { websocket } = state;\n    if (!websocket) {\n      return;\n    }\n    \n    const messageHandler = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        handleAIAgentWebSocketMessage(data);\n      } catch (error) {\n        console.error('AIAgentPage: Failed to parse WebSocket message:', error);\n      }\n    };\n\n    websocket.addEventListener('message', messageHandler);\n\n    // Cleanup when component unmounts or WebSocket changes\n    return () => {\n      websocket.removeEventListener('message', messageHandler);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.websocket, handleAIAgentWebSocketMessage]);\n\n  // Cleanup timer on unmount\n  useEffect(() => {\n    return () => {\n      if (executionTimer) {\n        clearInterval(executionTimer);\n      }\n    };\n  }, [executionTimer]);\n\n  const handleProcessRequest = async () => {\n    if (!request.trim()) {\n      message.warning('Please enter a request');\n      return;\n    }\n\n    // Clear previous response immediately when starting new request\n    dispatch({\n      type: ACTION_TYPES.CLEAR_AGENT_RESPONSE,\n    });\n    stopExecutionTimer();\n\n    dispatch({\n      type: ACTION_TYPES.SET_LOADING,\n      payload: { key: 'agent', value: true },\n    });\n\n    try {\n      const response = await apiService.processAgentRequest(request, dryRun);\n      \n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_RESPONSE,\n        payload: response,\n      });\n      \n      // If there's an execution plan, display it\n      if (response.executionPlan && response.executionPlan.length > 0) {\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_PLAN,\n          payload: response.executionPlan,\n        });\n      }\n      \n      dispatch({\n        type: ACTION_TYPES.SET_STATUS_MESSAGE,\n        payload: 'Request processed successfully',\n      });\n    } catch (error) {\n      console.error('Agent request failed:', error);\n      \n      // Clear any previous response on error\n      dispatch({\n        type: ACTION_TYPES.CLEAR_AGENT_RESPONSE,\n      });\n      \n      // Provide user-friendly error messages\n      let errorMessage = 'Failed to process request';\n      \n      if (error.status === 500) {\n        errorMessage = 'Server error occurred. Please try again or check with your administrator.';\n      } else if (error.status === 400) {\n        errorMessage = error.message || 'Invalid request. Please check your input and try again.';\n      } else if (error.status === 401) {\n        errorMessage = 'Authentication required. Please log in and try again.';\n      } else if (error.status === 403) {\n        errorMessage = 'You do not have permission to perform this action.';\n      } else if (error.status === 404) {\n        errorMessage = 'Service not found. Please check your configuration.';\n      } else if (error.status === 429) {\n        errorMessage = 'Too many requests. Please wait a moment and try again.';\n      } else if (error.message && error.message !== 'Failed to fetch') {\n        errorMessage = error.message;\n      } else if (error.message === 'Failed to fetch') {\n        errorMessage = 'Unable to connect to server. Please check your internet connection and try again.';\n      }\n      \n      message.error(errorMessage);\n      \n      dispatch({\n        type: ACTION_TYPES.SET_STATUS_MESSAGE,\n        payload: `Error: ${errorMessage}`,\n      });\n    } finally {\n      dispatch({\n        type: ACTION_TYPES.SET_LOADING,\n        payload: { key: 'agent', value: false },\n      });\n    }\n  };\n\n  const handleConfirmExecution = async () => {\n    if (!state.agentResponse?.decision?.id) {\n      message.error('No execution plan to confirm');\n      return;\n    }\n\n    dispatch({\n      type: ACTION_TYPES.SET_LOADING,\n      payload: { key: 'agent', value: true },\n    });\n\n    try {\n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_EXECUTION_LOGS,\n        payload: [],\n      });\n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_EXECUTION_PROGRESS,\n        payload: 0,\n      });\n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_EXECUTION_COMPLETED,\n        payload: false,\n      });\n      stopExecutionTimer(); // Clear any existing timer\n      \n      // Reset all step statuses to pending\n      if (state.agentExecutionPlan) {\n        const resetPlan = state.agentExecutionPlan.map(step => ({ ...step, status: 'pending' }));\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_PLAN,\n          payload: resetPlan,\n        });\n      }\n      \n      // Always call the API - server will handle dry run vs live execution\n      await apiService.executeConfirmedPlan(state.agentResponse.decision.id);\n      \n      dispatch({\n        type: ACTION_TYPES.SET_CURRENT_EXECUTION,\n        payload: { status: 'running', decisionId: state.agentResponse.decision.id },\n      });\n      \n      // Show different message based on mode\n      if (dryRun) {\n        message.success('Dry run execution started');\n      } else {\n        message.success('Execution started');\n      }\n      \n      // Scroll to execution plan section after state updates\n      setTimeout(() => {\n        if (executionPlanRef.current) {\n          executionPlanRef.current.scrollIntoView({ \n            behavior: 'smooth', \n            block: 'start',\n            inline: 'nearest'\n          });\n        }\n      }, 200);\n    } catch (error) {\n      console.error('Execution start failed:', error);\n      \n      // Provide user-friendly error messages\n      let errorMessage = 'Failed to start execution';\n      \n      if (error.status === 500) {\n        errorMessage = 'Server error occurred while starting execution. Please try again.';\n      } else if (error.status === 400) {\n        errorMessage = error.message || 'Invalid execution request. Please regenerate the plan and try again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Execution plan not found. Please regenerate the plan and try again.';\n      } else if (error.status === 409) {\n        errorMessage = 'Another execution is already in progress. Please wait for it to complete.';\n      } else if (error.message && error.message !== 'Failed to fetch') {\n        errorMessage = error.message;\n      } else if (error.message === 'Failed to fetch') {\n        errorMessage = 'Unable to connect to server. Please check your connection and try again.';\n      }\n      \n      message.error(errorMessage);\n      \n      dispatch({\n        type: ACTION_TYPES.SET_STATUS_MESSAGE,\n        payload: `Error: ${errorMessage}`,\n      });\n    } finally {\n      dispatch({\n        type: ACTION_TYPES.SET_LOADING,\n        payload: { key: 'agent', value: false },\n      });\n    }\n  };\n\n  const handleCancelPlan = () => {\n    dispatch({\n      type: ACTION_TYPES.CLEAR_AGENT_RESPONSE,\n    });\n    stopExecutionTimer();\n    message.info('Plan cancelled');\n  };\n\n  const handleKeyPress = (e) => {\n    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {\n      handleProcessRequest();\n    }\n  };\n\n  const renderExecutionPlan = () => {\n    const logs = Array.isArray(state.agentExecutionLogs) ? state.agentExecutionLogs : [];\n    const planTitle = dryRun ? 'Execution Plan (Dry Run)' : 'Execution Plan';\n    const buttonText = dryRun ? 'Confirm & Execute (Dry Run)' : 'Confirm & Execute';\n    \n    return (\n      <div \n        ref={executionPlanRef}\n        style={{ \n          scrollMarginTop: '100px', // Account for fixed header (64px) + padding\n        }}\n      >\n        <ExecutionPlan\n          steps={state.agentExecutionPlan}\n          logs={logs}\n          isExecuting={state.currentExecution?.status === 'running'}\n          executionProgress={state.agentExecutionProgress}\n          executionElapsed={state.agentExecutionElapsed}\n          executionCompleted={state.agentExecutionCompleted}\n          recoveryOptions={state.recoveryOptions}\n          onConfirm={handleConfirmExecution}\n          onCancel={handleCancelPlan}\n          onProceedWithRecovery={proceedWithRecovery}\n          onAbortRecovery={abortExecutionRecovery}\n          showConfirmButton={true}\n          showCancelButton={true}\n          confirmButtonText={buttonText}\n          title={planTitle}\n        />\n      </div>\n    );\n  };\n\n  const renderAgentResponse = () => {\n    if (!state.agentResponse || state.loading.agent) return null;\n\n    return (\n      <Card title={<><RobotOutlined /> AI Agent Response</>} style={{ marginTop: 16 }}>\n        <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n          <Alert\n            message=\"Request Processed\"\n            description={\n              <div>\n                <Paragraph><strong>Request:</strong> {state.agentResponse.request}</Paragraph>\n                <Paragraph><strong>Mode:</strong> {state.agentResponse.mode === 'demo' ? 'Demo Mode' : (state.agentResponse.dry_run ? 'Dry Run' : 'Live Execution')}</Paragraph>\n                <Paragraph><strong>Confidence:</strong> {(state.agentResponse.confidence * 100).toFixed(1)}%</Paragraph>\n              </div>\n            }\n            type=\"info\"\n            showIcon\n          />\n\n          {state.agentResponse.mode === 'demo' && (\n            <Card size=\"small\" title=\"Response\">\n              <Text>{state.agentResponse.response}</Text>\n            </Card>\n          )}\n\n          {state.agentResponse.mode === 'live' && (\n            <>\n              <Card size=\"small\" title=\"Action\">\n                <Text>{state.agentResponse.action}</Text>\n              </Card>\n              \n              <Card size=\"small\" title=\"Reasoning\">\n                <div className=\"reasoning-content\">\n                  <ReactMarkdown>{state.agentResponse.reasoning}</ReactMarkdown>\n                </div>\n              </Card>\n            </>\n          )}\n\n          {state.agentExecutionPlan && renderExecutionPlan()}\n        </Space>\n      </Card>\n    );\n  };\n\n  return (\n    <div style={{ maxWidth: 1200, margin: '0 auto' }}>\n      <PageHeader\n        title=\"Single Prompt Execute\"\n        description=\"Describe what you want to do with your infrastructure in natural language.\"\n      />\n\n      {/* Status Message */}\n      <StatusAlert \n        message={state.statusMessage} \n        type={state.statusMessage?.startsWith('Error:') ? 'error' : undefined}\n        showIcon={state.statusMessage?.startsWith('Error:')}\n      />\n\n      <Card>\n        <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n          <TextArea\n            placeholder=\"Example: Create a new VPC with 2 subnets and an auto-scaling group with 3 EC2 instances running nginx\"\n            value={request}\n            onChange={(e) => setRequest(e.target.value)}\n            onKeyDown={handleKeyPress}\n            rows={4}\n            style={{ fontSize: 16 }}\n          />\n          \n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <Checkbox \n              checked={dryRun} \n              onChange={(e) => setDryRun(e.target.checked)}\n            >\n              Dry Run Mode\n            </Checkbox>\n            \n            <Button\n              type=\"primary\"\n              size=\"large\"\n              icon={<SendOutlined />}\n              onClick={handleProcessRequest}\n              loading={state.loading.agent}\n              disabled={!request.trim()}\n            >\n              Process Request\n            </Button>\n          </div>\n          \n          <div style={{ fontSize: 12, color: '#666' }}>\n            Tip: Press Ctrl+Enter (Cmd+Enter on Mac) to quickly process your request\n          </div>\n        </Space>\n      </Card>\n\n      {renderAgentResponse()}\n\n    </div>\n  );\n};\n\nexport default AIAgentPage;"],"names":["TextArea","Input","Text","Paragraph","Typography","AIAgentPage","_state$statusMessage","_state$statusMessage2","state","dispatch","useApp","request","setRequest","useState","dryRun","setDryRun","executionTimer","setExecutionTimer","executionPlanRef","useRef","startExecutionTimer","useCallback","startTime","Date","timer","setInterval","now","elapsed","Math","floor","minutes","seconds","timeString","concat","toString","padStart","type","ACTION_TYPES","SET_AGENT_EXECUTION_ELAPSED","payload","stopExecutionTimer","clearInterval","updateStepStatus","stepId","status","UPDATE_STEP_STATUS","updateExecutionProgress","UPDATE_EXECUTION_PROGRESS","updateExecutionLog","logData","ADD_AGENT_EXECUTION_LOG","_objectSpread","timestamp","showInlineRecovery","failureContext","recoveryOptions","SET_RECOVERY_OPTIONS","visible","proceedWithRecovery","async","optionIndex","inProgress","selectedOption","websocket","readyState","WebSocket","OPEN","message","selectedOptionIndex","String","toISOString","send","JSON","stringify","parseInt","error","console","abortExecutionRecovery","CLEAR_RECOVERY_OPTIONS","UPDATE_EXECUTION_STATUS","handleAIAgentWebSocketMessage","data","SET_STATUS_MESSAGE","SET_LOADING","key","value","success","SET_AGENT_EXECUTION_COMPLETED","SET_AGENT_EXECUTION_PROGRESS","setTimeout","REFRESH_INFRASTRUCTURE","UPDATE_RECOVERY_PROGRESS","useEffect","messageHandler","event","parse","addEventListener","removeEventListener","handleProcessRequest","trim","CLEAR_AGENT_RESPONSE","response","apiService","processAgentRequest","SET_AGENT_RESPONSE","executionPlan","length","SET_AGENT_EXECUTION_PLAN","errorMessage","warning","handleConfirmExecution","_state$agentResponse","_state$agentResponse$","agentResponse","decision","id","SET_AGENT_EXECUTION_LOGS","agentExecutionPlan","resetPlan","map","step","executeConfirmedPlan","SET_CURRENT_EXECUTION","decisionId","current","scrollIntoView","behavior","block","inline","handleCancelPlan","info","renderExecutionPlan","_state$currentExecuti","logs","Array","isArray","agentExecutionLogs","planTitle","buttonText","_jsx","ref","style","scrollMarginTop","children","ExecutionPlan","steps","isExecuting","currentExecution","executionProgress","agentExecutionProgress","executionElapsed","agentExecutionElapsed","executionCompleted","agentExecutionCompleted","onConfirm","onCancel","onProceedWithRecovery","onAbortRecovery","showConfirmButton","showCancelButton","confirmButtonText","title","_jsxs","maxWidth","margin","PageHeader","description","StatusAlert","statusMessage","startsWith","undefined","showIcon","Card","Space","direction","size","width","placeholder","onChange","e","target","onKeyDown","ctrlKey","metaKey","rows","fontSize","display","justifyContent","alignItems","Checkbox","checked","Button","icon","SendOutlined","onClick","loading","agent","disabled","color","_Fragment","RobotOutlined","marginTop","Alert","mode","dry_run","confidence","toFixed","action","className","ReactMarkdown","reasoning"],"sourceRoot":""}