{"version":3,"file":"static/js/7069.02ce9149.chunk.js","mappings":"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","sources":["services/mockDataService.js","services/apiService.js","components/common/StatusAlert.js","components/layout/PageHeader.js","components/execution/ExecutionStep.js","components/execution/InlineRecovery.js","components/execution/ExecutionPlan.js","components/execution/ExecutionLogs.js","components/infrastructure/ResourceCard.js","components/infrastructure/StateOverview.js","components/infrastructure/ResourcesByCategory.js","components/infrastructure/StateHeader.js","components/graph/MermaidDiagram.js","components/graph/GraphStatistics.js","components/graph/BottlenecksList.js"],"sourcesContent":["// Mock data service for development/testing\nclass MockDataService {\n  constructor() {\n    this.mockEnabled = process.env.REACT_APP_ENABLE_FEATURE_MOCK === 'true';\n    console.log('MockDataService initialized. Mock enabled:', this.mockEnabled);\n  }\n\n  // Simulate API delay\n  async delay(ms = 500) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // Load mock data from public/mocks folder\n  async loadMockData(filename) {\n    try {\n      const response = await fetch(`/mocks/${filename}`);\n      if (!response.ok) {\n        throw new Error(`Failed to load mock data: ${filename}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error loading mock data:', error);\n      throw error;\n    }\n  }\n\n  // Mock: Get dependency graph\n  async getDependencyGraph(source = null) {\n    await this.delay(800); // Simulate network delay\n\n    try {\n      let mockFile;\n      \n      if (source === 'live') {\n        // Load live discovery mock data\n        mockFile = 'mock-discovery-live.json';\n      } else {\n        // Load default graph mock data (generate-graph button)\n        mockFile = 'mock-generate-graph.json';\n      }\n\n      const data = await this.loadMockData(mockFile);\n      \n      // Transform the mock data to match expected API response format\n      return this.transformGraphData(data);\n    } catch (error) {\n      console.error('Mock getDependencyGraph error:', error);\n      throw new Error(`Failed to load mock dependency graph: ${error.message}`);\n    }\n  }\n\n  // Transform mock graph data to match API response format\n  transformGraphData(mockData) {\n    // Real API response format includes both mermaid syntax and graph structure\n    // We should return the data as-is if it already has the expected format\n    if (mockData.mermaid && mockData.graph) {\n      return {\n        mermaid: mockData.mermaid,\n        graph: mockData.graph, // Include graph with nodes metadata\n        timestamp: mockData.timestamp || new Date().toISOString(),\n        metadata: mockData.metadata || this.generateDefaultMetadata(mockData),\n        source: mockData.source || 'unknown',\n        format: mockData.format || 'mermaid',\n      };\n    }\n\n    // Legacy: If mock data only has mermaid syntax (old format)\n    if (mockData.mermaid) {\n      return {\n        mermaid: mockData.mermaid,\n        graph: null, // No graph metadata available\n        timestamp: mockData.timestamp || new Date().toISOString(),\n        metadata: mockData.metadata || this.generateDefaultMetadata(mockData),\n      };\n    }\n\n    // Legacy: If mock data has graph structure but no mermaid (shouldn't happen in real API)\n    if (mockData.graph && mockData.graph.edges) {\n      const mermaidSyntax = this.convertGraphToMermaid(mockData.graph);\n      return {\n        mermaid: mermaidSyntax,\n        graph: mockData.graph,\n        timestamp: new Date().toISOString(),\n        metadata: this.generateMetadataFromGraph(mockData.graph),\n      };\n    }\n\n    throw new Error('Invalid mock data format');\n  }\n\n  // Convert graph edges/nodes to Mermaid syntax\n  convertGraphToMermaid(graph) {\n    const lines = ['graph TD'];\n    const nodes = new Set();\n    const nodeTypes = {};\n\n    // Collect all nodes and their types\n    graph.edges.forEach(edge => {\n      nodes.add(edge.source);\n      nodes.add(edge.target);\n      \n      // Detect node types and store with SANITIZED IDs (for Mermaid output)\n      const sanitizedSource = edge.source.replace(/[^a-zA-Z0-9_]/g, '_');\n      const sanitizedTarget = edge.target.replace(/[^a-zA-Z0-9_]/g, '_');\n      \n      // Detect type for source\n      if (edge.source.startsWith('vpc-')) nodeTypes[sanitizedSource] = 'vpc';\n      else if (edge.source.startsWith('subnet-')) nodeTypes[sanitizedSource] = 'subnet';\n      else if (edge.source.startsWith('sg-')) nodeTypes[sanitizedSource] = 'sg';\n      else if (edge.source.startsWith('i-')) nodeTypes[sanitizedSource] = 'ec2';\n      else if (edge.source.startsWith('lt-')) nodeTypes[sanitizedSource] = 'lt';\n      else if (edge.source.startsWith('nat-')) nodeTypes[sanitizedSource] = 'natgw';\n      else if (edge.source.includes('targetgroup')) nodeTypes[sanitizedSource] = 'tg';\n      else if (edge.source.includes('loadbalancer') || edge.source.includes('app/') || edge.source.includes('net/')) nodeTypes[sanitizedSource] = 'lb';\n      else if (edge.source.includes('database') || edge.source.includes('cluster')) nodeTypes[sanitizedSource] = 'rds';\n      \n      // Detect type for target\n      if (edge.target.startsWith('vpc-')) nodeTypes[sanitizedTarget] = 'vpc';\n      else if (edge.target.startsWith('subnet-')) nodeTypes[sanitizedTarget] = 'subnet';\n      else if (edge.target.startsWith('sg-')) nodeTypes[sanitizedTarget] = 'sg';\n      else if (edge.target.startsWith('i-')) nodeTypes[sanitizedTarget] = 'ec2';\n      else if (edge.target.startsWith('lt-')) nodeTypes[sanitizedTarget] = 'lt';\n      else if (edge.target.startsWith('nat-')) nodeTypes[sanitizedTarget] = 'natgw';\n      else if (edge.target.includes('targetgroup')) nodeTypes[sanitizedTarget] = 'tg';\n      else if (edge.target.includes('loadbalancer') || edge.target.includes('app/') || edge.target.includes('net/')) nodeTypes[sanitizedTarget] = 'lb';\n      else if (edge.target.includes('database') || edge.target.includes('cluster')) nodeTypes[sanitizedTarget] = 'rds';\n    });\n\n    // Add blank line\n    lines.push('');\n\n    // Define nodes with their types\n    nodes.forEach(node => {\n      const type = nodeTypes[node] || 'default';\n      const sanitizedId = node.replace(/[^a-zA-Z0-9_]/g, '_');\n      lines.push(`    ${sanitizedId}[\"${node}\"]:::${type}`);\n    });\n\n    // Add blank line\n    lines.push('');\n\n    // Add edges\n    graph.edges.forEach(edge => {\n      const sourceId = edge.source.replace(/[^a-zA-Z0-9_]/g, '_');\n      const targetId = edge.target.replace(/[^a-zA-Z0-9_]/g, '_');\n      lines.push(`    ${sourceId} --> ${targetId}`);\n    });\n\n    // Add blank line\n    lines.push('');\n\n    // Add class definitions with colors\n    lines.push('    classDef vpc fill:#e1f5fe');\n    lines.push('    classDef subnet fill:#b3e5fc');\n    lines.push('    classDef ec2 fill:#fff3e0');\n    lines.push('    classDef sg fill:#f3e5f5');\n    lines.push('    classDef lb fill:#e8f5e8');\n    lines.push('    classDef asg fill:#fce4ec');\n    lines.push('    classDef natgw fill:#e0f2f1');\n    lines.push('    classDef tg fill:#f1f8e9');\n    lines.push('    classDef rds fill:#fff9c4');\n    lines.push('    classDef lt fill:#fce4ec');\n    lines.push('    classDef default fill:#f5f5f5');\n\n    return lines.join('\\n');\n  }\n\n  // Generate metadata from graph structure\n  generateMetadataFromGraph(graph) {\n    const nodeTypes = {};\n    const nodes = new Set();\n\n    graph.edges.forEach(edge => {\n      nodes.add(edge.source);\n      nodes.add(edge.target);\n      \n      // Count node types\n      const sourceType = this.detectNodeType(edge.source);\n      const targetType = this.detectNodeType(edge.target);\n      \n      nodeTypes[sourceType] = (nodeTypes[sourceType] || 0) + 1;\n      nodeTypes[targetType] = (nodeTypes[targetType] || 0) + 1;\n    });\n\n    return {\n      nodeCount: nodes.size,\n      edgeCount: graph.edges.length,\n      resourceTypeCounts: nodeTypes,\n      bottlenecks: this.generateMockBottlenecks(nodes),\n    };\n  }\n\n  // Detect node type from ID\n  detectNodeType(nodeId) {\n    if (nodeId.startsWith('vpc-')) return 'VPC';\n    if (nodeId.startsWith('subnet-')) return 'Subnet';\n    if (nodeId.startsWith('sg-')) return 'Security Group';\n    if (nodeId.startsWith('i-')) return 'EC2 Instance';\n    if (nodeId.startsWith('lt-')) return 'Launch Template';\n    if (nodeId.includes('targetgroup')) return 'Target Group';\n    if (nodeId.includes('loadbalancer')) return 'Load Balancer';\n    return 'Other';\n  }\n\n  // Generate mock bottlenecks\n  generateMockBottlenecks(nodes) {\n    const bottlenecks = [];\n    let count = 0;\n    \n    // Add a few mock bottlenecks\n    nodes.forEach(node => {\n      if (count >= 3) return; // Limit to 3 bottlenecks\n      \n      if (node.startsWith('vpc-')) {\n        bottlenecks.push({\n          resource: node,\n          dependents: Math.floor(Math.random() * 20) + 10,\n          impact: 'high',\n          reason: 'Multiple resources depend on this VPC',\n        });\n        count++;\n      }\n    });\n\n    return bottlenecks;\n  }\n\n  // Generate default metadata\n  generateDefaultMetadata(mockData) {\n    return {\n      nodeCount: 0,\n      edgeCount: 0,\n      resourceTypeCounts: {},\n      bottlenecks: [],\n    };\n  }\n}\n\nconst mockDataService = new MockDataService();\nexport default mockDataService;\n","// API service for centralized HTTP requests\nimport mockDataService from './mockDataService';\n\nclass ApiService {\n  constructor() {\n    // Load API base URL from environment variable, fallback to relative path\n    this.baseURL = process.env.REACT_APP_API_BASE_URL || '/api';\n    \n    // Remove trailing slash if present\n    this.baseURL = this.baseURL.replace(/\\/$/, '');\n    \n    // Check if mock mode is enabled\n    this.mockEnabled = process.env.REACT_APP_ENABLE_FEATURE_MOCK === 'true';\n    \n    console.log('ApiService initialized with baseURL:', this.baseURL);\n    console.log('Mock mode enabled:', this.mockEnabled);\n  }\n\n  // Generic API call method with error handling\n  async call(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        // Try to get error details from response body\n        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        let errorDetails = null;\n        \n        try {\n          const errorText = await response.text();\n          if (errorText) {\n            try {\n              const errorData = JSON.parse(errorText);\n              if (errorData.error) {\n                errorMessage = errorData.error;\n              } else if (errorData.message) {\n                errorMessage = errorData.message;\n              } else if (errorData.detail) {\n                errorMessage = errorData.detail;\n              }\n              errorDetails = errorData;\n            } catch (jsonError) {\n              // If response isn't JSON, use the text as error message\n              if (errorText.length < 200) { // Only use short error messages\n                errorMessage = errorText;\n              }\n            }\n          }\n        } catch (readError) {\n          // If we can't read the response body, stick with the status message\n          console.warn('Could not read error response body:', readError);\n        }\n        \n        const error = new Error(errorMessage);\n        error.status = response.status;\n        error.statusText = response.statusText;\n        error.details = errorDetails;\n        throw error;\n      }\n\n      const responseText = await response.text();\n      \n      if (!responseText) {\n        throw new Error('Empty response from server');\n      }\n\n      try {\n        return JSON.parse(responseText);\n      } catch (jsonError) {\n        console.error('JSON parse error:', jsonError);\n        console.error('Response text:', responseText);\n        throw new Error(`Invalid JSON response: ${jsonError.message}`);\n      }\n    } catch (error) {\n      console.error(`API call failed for ${endpoint}:`, error);\n      \n      // Enhance error messages for common network issues\n      if (error.name === 'TypeError' && error.message === 'Failed to fetch') {\n        const enhancedError = new Error('Unable to connect to server. Please check your internet connection and try again.');\n        enhancedError.originalError = error;\n        enhancedError.isNetworkError = true;\n        throw enhancedError;\n      }\n      \n      if (error.name === 'AbortError') {\n        const enhancedError = new Error('Request timed out. Please try again.');\n        enhancedError.originalError = error;\n        enhancedError.isTimeoutError = true;\n        throw enhancedError;\n      }\n      \n      throw error;\n    }\n  }\n\n  // Agent operations\n  async processAgentRequest(request, dryRun = true) {\n    return this.call('/agent/process', {\n      method: 'POST',\n      body: JSON.stringify({ \n        request, \n        dry_run: dryRun \n      }),\n    });\n  }\n\n  async executeConfirmedPlan(decisionId) {\n    return this.call('/agent/execute', {\n      method: 'POST',\n      body: JSON.stringify({ decisionId: decisionId }),\n    });\n  }\n\n  // State management operations\n  async getInfrastructureState(discoveredOnly = false) {\n    const params = discoveredOnly ? '?discovered_only=true' : '';\n    return this.call(`/state${params}`);\n  }\n\n  async discoverInfrastructure() {\n    return this.call('/discover', {\n      method: 'POST',\n    });\n  }\n\n  async exportState(includeDiscovered = false) {\n    const params = includeDiscovered ? '?include_discovered=true' : '';\n    const response = await fetch(`${this.baseURL}/export${params}`);\n    \n    if (!response.ok) {\n      throw new Error(`Export failed: ${response.statusText}`);\n    }\n    \n    return response.blob();\n  }\n\n  // Graph operations\n  async getDependencyGraph(source = null) {\n    // Use mock data if enabled\n    if (this.mockEnabled) {\n      console.log('Using mock data for getDependencyGraph, source:', source);\n      return mockDataService.getDependencyGraph(source);\n    }\n    \n    // API now only returns mermaid format\n    // source can be 'live' for live discovery or null for default\n    const params = source ? `?source=${source}` : '';\n    return this.call(`/graph${params}`);\n  }\n\n  // Conflict detection\n  async detectConflicts(autoResolve = false) {\n    const params = new URLSearchParams({\n      auto_resolve: autoResolve.toString(),\n    });\n    \n    return this.call(`/conflicts?${params}`);\n  }\n\n  // Deployment planning\n  async generateDeploymentPlan(targetResources = [], includeLevels = true) {\n    const params = new URLSearchParams();\n    \n    if (targetResources.length > 0) {\n      targetResources.forEach(resource => {\n        params.append('target_resources', resource);\n      });\n    }\n    \n    params.set('include_levels', includeLevels.toString());\n    \n    return this.call(`/plan?${params}`);\n  }\n\n  // Utility methods for file operations\n  downloadFile(blob, filename) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }\n\n  getCurrentTimestamp() {\n    return new Date().toISOString().split('T')[0];\n  }\n\n  // Configuration methods\n  getBaseURL() {\n    return this.baseURL;\n  }\n\n  getConfig() {\n    return {\n      baseURL: this.baseURL,\n      wsURL: process.env.REACT_APP_WS_URL,\n      environment: process.env.NODE_ENV || 'development',\n    };\n  }\n}\n\n// Create a singleton instance\nconst apiService = new ApiService();\n\nexport default apiService;","import { Alert } from 'antd';\nimport PropTypes from 'prop-types';\n\n/**\n * Reusable status alert component with consistent styling\n * Automatically determines alert type based on message content\n */\nconst StatusAlert = ({ \n  message, \n  type = 'auto', \n  showIcon = true, \n  closable = false,\n  style = {},\n  ...props \n}) => {\n  // Auto-determine alert type based on message content\n  const getAlertType = () => {\n    if (type !== 'auto') return type;\n    \n    const msg = message.toLowerCase();\n    if (msg.includes('error') || msg.includes('failed') || msg.includes('fail')) {\n      return 'error';\n    } else if (msg.includes('warning') || msg.includes('warn')) {\n      return 'warning';\n    } else if (msg.includes('success') || msg.includes('completed') || msg.includes('processed')) {\n      return 'success';\n    } else if (msg === 'ready') {\n      return 'info';\n    } else {\n      return 'success';\n    }\n  };\n\n  const alertType = getAlertType();\n\n  // Clean up message display - remove \"Error:\" prefix for better UX\n  const displayMessage = typeof message === 'string' && message.startsWith('Error: ') \n    ? message.substring(7) // Remove \"Error: \" prefix\n    : message;\n\n  return (\n    <Alert \n      message={displayMessage} \n      type={alertType}\n      showIcon={showIcon}\n      closable={closable}\n      style={{ \n        borderRadius: 6,\n        fontSize: 14,\n        marginBottom: 16,\n        ...style \n      }}\n      {...props}\n    />\n  );\n};\n\nStatusAlert.propTypes = {\n  message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  type: PropTypes.oneOf(['auto', 'success', 'info', 'warning', 'error']),\n  showIcon: PropTypes.bool,\n  closable: PropTypes.bool,\n  style: PropTypes.object,\n};\n\nexport default StatusAlert;","import React from 'react';\nimport { Typography } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst { Title, Paragraph } = Typography;\n\n/**\n * Reusable page header component with consistent styling\n * Used across all pages for title and description\n */\nconst PageHeader = ({ \n  title, \n  description, \n  level = 2, \n  extra = null, \n  style = {} \n}) => {\n  return (\n    <div style={{ marginBottom: 24, ...style }}>\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'flex-start',\n        marginBottom: 8 \n      }}>\n        <Title level={level} style={{ margin: 0 }}>\n          {title}\n        </Title>\n        {extra && <div>{extra}</div>}\n      </div>\n      {description && (\n        <Paragraph type=\"secondary\" style={{ margin: 0, fontSize: '1rem' }}>\n          {description}\n        </Paragraph>\n      )}\n    </div>\n  );\n};\n\nPageHeader.propTypes = {\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  description: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  level: PropTypes.oneOf([1, 2, 3, 4, 5]),\n  extra: PropTypes.node,\n  style: PropTypes.object,\n};\n\nexport default PageHeader;","import { useState, useEffect } from 'react';\nimport { Button } from 'antd';\nimport { \n  CheckOutlined, \n  CloseOutlined, \n  ClockCircleOutlined,\n  LoadingOutlined,\n  DownOutlined,\n  UpOutlined,\n  CodeOutlined\n} from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\n/**\n * Individual execution step component with consistent styling\n * Shows step number, content, and status with proper visual hierarchy\n */\nconst ExecutionStep = ({ \n  step, \n  index, \n  logs = [],\n  className = '',\n  ...props \n}) => {\n  const [logsExpanded, setLogsExpanded] = useState(false);\n  const [parametersExpanded, setParametersExpanded] = useState(false);\n  \n  const stepStatus = step.status || 'pending';\n\n  // Auto-expand logs on failure or when there are new logs for running steps\n  useEffect(() => {\n    if (stepStatus === 'failed' || \n        stepStatus.includes('recovery') ||\n        (stepStatus === 'running' && logs.length > 0)) {\n      setLogsExpanded(true);\n    }\n  }, [stepStatus, logs.length]);\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed': \n        return <CheckOutlined style={{ color: 'white', fontSize: '12px' }} />;\n      case 'failed': \n        return <CloseOutlined style={{ color: 'white', fontSize: '12px' }} />;\n      case 'running': \n        return <LoadingOutlined spin style={{ color: 'white', fontSize: '12px' }} />;\n      case 'recovery-generating':\n        return <LoadingOutlined spin style={{ color: 'white', fontSize: '12px' }} />;\n      case 'recovery-pending':\n        return <ClockCircleOutlined style={{ color: '#212529', fontSize: '12px' }} />;\n      case 'recovery-in-progress':\n        return <LoadingOutlined spin style={{ color: 'white', fontSize: '12px' }} />;\n      case 'pending':\n      default: \n        return <ClockCircleOutlined style={{ color: '#6c757d', fontSize: '12px' }} />;\n    }\n  };\n\n  const getStepNumberClass = (status) => {\n    return `execution-step-number ${status}`;\n  };\n\n  const stepTitle =  step.name || step.description || step.action || `Step ${index + 1}`;\n  const stepDescription = step.details || step.description || 'Executing infrastructure operation...';\n\n  return (\n    <div \n      className={`execution-step ${className}`} \n      data-step-status={stepStatus}\n      {...props}\n    >\n      <div className=\"execution-step-header\">\n        <div className={getStepNumberClass(stepStatus)}>\n          <div className=\"step-number-content\">\n            <span className=\"step-number-text\">{index + 1}</span>\n          </div>\n        </div>\n        \n        <div className=\"execution-step-content\">\n          <div className=\"execution-step-title\">\n            {stepTitle}\n          </div>\n          \n          <div className=\"execution-step-description\">\n            {stepDescription}\n          </div>\n          \n          <div className=\"execution-step-meta\">\n            <span className=\"step-duration\">\n              Duration: {step.duration || 'Estimating...'}\n            </span>\n            <span className=\"step-dependencies\">\n              Status: {stepStatus}\n            </span>\n            {step.dependencies && (\n              <span className=\"step-dependencies\">\n                Dependencies: {step.dependencies}\n              </span>\n            )}\n          </div>\n          \n          {/* Tool Parameters Section */}\n          {(step.id || step.mcpTool || step.toolParameters || step.parameters) && (\n            <div style={{ marginTop: '12px' }}>\n              <Button\n                type=\"text\"\n                size=\"small\"\n                icon={<CodeOutlined />}\n                onClick={() => setParametersExpanded(!parametersExpanded)}\n                style={{ \n                  padding: '4px 8px',\n                  height: 'auto',\n                  fontSize: '12px',\n                  color: '#1890ff'\n                }}\n              >\n                {parametersExpanded ? 'Hide' : 'Show'} Step Details\n              </Button>\n              \n              {parametersExpanded && (\n                <div style={{\n                  marginTop: '8px',\n                  padding: '12px',\n                  background: '#f6f8fa',\n                  borderRadius: '6px',\n                  border: '1px solid #e1e4e8',\n                  fontSize: '13px',\n                  overflow: 'auto',\n                  maxHeight: '300px'\n                }}>\n                  {/* Step ID Section */}\n                  {step.id && (\n                    <div style={{ \n                      marginBottom: (step.mcpTool || step.toolParameters || step.parameters) ? '12px' : '0',\n                      paddingBottom: (step.mcpTool || step.toolParameters || step.parameters) ? '12px' : '0',\n                      borderBottom: (step.mcpTool || step.toolParameters || step.parameters) ? '1px solid #e1e4e8' : 'none'\n                    }}>\n                      <div style={{ fontWeight: '600', color: '#24292e', marginBottom: '4px' }}>\n                        Step ID\n                      </div>\n                      <div style={{ \n                        fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n                        color: '#0366d6',\n                        fontSize: '12px'\n                      }}>\n                        {step.id}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* MCP Tool Section */}\n                  {step.mcpTool && (\n                    <div style={{ \n                      marginBottom: (step.toolParameters || step.parameters) ? '12px' : '0',\n                      paddingBottom: (step.toolParameters || step.parameters) ? '12px' : '0',\n                      borderBottom: (step.toolParameters || step.parameters) ? '1px solid #e1e4e8' : 'none'\n                    }}>\n                      <div style={{ fontWeight: '600', color: '#24292e', marginBottom: '4px' }}>\n                        MCP Tool\n                      </div>\n                      <div style={{ \n                        fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n                        color: '#0366d6',\n                        fontSize: '12px'\n                      }}>\n                        {step.mcpTool}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Parameters Section */}\n                  {(step.toolParameters || step.parameters) && (\n                    <div>\n                      <div style={{ fontWeight: '600', color: '#24292e', marginBottom: '8px' }}>\n                        Parameters\n                      </div>\n                      <pre style={{ \n                        margin: 0,\n                        whiteSpace: 'pre-wrap',\n                        wordBreak: 'break-word',\n                        fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n                        fontSize: '12px',\n                        color: '#24292e'\n                      }}>\n                        {JSON.stringify(step.toolParameters || step.parameters, null, 2)}\n                      </pre>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        \n        <div className=\"step-status-icon-container\">\n          {getStatusIcon(stepStatus)}\n        </div>\n        \n        {/* Expand logs button - only show if there are logs or step is running/completed/failed */}\n        {(logs.length > 0 || ['running', 'completed', 'failed'].includes(stepStatus)) && (\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={logsExpanded ? <UpOutlined /> : <DownOutlined />}\n            onClick={() => setLogsExpanded(!logsExpanded)}\n            className=\"expand-logs-button\"\n          />\n        )}\n      </div>\n      \n      {/* Step logs section */}\n      {logsExpanded && (\n        <div className=\"execution-step-logs\">\n          <div className=\"logs-content\">\n            {logs.length > 0 ? (\n              logs.map((log, logIndex) => (\n                <div key={logIndex} className={`step-log-entry level-${log.type}`}>\n                  <span className=\"timestamp\">\n                    {log.timestamp?.toLocaleTimeString() || new Date().toLocaleTimeString()}\n                  </span>\n                  <span className=\"level\">[{log.type?.toUpperCase() || 'INFO'}]</span>\n                  <span className=\"message\">{log.message}</span>\n                </div>\n              ))\n            ) : (\n              <div className=\"no-logs\">No logs available for this step</div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nExecutionStep.propTypes = {\n  step: PropTypes.shape({\n    id: PropTypes.string,\n    action: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    details: PropTypes.string,\n    mcpTool: PropTypes.string,\n    toolParameters: PropTypes.object,\n    parameters: PropTypes.object,\n    status: PropTypes.oneOf([\n      'pending', \n      'running', \n      'completed', \n      'failed',\n      'recovery-generating',\n      'recovery-pending',\n      'recovery-in-progress'\n    ]),\n    duration: PropTypes.string,\n    dependencies: PropTypes.string,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  logs: PropTypes.arrayOf(PropTypes.shape({\n    type: PropTypes.string,\n    message: PropTypes.string,\n    timestamp: PropTypes.instanceOf(Date),\n    stepId: PropTypes.string,\n  })),\n  className: PropTypes.string,\n};\n\nexport default ExecutionStep;","import { useState } from 'react';\nimport { Button, Card, Tag, Space, Typography } from 'antd';\nimport { \n  ExclamationCircleOutlined,\n  PlayCircleOutlined,\n  StopOutlined,\n  LoadingOutlined,\n  DownOutlined,\n  UpOutlined\n} from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\nconst { Text, Paragraph } = Typography;\n\n/**\n * Inline Recovery component - displays recovery options directly within the execution plan\n * Based on the old UI's inline recovery implementation\n */\nconst InlineRecovery = ({ \n  stepId, \n  recoveryData, \n  onProceedWithRecovery, \n  onAbortRecovery \n}) => {\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(null);\n\n  if (!recoveryData) return null;\n\n  // Recovery in progress state\n  if (recoveryData.inProgress) {\n    return (\n      <Card \n        size=\"small\" \n        className=\"inline-recovery-card recovery-in-progress\"\n        style={{ \n          borderLeft: '4px solid #17a2b8',\n          backgroundColor: '#f8f9fa'\n        }}\n      >\n        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          <LoadingOutlined spin style={{ color: '#17a2b8' }} />\n          <Text strong>Executing Recovery...</Text>\n          {recoveryData.selectedOption === 'skip' ? (\n            <Text type=\"secondary\">Skipping step</Text>\n          ) : (\n            <Text type=\"secondary\">Option {parseInt(recoveryData.selectedOption) + 1}</Text>\n          )}\n        </div>\n        {recoveryData.progressMessage && (\n          <div style={{ marginTop: '8px' }}>\n            <Text type=\"secondary\">{recoveryData.progressMessage}</Text>\n          </div>\n        )}\n      </Card>\n    );\n  }\n\n  if (!recoveryData.visible) return null;\n\n  const { failureContext, recoveryOptions } = recoveryData;\n\n  const handleOptionSelect = (optionIndex) => {\n    setSelectedOptionIndex(optionIndex);\n  };\n\n  const handleProceed = () => {\n    if (selectedOptionIndex !== null && onProceedWithRecovery) {\n      onProceedWithRecovery(stepId, selectedOptionIndex);\n    }\n  };\n\n  const handleAbort = () => {\n    if (onAbortRecovery) {\n      onAbortRecovery(stepId);\n    }\n  };\n\n  return (\n    <Card \n      size=\"small\" \n      className=\"inline-recovery-card\"\n      style={{ \n        borderLeft: '4px solid #ffc107',\n        backgroundColor: '#fffef0',\n        marginTop: '8px'\n      }}\n    >\n      {/* Recovery Header */}\n      <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '12px' }}>\n        <ExclamationCircleOutlined style={{ color: '#ffc107', fontSize: '16px' }} />\n        <Text strong style={{ color: '#856404' }}>Step Failed - Recovery Options Available</Text>\n      </div>\n\n      {/* Failure Details */}\n      <div style={{ marginBottom: '12px', padding: '8px', backgroundColor: '#f8d7da', borderRadius: '4px' }}>\n        <Text strong>Error: </Text>\n        <Text>{failureContext?.errorMessage || 'Unknown error'}</Text>\n        <br />\n        <Text strong>Step: </Text>\n        <Text>{failureContext?.stepName || 'Unknown'}</Text>\n        {failureContext?.toolName && (\n          <>\n            <span> | </span>\n            <Text strong>Tool: </Text>\n            <Text>{failureContext.toolName}</Text>\n          </>\n        )}\n      </div>\n\n      {/* AI Analysis (if available) */}\n      {failureContext?.aiAnalysis && (\n        <div style={{ marginBottom: '12px', padding: '8px', backgroundColor: '#d1ecf1', borderRadius: '4px' }}>\n          <div style={{ marginBottom: '4px' }}>\n            <Text strong>Root Cause: </Text>\n            <Text>{failureContext.aiAnalysis.rootCause || 'Not available'}</Text>\n          </div>\n          <div>\n            <Text strong>Recommendation: </Text>\n            <Text>{failureContext.aiAnalysis.recommendation || 'Not available'}</Text>\n          </div>\n        </div>\n      )}\n\n      {/* Recovery Options */}\n      <div style={{ marginBottom: '12px' }}>\n        <Text strong style={{ marginBottom: '8px', display: 'block' }}>Choose Recovery Action:</Text>\n        \n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          {recoveryOptions && recoveryOptions.map((option, index) => (\n            <RecoveryOption\n              key={index}\n              option={option}\n              index={index}\n              isSelected={selectedOptionIndex === index}\n              onSelect={() => handleOptionSelect(index)}\n            />\n          ))}\n          \n          {/* Skip option */}\n          <RecoveryOption\n            option={{\n              action: 'Skip This Step',\n              reasoning: 'Skip this step and continue with the next step in the plan.',\n              riskLevel: 'medium',\n              successProbability: 0.7,\n              details: 'Note: May affect steps that depend on this step\\'s output.'\n            }}\n            index=\"skip\"\n            isSelected={selectedOptionIndex === 'skip'}\n            onSelect={() => handleOptionSelect('skip')}\n          />\n        </Space>\n      </div>\n\n      {/* Action Buttons */}\n      <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '8px' }}>\n        <Button \n          type=\"default\"\n          danger\n          icon={<StopOutlined />}\n          onClick={handleAbort}\n        >\n          Abort Execution\n        </Button>\n        <Button \n          type=\"primary\"\n          icon={<PlayCircleOutlined />}\n          disabled={selectedOptionIndex === null}\n          onClick={handleProceed}\n        >\n          Proceed with Selected Option\n        </Button>\n      </div>\n    </Card>\n  );\n};\n\n/**\n * Individual recovery option component\n */\nconst RecoveryOption = ({ option, index, isSelected, onSelect }) => {\n  const [showDetails, setShowDetails] = useState(false);\n  \n  const successProb = Math.round((option.successProbability || 0) * 100);\n  const riskLevel = (option.riskLevel || 'medium').toLowerCase();\n  \n  const isMultiStep = option.action === 'multi_step_recovery' && option.multiStepPlan && option.multiStepPlan.length > 0;\n  \n  const getRiskColor = (risk) => {\n    switch (risk) {\n      case 'low': return 'green';\n      case 'high': return 'red';\n      case 'medium':\n      default: return 'orange';\n    }\n  };\n\n  return (\n    <Card \n      size=\"small\"\n      className={`recovery-option ${isSelected ? 'selected' : ''}`}\n      onClick={onSelect}\n      style={{ \n        cursor: 'pointer',\n        border: isSelected ? '2px solid #1890ff' : '1px solid #d9d9d9',\n        backgroundColor: isSelected ? '#f0f7ff' : '#fff'\n      }}\n    >\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '8px' }}>\n        <Text strong>\n          {option.action}\n          {isMultiStep && (\n            <Tag size=\"small\" color=\"blue\" style={{ marginLeft: '8px' }}>\n              {option.totalSteps || option.multiStepPlan.length} steps\n            </Tag>\n          )}\n        </Text>\n        <Space size=\"small\">\n          <Tag color=\"blue\">{successProb}% Success</Tag>\n          <Tag color={getRiskColor(riskLevel)}>{option.riskLevel || 'Medium'} Risk</Tag>\n        </Space>\n      </div>\n      \n      <Paragraph style={{ marginBottom: isMultiStep || option.details ? '8px' : '0', color: '#666' }}>\n        {option.reasoning || 'No reasoning provided'}\n      </Paragraph>\n\n      {/* Single-step details */}\n      {!isMultiStep && (option.newTool || option.modifiedParameters) && (\n        <div style={{ fontSize: '12px', color: '#888', marginBottom: '8px' }}>\n          {option.newTool && `New Tool: ${option.newTool}`}\n          {option.newTool && option.modifiedParameters && ' | '}\n          {option.modifiedParameters && `Parameters: ${JSON.stringify(option.modifiedParameters)}`}\n        </div>\n      )}\n\n      {/* Option details */}\n      {option.details && !isMultiStep && (\n        <div style={{ fontSize: '12px', color: '#888' }}>\n          {option.details}\n        </div>\n      )}\n\n      {/* Multi-step details */}\n      {isMultiStep && (\n        <div style={{ marginTop: '8px' }}>\n          <Button \n            type=\"text\" \n            size=\"small\"\n            icon={showDetails ? <UpOutlined /> : <DownOutlined />}\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowDetails(!showDetails);\n            }}\n            style={{ padding: '0', height: 'auto', fontSize: '12px' }}\n          >\n            {showDetails ? 'Hide' : 'Show'} Multi-Step Plan ({option.totalSteps || option.multiStepPlan.length} steps)\n          </Button>\n          \n          {showDetails && (\n            <div style={{ marginTop: '8px', paddingLeft: '16px', borderLeft: '2px solid #f0f0f0' }}>\n              {option.multiStepPlan.map((step, stepIndex) => (\n                <div key={stepIndex} style={{ marginBottom: '8px', fontSize: '12px' }}>\n                  <div style={{ display: 'flex', alignItems: 'flex-start', gap: '8px' }}>\n                    <div style={{ \n                      minWidth: '16px', \n                      height: '16px', \n                      borderRadius: '50%', \n                      backgroundColor: '#1890ff', \n                      color: 'white', \n                      display: 'flex', \n                      alignItems: 'center', \n                      justifyContent: 'center',\n                      fontSize: '10px',\n                      marginTop: '2px'\n                    }}>\n                      {step.stepOrder || stepIndex + 1}\n                    </div>\n                    <div style={{ flex: 1 }}>\n                      <div style={{ fontWeight: 'bold' }}>{step.toolName}</div>\n                      <div style={{ color: '#666' }}>{step.purpose}</div>\n                      {step.parameters && Object.keys(step.parameters).length > 0 && (\n                        <div style={{ color: '#888', marginTop: '2px' }}>\n                          Parameters: {JSON.stringify(step.parameters, null, 2)}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n};\n\nInlineRecovery.propTypes = {\n  stepId: PropTypes.string.isRequired,\n  recoveryData: PropTypes.shape({\n    visible: PropTypes.bool,\n    inProgress: PropTypes.bool,\n    selectedOption: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    progressMessage: PropTypes.string,\n    failureContext: PropTypes.shape({\n      errorMessage: PropTypes.string,\n      stepName: PropTypes.string,\n      toolName: PropTypes.string,\n      aiAnalysis: PropTypes.shape({\n        rootCause: PropTypes.string,\n        recommendation: PropTypes.string,\n      }),\n    }),\n    recoveryOptions: PropTypes.arrayOf(PropTypes.shape({\n      action: PropTypes.string,\n      reasoning: PropTypes.string,\n      riskLevel: PropTypes.string,\n      successProbability: PropTypes.number,\n      newTool: PropTypes.string,\n      modifiedParameters: PropTypes.object,\n      details: PropTypes.string,\n      multiStepPlan: PropTypes.array,\n      totalSteps: PropTypes.number,\n    })),\n  }),\n  onProceedWithRecovery: PropTypes.func,\n  onAbortRecovery: PropTypes.func,\n};\n\nRecoveryOption.propTypes = {\n  option: PropTypes.object.isRequired,\n  index: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  isSelected: PropTypes.bool,\n  onSelect: PropTypes.func,\n};\n\nexport default InlineRecovery;","import React from 'react';\nimport { Card, Space, Button, Tag, Progress, Typography } from 'antd';\nimport { \n  RobotOutlined, \n  CheckOutlined, \n  CloseOutlined \n} from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport ExecutionStep from './ExecutionStep';\nimport InlineRecovery from './InlineRecovery';\n\nconst { Text } = Typography;\n\n/**\n * Complete execution plan component with status header, steps, and actions\n * Handles the entire execution plan display with consistent styling\n */\nconst ExecutionPlan = ({\n  steps = [],\n  logs = [],\n  recoveryOptions = {},\n  isExecuting = false,\n  executionProgress = 0,\n  executionElapsed = '00:00',\n  executionCompleted = false,\n  onConfirm = null,\n  onCancel = null,\n  onProceedWithRecovery = null,\n  onAbortRecovery = null,\n  showConfirmButton = true,\n  showCancelButton = true,\n  confirmButtonText = 'Confirm & Execute',\n  children = null,\n  title = 'Execution Plan',\n  icon = <RobotOutlined />,\n  className = '',\n  ...props\n}) => {\n  // Function to get logs for a specific step\n  const getStepLogs = (stepId, stepIndex) => {\n    if (!logs || logs.length === 0) return [];\n    \n    // Filter logs by stepId, or if stepId is not available, try to match by step index\n    return logs.filter(log => {\n      if (log.stepId) {\n        // Try exact match first\n        if (log.stepId === stepId) return true;\n        // Try step-{index} format\n        if (log.stepId === `step-${stepIndex}`) return true;\n        // Try just the index number\n        if (log.stepId === stepIndex.toString()) return true;\n        // Try step_{index} format\n        if (log.stepId === `step_${stepIndex}`) return true;\n      }\n      // If no stepId in the log, for now return all logs for the first step (index 0)\n      // This is a fallback for logs that don't have step association\n      return stepIndex === 0 && !log.stepId;\n    });\n  };\n\n  const renderStatusHeader = () => {\n    if (!isExecuting && !executionCompleted) return null;\n\n    const statusStyle = executionCompleted ? {\n      background: '#d4edda', \n      border: '1px solid #28a745',\n      boxShadow: '0 0 8px rgba(40, 167, 69, 0.3)',\n    } : {\n      background: '#f8f9fa', \n      border: '1px solid #dee2e6'\n    };\n\n    return (\n      <div style={{ \n        padding: '16px', \n        borderRadius: '8px',\n        ...statusStyle\n      }}>\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          marginBottom: '12px' \n        }}>\n          <Text strong className={executionCompleted ? 'status-success' : 'status-running'}>\n            {executionCompleted ? 'Execution Completed Successfully' : 'Execution in Progress'}\n          </Text>\n          <Text type=\"secondary\" style={{ fontFamily: 'monospace' }}>\n            {executionElapsed}\n          </Text>\n        </div>\n        <Progress \n          percent={executionProgress} \n          status={executionCompleted ? 'success' : 'active'} \n          strokeColor={executionCompleted ? '#28a745' : '#007bff'}\n          trailColor=\"#e9ecef\"\n        />\n      </div>\n    );\n  };\n\n  const renderActionButtons = () => {\n    if (isExecuting || executionCompleted) {\n      return isExecuting ? <Tag color=\"processing\">Executing...</Tag> : null;\n    }\n\n    return (\n      <Space>\n        {showConfirmButton && onConfirm && (\n          <Button \n            type=\"primary\" \n            icon={<CheckOutlined />}\n            onClick={onConfirm}\n            size=\"large\"\n          >\n            {confirmButtonText}\n          </Button>\n        )}\n        \n        {showCancelButton && onCancel && (\n          <Button \n            icon={<CloseOutlined />}\n            onClick={onCancel}\n            size=\"large\"\n          >\n            Cancel\n          </Button>\n        )}\n      </Space>\n    );\n  };  // Determine card styling based on execution state\n\n  const cardStyle = {\n    marginTop: 16,\n    ...(executionCompleted && {\n      borderColor: '#28a745',\n      boxShadow: '0 4px 12px rgba(40, 167, 69, 0.15)',\n    })\n  };\n\n  return (\n    <div className={`execution-plan-container ${className} ${executionCompleted ? 'execution-success' : ''}`}>\n      <Card \n        title={<>{icon} {title}</>} \n        style={cardStyle}\n        {...props}\n      >\n        <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n          {/* Execution Status Header */}\n          {renderStatusHeader()}\n          \n          {/* Execution Steps */}\n          <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>\n            {steps.map((step, index) => (\n              <React.Fragment key={`${step.id || index}-${step.status || 'pending'}`}>\n                <ExecutionStep\n                  step={step}\n                  index={index}\n                  logs={getStepLogs(step.id, index)}\n                />\n                {/* Recovery Options - inline after each step */}\n                {recoveryOptions[step.id] && (\n                  <InlineRecovery \n                    stepId={step.id}\n                    recoveryData={recoveryOptions[step.id]}\n                    onProceedWithRecovery={onProceedWithRecovery}\n                    onAbortRecovery={onAbortRecovery}\n                  />\n                )}\n              </React.Fragment>\n            ))}\n          </div>\n          \n          {/* Action Buttons */}\n          {renderActionButtons()}\n          \n          {children && React.Children.map(children, child => {\n            // Skip ExecutionLogs component\n            if (React.isValidElement(child) && child.type?.name === 'ExecutionLogs') {\n              return null;\n            }\n            return child;\n          })}\n        </Space>\n      </Card>\n    </div>\n  );\n};\n\nExecutionPlan.propTypes = {\n  steps: PropTypes.arrayOf(PropTypes.object),\n  logs: PropTypes.arrayOf(PropTypes.shape({\n    type: PropTypes.string,\n    message: PropTypes.string,\n    timestamp: PropTypes.instanceOf(Date),\n    stepId: PropTypes.string,\n  })),\n  recoveryOptions: PropTypes.object,\n  isExecuting: PropTypes.bool,\n  executionProgress: PropTypes.number,\n  executionElapsed: PropTypes.string,\n  executionCompleted: PropTypes.bool,\n  onConfirm: PropTypes.func,\n  onCancel: PropTypes.func,\n  onProceedWithRecovery: PropTypes.func,\n  onAbortRecovery: PropTypes.func,\n  showConfirmButton: PropTypes.bool,\n  showCancelButton: PropTypes.bool,\n  confirmButtonText: PropTypes.string,\n  children: PropTypes.node,\n  title: PropTypes.string,\n  icon: PropTypes.node,\n  className: PropTypes.string,\n};\n\nexport default ExecutionPlan;","import { Card, Tag, Typography, Empty } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst { Text } = Typography;\n\n/**\n * Execution logs component with consistent styling and formatting\n * Displays execution logs with timestamps and status indicators\n */\nconst ExecutionLogs = ({\n  logs = [],\n  title = 'Execution Logs',\n  maxHeight = 300,\n  showTimestamps = true,\n  className = '',\n  style = {},\n  ...props\n}) => {\n  if (!logs.length) {\n    return (\n      <Card \n        size=\"small\"\n        title={title}\n        className={className}\n        style={{ \n          background: '#f8f9fa',\n          border: '1px solid #dee2e6',\n          ...style\n        }}\n        {...props}\n      >\n        <Empty \n          description=\"No logs available\" \n          style={{ padding: '20px 0' }}\n        />\n      </Card>\n    );\n  }\n\n  const getTagColor = (type) => {\n    switch (type) {\n      case 'success': return 'success';\n      case 'error': return 'error';\n      case 'warning': return 'warning';\n      case 'info': return 'processing';\n      default: return 'default';\n    }\n  };\n\n  return (\n    <Card \n      size=\"small\"\n      title={title}\n      className={className}\n      style={{ \n        background: '#f8f9fa',\n        border: '1px solid #dee2e6',\n        ...style\n      }}\n      {...props}\n    >\n      <div style={{ maxHeight, overflow: 'auto' }}>\n        {logs.map((log, index) => (\n          <div key={index} style={{ \n            marginBottom: 8,\n            padding: '8px 12px',\n            background: 'white',\n            borderRadius: '4px',\n            border: '1px solid #e9ecef'\n          }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n              {showTimestamps && (\n                <Tag \n                  color={getTagColor(log.type)}\n                  size=\"small\"\n                >\n                  {log.timestamp instanceof Date \n                    ? log.timestamp.toLocaleTimeString() \n                    : log.timestamp\n                  }\n                </Tag>\n              )}\n              <Text style={{ fontSize: '0.9rem', flex: 1 }}>\n                {log.message}\n              </Text>\n              {log.type && !showTimestamps && (\n                <Tag \n                  color={getTagColor(log.type)}\n                  size=\"small\"\n                >\n                  {log.type.toUpperCase()}\n                </Tag>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n};\n\nExecutionLogs.propTypes = {\n  logs: PropTypes.arrayOf(PropTypes.shape({\n    message: PropTypes.string.isRequired,\n    timestamp: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n    type: PropTypes.oneOf(['success', 'error', 'warning', 'info', 'default']),\n  })),\n  title: PropTypes.string,\n  maxHeight: PropTypes.number,\n  showTimestamps: PropTypes.bool,\n  className: PropTypes.string,\n  style: PropTypes.object,\n};\n\nexport default ExecutionLogs;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Typography, Collapse, Button } from 'antd';\nimport { ExpandOutlined, CompressOutlined } from '@ant-design/icons';\n\nconst { Text, Title } = Typography;\nconst { Panel } = Collapse;\n\nconst ResourceCard = ({ resource, searchTerm, iconUrl }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  \n  // Extract resource properties with fallback handling\n  const displayProperties = resource.properties?.properties || resource.properties || {};\n  \n  // Highlight search term in resource ID\n  const highlightSearchTerm = (text, searchTerm) => {\n    if (!searchTerm) return text;\n    \n    const regex = new RegExp(`(${searchTerm})`, 'gi');\n    const parts = text.split(regex);\n    \n    return parts.map((part, index) => \n      regex.test(part) ? (\n        <span key={index} className=\"search-highlight\">\n          {part}\n        </span>\n      ) : part\n    );\n  };\n\n  return (\n    <Card\n      className=\"resource-card\"\n      hoverable\n      bodyStyle={{ padding: '20px' }}\n    >\n      <div className=\"resource-header\">\n        <div style={{ display: 'flex', alignItems: 'center', gap: '12px', marginBottom: '16px' }}>\n          <div className=\"resource-icon\">\n            <img \n              src={iconUrl}\n              alt={`${resource.type} icon`}\n              style={{ width: '32px', height: '32px' }}\n              onError={(e) => {\n                e.target.src = '/aws-service-icons/management-governance/32/Arch_AWS-CloudFormation_32.svg';\n              }}\n            />\n          </div>\n          <div style={{ flex: 1, minWidth: 0 }}>\n            <Title \n              level={5} \n              style={{ \n                margin: 0, \n                fontSize: '16px',\n                fontWeight: 600,\n                color: '#1a1a1a',\n                wordBreak: 'break-all'\n              }}\n            >\n              {highlightSearchTerm(resource.id, searchTerm)}\n            </Title>\n            <Text \n              type=\"secondary\" \n              style={{ \n                fontSize: '12px',\n                textTransform: 'uppercase',\n                fontWeight: 500,\n                letterSpacing: '0.5px'\n              }}\n            >\n              {resource.type}\n            </Text>\n          </div>\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={isExpanded ? <CompressOutlined /> : <ExpandOutlined />}\n            onClick={() => setIsExpanded(!isExpanded)}\n            style={{\n              color: '#666',\n              opacity: 0.7,\n            }}\n          />\n        </div>\n      </div>\n\n      <Collapse\n        ghost\n        activeKey={isExpanded ? ['properties'] : []}\n        onChange={() => setIsExpanded(!isExpanded)}\n        style={{ border: 'none' }}\n      >\n        <Panel \n          key=\"properties\" \n          header={null}\n          showArrow={false}\n          style={{ padding: 0, border: 'none' }}\n        >\n          <div className=\"properties-container\">\n            <pre \n              style={{ \n                margin: 0,\n                padding: '16px',\n                fontSize: '12px',\n                lineHeight: '1.5',\n                fontFamily: 'SF Mono, Monaco, Consolas, monospace',\n                color: '#2d3748',\n                backgroundColor: 'transparent',\n                whiteSpace: 'pre-wrap',\n                wordBreak: 'break-word',\n              }}\n            >\n              {JSON.stringify(displayProperties, null, 2)}\n            </pre>\n          </div>\n        </Panel>\n      </Collapse>\n    </Card>\n  );\n};\n\nResourceCard.propTypes = {\n  resource: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    properties: PropTypes.object,\n  }).isRequired,\n  searchTerm: PropTypes.string,\n  iconUrl: PropTypes.string.isRequired,\n};\n\nResourceCard.defaultProps = {\n  searchTerm: '',\n};\n\nexport default ResourceCard;","import PropTypes from 'prop-types';\nimport { Card, Row, Col, Typography, Alert } from 'antd';\n\nconst { Title, Text } = Typography;\n\nconst StateOverview = ({ infrastructureData }) => {\n  if (!infrastructureData) return null;\n\n  // Handle different response structures - similar to old UI logic\n  let actualState = infrastructureData;\n  let dataSource = 'direct';\n  let resourceCount = 0;\n\n  // Check if we have discovered resources and managed state is empty or doesn't exist\n  const hasDiscoveredResources = infrastructureData.resources && infrastructureData.resources.length > 0;\n  const managedResourceCount = infrastructureData.managed_state ? \n    Object.keys(infrastructureData.managed_state.resources || {}).length : 0;\n\n  if (infrastructureData.managed_state && managedResourceCount > 0) {\n    // Use managed state if it has resources\n    actualState = infrastructureData.managed_state;\n    dataSource = 'managed';\n    resourceCount = managedResourceCount;\n  } else if (hasDiscoveredResources) {\n    // Use discovered resources if managed state is empty\n    dataSource = 'discovered';\n    resourceCount = infrastructureData.count || infrastructureData.resources.length;\n  } else {\n    // Direct resource count from API response\n    resourceCount = infrastructureData.count || (infrastructureData.resources?.length || 0);\n  }\n\n  return (\n    <>\n      <div className=\"infrastructure-state-overview\">\n        <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n          <Col xs={24} sm={6}>\n            <Card>\n              <div style={{ textAlign: 'center' }}>\n                <Title level={2} style={{ margin: 0, color: '#1890ff' }}>\n                  {resourceCount}\n                </Title>\n                <Text type=\"secondary\">\n                  {dataSource === 'discovered' ? 'Discovered Resources' : 'Managed Resources'}\n                </Text>\n              </div>\n            </Card>\n          </Col>\n          \n          <Col xs={24} sm={6}>\n            <Card>\n              <div style={{ textAlign: 'center' }}>\n                <Title level={2} style={{ margin: 0, color: '#52c41a' }}>\n                  {actualState.version || '1.0.0'}\n                </Title>\n                <Text type=\"secondary\">State Version</Text>\n              </div>\n            </Card>\n          </Col>\n          \n          <Col xs={24} sm={6}>\n            <Card>\n              <div style={{ textAlign: 'center' }}>\n                <Title level={2} style={{ margin: 0, color: '#faad14' }}>\n                  {new Date(actualState.lastUpdated || actualState.last_updated || infrastructureData.timestamp || Date.now()).toLocaleDateString()}\n                </Title>\n                <Text type=\"secondary\">Last Updated</Text>\n              </div>\n            </Card>\n          </Col>\n\n          <Col xs={24} sm={6}>\n            <Card>\n              <div style={{ textAlign: 'center' }}>\n                <Title level={2} style={{ margin: 0, color: '#17a2b8' }}>\n                  {actualState.region || 'N/A'}\n                </Title>\n                <Text type=\"secondary\">Region</Text>\n              </div>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n\n      {dataSource === 'discovered' && (\n        <Alert\n          message={\n            <span>\n              <i className=\"fas fa-cloud\" style={{ marginRight: 8 }} />\n              Showing live AWS resources (no managed state found)\n            </span>\n          }\n          type=\"info\"\n          showIcon={false}\n          style={{ marginBottom: 16 }}\n        />\n      )}\n\n      {actualState.error && (\n        <Alert\n          message={`Error: ${actualState.error}`}\n          type=\"error\"\n          style={{ marginBottom: 16 }}\n        />\n      )}\n    </>\n  );\n};\n\nStateOverview.propTypes = {\n  infrastructureData: PropTypes.shape({\n    count: PropTypes.number,\n    resources: PropTypes.array,\n    managed_state: PropTypes.object,\n    timestamp: PropTypes.string,\n    error: PropTypes.string,\n  }),\n};\n\nexport default StateOverview;","import PropTypes from 'prop-types';\nimport { Card, Row, Col, Typography, Empty } from 'antd';\nimport ResourceCard from './ResourceCard';\n\nconst { Text } = Typography;\n\n// AWS service icon mapping\nconst getAWSServiceIcon = (resourceType) => {\n  const typeMapping = {\n    // Compute\n    'ec2_instance': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'instance': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'lambda': 'compute/32/Arch_AWS-Lambda_32.svg',\n    'auto_scaling_group': 'compute/32/Arch_Amazon-EC2-Auto-Scaling_32.svg',\n    'asg': 'compute/32/Arch_Amazon-EC2-Auto-Scaling_32.svg',\n    \n    // Networking\n    'vpc': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'subnet': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'security_group': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'securitygroup': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'load_balancer': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'loadbalancer': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'alb': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'route53': 'networking-content-delivery/32/Arch_Amazon-Route-53_32.svg',\n    'cloudfront': 'networking-content-delivery/32/Arch_Amazon-CloudFront_32.svg',\n    'internet_gateway': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'nat_gateway': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'route_table': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    \n    // Database\n    'rds': 'database/32/Arch_Amazon-RDS_32.svg',\n    'database': 'database/32/Arch_Amazon-RDS_32.svg',\n    'dynamodb': 'database/32/Arch_Amazon-DynamoDB_32.svg',\n    'redshift': 'database/32/Arch_Amazon-Redshift_32.svg',\n    \n    // Storage\n    's3': 'storage/32/Arch_Amazon-Simple-Storage-Service_32.svg',\n    'ebs': 'storage/32/Arch_Amazon-Elastic-Block-Store_32.svg',\n    'efs': 'storage/32/Arch_Amazon-Elastic-File-System_32.svg',\n    \n    // Default fallback\n    'default': 'management-governance/32/Arch_AWS-CloudFormation_32.svg'\n  };\n\n  const normalizedType = resourceType?.toLowerCase() || 'default';\n  return `/aws-service-icons/${typeMapping[normalizedType] || typeMapping.default}`;\n};\n\nconst ResourcesByCategory = ({ infrastructureData, searchTerm }) => {\n  if (!infrastructureData) {\n    return (\n      <div style={{ \n        backgroundColor: 'white',\n        borderRadius: '16px',\n        border: '1px solid #e8e8e8',\n        padding: '48px'\n      }}>\n        <Empty\n          description={\n            <Text type=\"secondary\" style={{ fontSize: '16px' }}>\n              No infrastructure data available\n            </Text>\n          }\n          style={{ padding: '48px 0' }}\n        />\n      </div>\n    );\n  }\n\n  // Handle different response structures\n  let resources = {};\n  \n  const hasDiscoveredResources = infrastructureData.resources && infrastructureData.resources.length > 0;\n  const managedResourceCount = infrastructureData.managed_state ? \n    Object.keys(infrastructureData.managed_state.resources || {}).length : 0;\n\n  if (infrastructureData.managed_state && managedResourceCount > 0) {\n    resources = infrastructureData.managed_state.resources || {};\n  } else if (hasDiscoveredResources) {\n    resources = {};\n    infrastructureData.resources.forEach((resource, index) => {\n      resources[resource.id || `resource-${index}`] = {\n        id: resource.id,\n        name: resource.name || resource.id,\n        type: resource.type,\n        status: resource.status,\n        properties: {\n          aws_details: resource.properties\n        },\n        createdAt: resource.createdAt,\n        dependencies: resource.properties?.dependencies\n      };\n    });\n  }\n\n  // Filter out step_reference resources and apply search\n  const filteredResources = Object.values(resources)\n    .filter(r => r.type !== 'step_reference')\n    .filter(r => !searchTerm || r.id.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  // Group resources by type (category)\n  const resourcesByCategory = filteredResources.reduce((acc, resource) => {\n    const type = resource.type || 'unknown';\n    if (!acc[type]) {\n      acc[type] = [];\n    }\n    acc[type].push(resource);\n    return acc;\n  }, {});\n\n  if (Object.keys(resourcesByCategory).length === 0) {\n    return (\n      <div style={{ \n        backgroundColor: 'white',\n        borderRadius: '16px',\n        border: '1px solid #e8e8e8',\n        padding: '48px'\n      }}>\n        <Empty\n          description={\n            <Text type=\"secondary\" style={{ fontSize: '16px' }}>\n              {searchTerm ? 'No resources match your search' : 'No resources found'}\n            </Text>\n          }\n          style={{ padding: '48px 0' }}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n      {Object.entries(resourcesByCategory).map(([category, resources]) => (\n        <Card\n          key={category}\n          className=\"category-card\"\n          bodyStyle={{ padding: '24px' }}\n          title={\n            <div className=\"category-header\">\n              <Text strong style={{ \n                textTransform: 'capitalize', \n                fontSize: '18px',\n                color: '#1a1a1a'\n              }}>\n                {category.replace('_', ' ')} ({resources.length})\n              </Text>\n            </div>\n          }\n        >\n          <Row gutter={[16, 16]}>\n            {resources.map((resource) => (\n              <Col key={resource.id} xs={24} sm={12} lg={8} xl={6}>\n                <ResourceCard \n                  resource={resource} \n                  searchTerm={searchTerm}\n                  iconUrl={getAWSServiceIcon(resource.type)}\n                />\n              </Col>\n            ))}\n          </Row>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\nResourcesByCategory.propTypes = {\n  infrastructureData: PropTypes.shape({\n    resources: PropTypes.array,\n    managed_state: PropTypes.object,\n  }),\n  searchTerm: PropTypes.string,\n};\n\nResourcesByCategory.defaultProps = {\n  searchTerm: '',\n};\n\nexport default ResourcesByCategory;","import PropTypes from 'prop-types';\nimport { Typography, Button, Input } from 'antd';\nimport { ReloadOutlined, SearchOutlined } from '@ant-design/icons';\n\nconst { Text, Title } = Typography;\n\nconst StateHeader = ({ \n  onRefresh, \n  refreshing, \n  searchTerm, \n  onSearchChange, \n  totalResources, \n  totalCategories \n}) => {\n  return (\n    <div style={{ \n      marginBottom: '32px',\n      backgroundColor: 'white',\n      padding: '24px',\n      borderRadius: '16px',\n      boxShadow: '0 2px 8px rgba(0, 0, 0, 0.04)',\n      border: '1px solid #e8e8e8'\n    }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>\n        <Title level={2} style={{ margin: 0, color: '#1a1a1a', fontWeight: 700 }}>\n          Infrastructure Resources\n        </Title>\n        <Button\n          type=\"primary\"\n          icon={<ReloadOutlined spin={refreshing} />}\n          onClick={onRefresh}\n          loading={refreshing}\n          style={{\n            borderRadius: '8px',\n            height: '40px',\n            backgroundColor: '#1890ff',\n            borderColor: '#1890ff',\n          }}\n        >\n          Refresh\n        </Button>\n      </div>\n      \n      <div style={{ display: 'flex', gap: '16px', alignItems: 'center' }}>\n        <Input\n          placeholder=\"Search resources by ID...\"\n          prefix={<SearchOutlined />}\n          value={searchTerm}\n          onChange={onSearchChange}\n          style={{\n            maxWidth: '300px',\n            borderRadius: '8px',\n          }}\n          allowClear\n        />\n        <Text type=\"secondary\">\n          {totalResources} resource{totalResources !== 1 ? 's' : ''} in {totalCategories} categories\n        </Text>\n      </div>\n    </div>\n  );\n};\n\nStateHeader.propTypes = {\n  onRefresh: PropTypes.func.isRequired,\n  refreshing: PropTypes.bool,\n  searchTerm: PropTypes.string,\n  onSearchChange: PropTypes.func,\n  totalResources: PropTypes.number,\n  totalCategories: PropTypes.number,\n};\n\nStateHeader.defaultProps = {\n  refreshing: false,\n  searchTerm: '',\n  onSearchChange: () => {},\n  totalResources: 0,\n  totalCategories: 0,\n};\n\nexport default StateHeader;","import { useEffect, useRef, useState, useCallback } from 'react';\nimport { Card, Space, Typography, Tooltip, Button, Tag, Modal } from 'antd';\nimport { NodeIndexOutlined, FullscreenOutlined, ZoomInOutlined, ZoomOutOutlined, CompressOutlined, DragOutlined, AimOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport mermaid from 'mermaid';\n\nconst { Text } = Typography;\n\n// AWS service icon mapping (same as ResourcesByCategory.js)\nconst getAWSServiceIcon = (resourceType) => {\n  const typeMapping = {\n    // Compute\n    'ec2_instance': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'instance': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'ec2': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'ami': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'lambda': 'compute/32/Arch_AWS-Lambda_32.svg',\n    'auto_scaling_group': 'compute/32/Arch_Amazon-EC2-Auto-Scaling_32.svg',\n    'asg': 'compute/32/Arch_Amazon-EC2-Auto-Scaling_32.svg',\n    \n    // Networking\n    'vpc': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'subnet': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'security_group': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'securitygroup': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'sg': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'load_balancer': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'loadbalancer': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'alb': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'lb': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'route53': 'networking-content-delivery/32/Arch_Amazon-Route-53_32.svg',\n    'cloudfront': 'networking-content-delivery/32/Arch_Amazon-CloudFront_32.svg',\n    'internet_gateway': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'nat_gateway': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'natgw': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'route_table': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    \n    // Database\n    'rds': 'database/32/Arch_Amazon-RDS_32.svg',\n    'database': 'database/32/Arch_Amazon-RDS_32.svg',\n    'dynamodb': 'database/32/Arch_Amazon-DynamoDB_32.svg',\n    'redshift': 'database/32/Arch_Amazon-Redshift_32.svg',\n    \n    // Storage\n    's3': 'storage/32/Arch_Amazon-Simple-Storage-Service_32.svg',\n    'ebs': 'storage/32/Arch_Amazon-Elastic-Block-Store_32.svg',\n    'efs': 'storage/32/Arch_Amazon-Elastic-File-System_32.svg',\n    \n    // Other\n    'tg': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'lt': 'compute/32/Arch_Amazon-EC2_32.svg',\n    \n    // Default fallback\n    'default': 'management-governance/32/Arch_AWS-CloudFormation_32.svg'\n  };\n\n  const normalizedType = resourceType?.toLowerCase() || 'default';\n  return `/aws-service-icons/${typeMapping[normalizedType] || typeMapping.default}`;\n};\n\n/**\n * Parse Mermaid syntax to extract node type mappings\n * Returns a map of nodeId -> resourceType from :::className annotations\n */\nconst parseNodeTypes = (mermaidSyntax) => {\n  const typeMap = {};\n  if (!mermaidSyntax) return typeMap;\n  \n  const lines = mermaidSyntax.split('\\n');\n  \n  lines.forEach(line => {\n    // Match node definitions with class: nodeId[\"label\"]:::className\n    const match = line.trim().match(/^(\\S+)\\[.*?\\]:::(\\w+)/);\n    if (match) {\n      const [, nodeId, className] = match;\n      typeMap[nodeId] = className; // e.g., vpc_0933701ec3e750243 -> vpc\n    }\n  });\n  \n  return typeMap;\n};\n\n/**\n * Extract original node ID from Mermaid's transformed ID\n * Mermaid adds prefixes like 'flowchart-' and suffixes like '-123'\n */\nconst extractOriginalId = (mermaidId) => {\n  if (!mermaidId) return '';\n  \n  // Remove common Mermaid prefixes (flowchart-, graph-, L-, etc.)\n  let id = mermaidId.replace(/^(flowchart-|graph-|L-|subgraph-)/gi, '');\n  \n  // Remove numeric-only suffixes added by Mermaid (e.g., -123, -456)\n  // But preserve resource IDs that contain hyphens and numbers (e.g., vpc-0d67cc5f)\n  // Only remove if it's a hyphen followed by ONLY digits at the end\n  id = id.replace(/-(\\d+)$/g, '');\n  \n  return id;\n};\n\n/**\n * Detect resource type from node ID or class\n * Returns the AWS service type if detected\n */\nconst detectResourceType = (nodeId, classNames) => {\n  const idLower = nodeId.toLowerCase();\n  \n  // Check class names first (more reliable)\n  // IMPORTANT: Order matters! Check specific patterns before generic ones\n  if (classNames) {\n    const classLower = classNames.toLowerCase();\n    \n    // Check specific resource types FIRST (before generic patterns like 'instance')\n    if (classLower.includes('vpc') && !classLower.includes('subnet')) return 'vpc'; // Must check vpc before subnet\n    if (classLower.includes('subnet')) return 'subnet';\n    if (classLower.includes('lambda')) return 'lambda';\n    if (classLower.includes('rds') || classLower.includes('database')) return 'rds';\n    if (classLower.includes('dynamodb')) return 'dynamodb';\n    if (classLower.includes('s3')) return 's3';\n    if (classLower.includes('ami')) return 'ami';\n    if (classLower.includes('natgw') || classLower.includes('nat_gateway')) return 'nat_gateway';\n    if (classLower.includes('alb') || classLower.includes('lb') || classLower.includes('loadbalancer') || classLower.includes('load_balancer')) return 'load_balancer';\n    if (classLower.includes('tg') || classLower.includes('targetgroup')) return 'load_balancer';\n    if (classLower.includes('asg') || classLower.includes('auto_scaling')) return 'auto_scaling_group';\n    if (classLower.includes('sg') || classLower.includes('security') || classLower.includes('securitygroup')) return 'security_group';\n    \n    // Check generic patterns LAST (these are broader and might cause false positives)\n    if (classLower.includes('ec2')) return 'ec2_instance';\n    if (classLower.includes('lt') || classLower.includes('launch')) return 'ec2_instance';\n    // Only check 'instance' if it's clearly an EC2 instance context, not Mermaid internals\n    if (classLower.match(/\\bec2\\b|\\binstance\\b/) && !classLower.includes('vpc')) return 'ec2_instance';\n  }\n\n  // Fallback: check node ID patterns (Mermaid adds prefixes like 'flowchart-', so use includes not startsWith)\n  // IMPORTANT: Check VPC/Subnet patterns BEFORE EC2 patterns since they're more specific\n  if (idLower.includes('vpc-') || idLower.includes('vpc_')) return 'vpc';\n  if (idLower.includes('subnet-') || idLower.includes('subnet_')) return 'subnet';\n  if (idLower.includes('sg-') || idLower.includes('sg_')) return 'security_group';\n  if (idLower.includes('i-') || idLower.includes('i_')) return 'ec2_instance';\n  if (idLower.includes('lt-') || idLower.includes('lt_')) return 'ec2_instance';\n  if (idLower.includes('ami-') || idLower.includes('ami_')) return 'ami';\n  if (idLower.includes('targetgroup') || idLower.includes('elasticloadbalancing')) return 'load_balancer';\n  \n  return null;\n};\n\n/**\n * Build a type map from node metadata (from API response)\n * Returns a map of sanitized nodeId -> resourceType\n */\nconst buildTypeMapFromMetadata = (nodeMetadata) => {\n  const typeMap = {};\n  if (!nodeMetadata || !Array.isArray(nodeMetadata)) return typeMap;\n  \n  nodeMetadata.forEach(node => {\n    if (node.id && node.type) {\n      // Sanitize the ID to match Mermaid's transformation\n      const sanitizedId = node.id.replace(/[^a-zA-Z0-9_]/g, '_');\n      typeMap[sanitizedId] = node.type;\n    }\n  });\n  \n  return typeMap;\n};\n\n/**\n * MermaidDiagram Component\n * Renders a Mermaid diagram with automatic initialization and error handling\n * Supports AWS service icons in node labels\n * @param {Object} props\n * @param {string} props.mermaidSyntax - The Mermaid diagram syntax\n * @param {string} props.timestamp - Timestamp of the data\n * @param {Function} props.onFullscreen - Callback for fullscreen mode\n * @param {Array} props.nodeMetadata - Array of node objects with {id, type, ...} from API response\n */\nconst MermaidDiagram = ({ mermaidSyntax, timestamp, onFullscreen, nodeMetadata }) => {\n  const mermaidRef = useRef(null);\n  const renderingRef = useRef(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [zoom, setZoom] = useState(1);\n  const [pan, setPan] = useState({ x: 0, y: 0 });\n  const svgContainerRef = useRef(null);\n  const [renderedSvg, setRenderedSvg] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const dragContainerRef = useRef(null);\n\n  useEffect(() => {\n    if (!mermaidSyntax || !mermaidRef.current || renderingRef.current) return;\n\n    let isMounted = true;\n    renderingRef.current = true;\n\n    const renderMermaid = async () => {\n      try {\n        // Generate a unique ID for this diagram\n        const id = `mermaid-${Date.now()}`;\n        \n        if (!isMounted || !mermaidRef.current) return;\n        \n        // Clear previous content and remove any previous data-processed attribute\n        const element = mermaidRef.current;\n        element.removeAttribute('data-processed');\n        element.innerHTML = '';\n        \n        // Create a new div for the diagram (use original syntax without HTML modifications)\n        const diagramDiv = document.createElement('div');\n        diagramDiv.className = 'mermaid';\n        diagramDiv.id = id;\n        diagramDiv.textContent = mermaidSyntax;\n        element.appendChild(diagramDiv);\n        \n        // Simple delay to let DOM settle\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        if (!isMounted) return;\n        \n        // Render the mermaid diagram\n        await mermaid.run({\n          nodes: [diagramDiv],\n          suppressErrors: false,\n        });\n        \n        if (!isMounted) return;\n        \n        // After rendering, add AWS icons as overlay elements\n        await addIconsToNodes(element);\n        \n        // Clone the rendered SVG to both containers\n        const svgElement = element.querySelector('svg');\n        if (svgElement) {\n          // Store in state for use in modal\n          setRenderedSvg(svgElement.outerHTML);\n          \n          // Also add to card view container\n          if (svgContainerRef.current) {\n            svgContainerRef.current.innerHTML = svgElement.outerHTML;\n          }\n        }\n        \n      } catch (error) {\n        console.error('Mermaid rendering error:', error);\n        \n        // Display error in the visible container\n        const errorHtml = `\n          <div style=\"color: #ff4d4f; text-align: left; padding: 20px; background: #fff2f0; border: 1px solid #ffccc7; border-radius: 4px;\">\n            <div style=\"font-weight: bold; margin-bottom: 8px;\">⚠️ Error rendering diagram</div>\n            <div style=\"margin-bottom: 12px;\">${error.message}</div>\n            <details style=\"margin-top: 12px;\">\n              <summary style=\"cursor: pointer; color: #1890ff;\">Show Mermaid Syntax</summary>\n              <pre style=\"margin-top: 8px; padding: 12px; background: #f5f5f5; border-radius: 4px; overflow: auto;\">${mermaidSyntax}</pre>\n            </details>\n          </div>\n        `;\n        \n        if (isMounted && svgContainerRef.current) {\n          svgContainerRef.current.innerHTML = errorHtml;\n        }\n        \n        setRenderedSvg(errorHtml);\n      } finally {\n        if (isMounted) {\n          renderingRef.current = false;\n        }\n      }\n    };\n    \n    // Function to add icon overlays to rendered nodes\n    const addIconsToNodes = async (container) => {\n      if (!isMounted) return;\n      \n      try {\n        // Wait a bit more for Mermaid to fully render\n        await new Promise(resolve => setTimeout(resolve, 150));\n        \n        if (!isMounted) return;\n        \n        // Build type map from node metadata (PRIMARY source - from API)\n        const metadataTypeMap = buildTypeMapFromMetadata(nodeMetadata);\n        \n        // Parse node types from original Mermaid syntax (FALLBACK source)\n        const mermaidTypeMap = parseNodeTypes(mermaidSyntax);\n        \n        // Find all nodes in the rendered SVG\n        const nodes = container.querySelectorAll('.node');\n        \n        nodes.forEach(node => {\n          // Get node ID from the element\n          const nodeId = node.id || '';\n          const classAttr = node.getAttribute('class') || '';\n          \n          // Extract original node ID from Mermaid's transformed ID\n          const originalId = extractOriginalId(nodeId);\n          \n          // Try to get type from metadata first (TIER 1 - most reliable)\n          let resourceType = metadataTypeMap[originalId];\n          \n          // Fallback to Mermaid syntax parsing (TIER 2)\n          if (!resourceType) {\n            resourceType = mermaidTypeMap[originalId];\n          }\n          \n          // Final fallback to pattern detection (TIER 3)\n          if (!resourceType) {\n            resourceType = detectResourceType(nodeId, classAttr);\n          }\n          \n          if (resourceType) {\n            const iconPath = getAWSServiceIcon(resourceType);\n            \n            // Find the rect element (the node box)\n            const rect = node.querySelector('rect, polygon, circle, ellipse');\n            if (!rect) return;\n            \n            // Get the position and size\n            const bbox = rect.getBBox();\n            \n            // Create an image element\n            const img = document.createElementNS('http://www.w3.org/2000/svg', 'image');\n            img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', iconPath);\n            img.setAttribute('width', '32');\n            img.setAttribute('height', '32');\n            // Center the icon horizontally at the top of the node\n            img.setAttribute('x', bbox.x + (bbox.width / 2) - 16); // Center icon (32/2 = 16)\n            img.setAttribute('y', bbox.y + 12); // Top padding\n            img.style.pointerEvents = 'none'; // Don't interfere with node interactions\n            \n            // Insert the icon before the text label so it appears behind\n            const labelContainer = node.querySelector('.label');\n            const textElements = node.querySelectorAll('.label text, text');\n            \n            if (labelContainer && labelContainer.parentNode) {\n              labelContainer.parentNode.insertBefore(img, labelContainer);\n            } else if (textElements.length > 0 && textElements[0].parentNode) {\n              textElements[0].parentNode.insertBefore(img, textElements[0]);\n            } else {\n              node.appendChild(img);\n            }\n            \n            // Move all text elements down to make room for icon (separate line)\n            textElements.forEach(textEl => {\n              // Get current transform if any\n              const currentTransform = textEl.getAttribute('transform') || '';\n              const currentY = parseFloat(textEl.getAttribute('y') || 0);\n              \n              // Move text down by icon height + spacing (more aggressive)\n              if (currentTransform) {\n                // If there's a transform, we need to add a translate\n                const newTransform = `${currentTransform} translate(0, 35)`;\n                textEl.setAttribute('transform', newTransform);\n              } else {\n                // Otherwise just adjust Y\n                textEl.setAttribute('y', currentY + 35);\n              }\n            });\n            \n            // Also adjust label container if it exists\n            if (labelContainer) {\n              const currentTransform = labelContainer.getAttribute('transform') || '';\n              if (currentTransform) {\n                const newTransform = `${currentTransform} translate(0, 35)`;\n                labelContainer.setAttribute('transform', newTransform);\n              } else {\n                const currentY = parseFloat(labelContainer.getAttribute('y') || 0);\n                labelContainer.setAttribute('y', currentY + 35);\n              }\n            }\n          }\n        });\n      } catch (error) {\n        console.warn('Failed to add icons to nodes:', error);\n        // Non-critical error, diagram will still display without icons\n      }\n    };\n    \n    renderMermaid();\n    \n    // Cleanup function\n    return () => {\n      isMounted = false;\n      renderingRef.current = false;\n    };\n  }, [mermaidSyntax, nodeMetadata]); // Re-render if mermaid syntax or node metadata changes\n\n  const handleFullscreen = () => {\n    if (onFullscreen) {\n      onFullscreen();\n    } else {\n      setIsFullscreen(true);\n    }\n  };\n\n  const handleCloseFullscreen = () => {\n    setIsFullscreen(false);\n    setZoom(1);\n    setPan({ x: 0, y: 0 }); // Reset pan when closing fullscreen\n  };\n\n  const handleZoomIn = () => {\n    setZoom(prevZoom => Math.min(prevZoom + 0.25, 5)); // Max 5x zoom\n  };\n\n  const handleZoomOut = () => {\n    setZoom(prevZoom => Math.max(prevZoom - 0.25, 0.25)); // Min 0.25x zoom\n  };\n\n  const handleResetZoom = () => {\n    setZoom(1);\n    setPan({ x: 0, y: 0 });\n  };\n\n  // Mouse wheel zoom\n  const handleWheel = useCallback((e) => {\n    e.preventDefault();\n    const delta = e.deltaY > 0 ? -0.1 : 0.1;\n    setZoom(prevZoom => Math.min(Math.max(prevZoom + delta, 0.25), 5));\n  }, []);\n\n  // Pan handlers\n  const handleMouseDown = useCallback((e) => {\n    if (e.button === 0) { // Left mouse button\n      setIsDragging(true);\n      setDragStart({ x: e.clientX - pan.x, y: e.clientY - pan.y });\n      e.preventDefault();\n    }\n  }, [pan]);\n\n  const handleMouseMove = useCallback((e) => {\n    if (isDragging) {\n      setPan({\n        x: e.clientX - dragStart.x,\n        y: e.clientY - dragStart.y,\n      });\n    }\n  }, [isDragging, dragStart]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  // Add/remove event listeners for dragging\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  const renderDiagramContent = (isInModal = false) => (\n    <div style={{ position: 'relative' }}>\n      {/* Zoom Controls */}\n      <div style={{\n        position: 'absolute',\n        top: '10px',\n        right: '10px',\n        zIndex: 10,\n        display: 'flex',\n        gap: '8px',\n        background: 'rgba(255, 255, 255, 0.95)',\n        padding: '8px',\n        borderRadius: '6px',\n        boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\n      }}>\n        <Tooltip title=\"Zoom In (or scroll up)\">\n          <Button \n            icon={<ZoomInOutlined />} \n            size=\"small\"\n            onClick={handleZoomIn}\n          />\n        </Tooltip>\n        <Tooltip title=\"Reset View (Zoom & Pan)\">\n          <Button \n            icon={<AimOutlined />}\n            size=\"small\"\n            onClick={handleResetZoom}\n          >\n            {Math.round(zoom * 100)}%\n          </Button>\n        </Tooltip>\n        <Tooltip title=\"Zoom Out (or scroll down)\">\n          <Button \n            icon={<ZoomOutOutlined />} \n            size=\"small\"\n            onClick={handleZoomOut}\n          />\n        </Tooltip>\n        <Tooltip title=\"Drag to Pan\">\n          <Tag icon={<DragOutlined />} color=\"blue\" style={{ margin: 0 }}>\n            Pan Mode\n          </Tag>\n        </Tooltip>\n      </div>\n      \n      {/* Diagram Container with Pan & Zoom */}\n      <div \n        ref={dragContainerRef}\n        onWheel={handleWheel}\n        onMouseDown={handleMouseDown}\n        style={{ \n          textAlign: 'center',\n          backgroundColor: '#fafafa',\n          padding: '20px',\n          borderRadius: '6px',\n          overflow: 'hidden', // Changed from 'auto' to 'hidden' for pan to work\n          maxHeight: isInModal ? 'calc(100vh - 200px)' : '600px',\n          minHeight: isInModal ? '500px' : '200px',\n          cursor: isDragging ? 'grabbing' : 'grab',\n          position: 'relative',\n        }}\n      >\n        <div \n          ref={isInModal ? null : svgContainerRef}\n          style={{ \n            display: 'inline-block',\n            minWidth: '100%',\n            transform: `translate(${pan.x}px, ${pan.y}px) scale(${zoom})`,\n            transformOrigin: 'center center',\n            transition: isDragging ? 'none' : 'transform 0.1s ease-out',\n            willChange: 'transform',\n          }}\n          dangerouslySetInnerHTML={isInModal && renderedSvg ? { __html: renderedSvg } : undefined}\n        >\n          {/* Card view: SVG injected via ref, Modal view: SVG injected via dangerouslySetInnerHTML */}\n        </div>\n      </div>\n      \n      {/* Instructions */}\n      <div style={{ \n        marginTop: '8px', \n        textAlign: 'center',\n        color: '#999',\n        fontSize: '12px'\n      }}>\n        💡 Drag to pan • Scroll to zoom • Click controls for precise zoom\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      {/* Hidden container for Mermaid rendering */}\n      <div ref={mermaidRef} style={{ position: 'absolute', left: '-9999px', top: 0 }} />\n      \n      <Card\n        title={\n          <Space>\n            <NodeIndexOutlined />\n            <Text strong>Dependency Visualization</Text>\n            <Tag color=\"blue\">Mermaid Diagram</Tag>\n          </Space>\n        }\n        extra={\n          <Space>\n            {timestamp && (\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                Generated: {new Date(timestamp).toLocaleString()}\n              </Text>\n            )}\n            <Tooltip title=\"View fullscreen\">\n              <Button \n                icon={<FullscreenOutlined />} \n                size=\"small\"\n                onClick={handleFullscreen}\n              />\n            </Tooltip>\n          </Space>\n        }\n      >\n        {renderDiagramContent(false)}\n      </Card>\n\n      {/* Fullscreen Modal */}\n      <Modal\n        title={\n          <Space>\n            <NodeIndexOutlined />\n            <Text strong>Dependency Visualization (Fullscreen)</Text>\n            <Tag color=\"blue\">Mermaid Diagram</Tag>\n          </Space>\n        }\n        open={isFullscreen}\n        onCancel={handleCloseFullscreen}\n        width=\"96vw\"\n        style={{ \n          top: 20,\n          maxWidth: '96vw',\n          paddingBottom: 0,\n        }}\n        styles={{ \n          body: { \n            height: 'calc(100vh - 120px)', // Full height minus header, margins, and footer space\n            overflow: 'auto',\n            padding: '16px',\n          } \n        }}\n        footer={null}\n        closeIcon={<CompressOutlined />}\n        destroyOnClose={false}\n        centered={false}\n      >\n        {renderDiagramContent(true)}\n      </Modal>\n    </>\n  );\n};\n\nMermaidDiagram.propTypes = {\n  mermaidSyntax: PropTypes.string.isRequired,\n  timestamp: PropTypes.string,\n  onFullscreen: PropTypes.func,\n  nodeMetadata: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    type: PropTypes.string,\n  })),\n};\n\nexport default MermaidDiagram;\n","import { Card, Row, Col, Statistic, Space, Tag, Typography } from 'antd';\nimport { NodeIndexOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\nconst { Text } = Typography;\n\n/**\n * GraphStatistics Component\n * Displays statistics about the dependency graph including nodes, edges, types, and bottlenecks\n */\nconst GraphStatistics = ({ metadata }) => {\n  if (!metadata) return null;\n\n  const { nodeCount, edgeCount, resourceTypeCounts, bottlenecks } = metadata;\n\n  return (\n    <Card title=\"Graph Statistics\" style={{ marginTop: 16 }}>\n      <Row gutter={[16, 16]}>\n        <Col xs={12} sm={8} md={6}>\n          <Statistic\n            title=\"Total Resources\"\n            value={nodeCount}\n            valueStyle={{ color: '#1890ff' }}\n            prefix={<NodeIndexOutlined />}\n          />\n        </Col>\n        \n        <Col xs={12} sm={8} md={6}>\n          <Statistic\n            title=\"Dependencies\"\n            value={edgeCount}\n            valueStyle={{ color: '#52c41a' }}\n          />\n        </Col>\n        \n        <Col xs={12} sm={8} md={6}>\n          <Statistic\n            title=\"Resource Types\"\n            value={Object.keys(resourceTypeCounts || {}).length}\n            valueStyle={{ color: '#faad14' }}\n          />\n        </Col>\n        \n        <Col xs={12} sm={8} md={6}>\n          <Statistic\n            title=\"Bottlenecks\"\n            value={bottlenecks?.length || 0}\n            valueStyle={{ \n              color: bottlenecks?.length > 0 ? '#ff4d4f' : '#52c41a' \n            }}\n          />\n        </Col>\n      </Row>\n      \n      {resourceTypeCounts && Object.keys(resourceTypeCounts).length > 0 && (\n        <>\n          <div style={{ marginTop: 24, marginBottom: 12 }}>\n            <Text strong>Resource Type Distribution</Text>\n          </div>\n          <Space wrap>\n            {Object.entries(resourceTypeCounts).map(([type, count]) => (\n              <Tag key={type} color=\"blue\">\n                {type}: {count}\n              </Tag>\n            ))}\n          </Space>\n        </>\n      )}\n    </Card>\n  );\n};\n\nGraphStatistics.propTypes = {\n  metadata: PropTypes.shape({\n    nodeCount: PropTypes.number,\n    edgeCount: PropTypes.number,\n    resourceTypeCounts: PropTypes.object,\n    bottlenecks: PropTypes.array,\n  }),\n};\n\nexport default GraphStatistics;\n","import { Card, Space, Tag, Typography } from 'antd';\nimport { WarningOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\nconst { Text } = Typography;\n\n/**\n * BottlenecksList Component\n * Displays performance bottlenecks with color-coded impact levels\n */\nconst BottlenecksList = ({ bottlenecks }) => {\n  if (!bottlenecks || bottlenecks.length === 0) {\n    return null;\n  }\n\n  const getImpactColor = (impact) => {\n    switch (impact) {\n      case 'critical': return '#ff4d4f';\n      case 'high': return '#faad14';\n      case 'medium': return '#1890ff';\n      case 'low': return '#52c41a';\n      default: return '#d9d9d9';\n    }\n  };\n\n  const getImpactIcon = (impact) => {\n    return <WarningOutlined style={{ color: getImpactColor(impact) }} />;\n  };\n\n  return (\n    <Card \n      title={\n        <Space>\n          <WarningOutlined style={{ color: '#faad14' }} />\n          <Text strong>Performance Bottlenecks Detected</Text>\n        </Space>\n      }\n      style={{ marginTop: 16 }}\n    >\n      <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n        {bottlenecks.map((bottleneck, index) => (\n          <Card \n            key={index}\n            size=\"small\"\n            style={{ \n              borderLeft: `4px solid ${getImpactColor(bottleneck.impact)}`,\n              backgroundColor: '#fafafa'\n            }}\n          >\n            <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n              <Space>\n                {getImpactIcon(bottleneck.impact)}\n                <Text strong style={{ fontSize: '14px' }}>\n                  {bottleneck.resourceId}\n                </Text>\n                <Tag color={getImpactColor(bottleneck.impact)}>\n                  {bottleneck.impact.toUpperCase()}\n                </Tag>\n              </Space>\n              <div style={{ paddingLeft: '24px' }}>\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  Type: {bottleneck.resourceType} • {bottleneck.dependentCount} dependent{bottleneck.dependentCount !== 1 ? 's' : ''}\n                </Text>\n              </div>\n            </Space>\n          </Card>\n        ))}\n      </Space>\n    </Card>\n  );\n};\n\nBottlenecksList.propTypes = {\n  bottlenecks: PropTypes.arrayOf(\n    PropTypes.shape({\n      resourceId: PropTypes.string.isRequired,\n      resourceType: PropTypes.string.isRequired,\n      dependentCount: PropTypes.number.isRequired,\n      impact: PropTypes.oneOf(['low', 'medium', 'high', 'critical']).isRequired,\n      dependents: PropTypes.arrayOf(PropTypes.string),\n    })\n  ),\n};\n\nexport default BottlenecksList;\n"],"names":["constructor","this","mockEnabled","process","console","log","delay","ms","arguments","length","undefined","Promise","resolve","setTimeout","loadMockData","filename","response","fetch","concat","ok","Error","json","error","getDependencyGraph","source","mockFile","data","transformGraphData","message","mockData","mermaid","graph","timestamp","Date","toISOString","metadata","generateDefaultMetadata","format","edges","convertGraphToMermaid","generateMetadataFromGraph","lines","nodes","Set","nodeTypes","forEach","edge","add","target","sanitizedSource","replace","sanitizedTarget","startsWith","includes","push","node","type","sanitizedId","sourceId","targetId","join","sourceType","detectNodeType","targetType","nodeCount","size","edgeCount","resourceTypeCounts","bottlenecks","generateMockBottlenecks","nodeId","count","resource","dependents","Math","floor","random","impact","reason","baseURL","call","endpoint","options","url","config","_objectSpread","headers","errorMessage","status","statusText","errorDetails","errorText","text","errorData","JSON","parse","detail","jsonError","readError","warn","details","responseText","name","enhancedError","originalError","isNetworkError","isTimeoutError","processAgentRequest","request","dryRun","method","body","stringify","dry_run","executeConfirmedPlan","decisionId","getInfrastructureState","params","discoverInfrastructure","exportState","blob","mockDataService","detectConflicts","URLSearchParams","auto_resolve","toString","generateDeploymentPlan","targetResources","includeLevels","append","set","downloadFile","window","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","getCurrentTimestamp","split","getBaseURL","getConfig","wsURL","environment","_ref","showIcon","closable","style","props","_objectWithoutProperties","_excluded","alertType","getAlertType","msg","toLowerCase","displayMessage","substring","_jsx","Alert","borderRadius","fontSize","marginBottom","Title","Paragraph","Typography","title","description","level","extra","_jsxs","children","display","justifyContent","alignItems","margin","step","index","logs","className","logsExpanded","setLogsExpanded","useState","parametersExpanded","setParametersExpanded","stepStatus","useEffect","stepTitle","action","stepDescription","duration","dependencies","id","mcpTool","toolParameters","parameters","marginTop","Button","icon","CodeOutlined","onClick","padding","height","color","background","border","overflow","maxHeight","paddingBottom","borderBottom","fontWeight","fontFamily","whiteSpace","wordBreak","CheckOutlined","CloseOutlined","LoadingOutlined","spin","ClockCircleOutlined","getStatusIcon","UpOutlined","DownOutlined","map","logIndex","_log$timestamp","_log$type","toLocaleTimeString","toUpperCase","Text","RecoveryOption","_ref2","option","isSelected","onSelect","showDetails","setShowDetails","successProb","round","successProbability","riskLevel","isMultiStep","multiStepPlan","Card","cursor","backgroundColor","strong","Tag","marginLeft","totalSteps","Space","risk","getRiskColor","reasoning","newTool","modifiedParameters","e","stopPropagation","paddingLeft","borderLeft","stepIndex","gap","minWidth","stepOrder","flex","toolName","purpose","Object","keys","stepId","recoveryData","onProceedWithRecovery","onAbortRecovery","selectedOptionIndex","setSelectedOptionIndex","inProgress","selectedOption","parseInt","progressMessage","visible","failureContext","recoveryOptions","handleOptionSelect","optionIndex","ExclamationCircleOutlined","stepName","_Fragment","aiAnalysis","rootCause","recommendation","direction","width","danger","StopOutlined","handleAbort","PlayCircleOutlined","disabled","handleProceed","steps","isExecuting","executionProgress","executionElapsed","executionCompleted","onConfirm","onCancel","showConfirmButton","showCancelButton","confirmButtonText","RobotOutlined","cardStyle","borderColor","boxShadow","renderStatusHeader","statusStyle","Progress","percent","strokeColor","trailColor","flexDirection","React","ExecutionStep","filter","InlineRecovery","getStepLogs","child","_child$type","Panel","Collapse","ResourceCard","_resource$properties","searchTerm","iconUrl","isExpanded","setIsExpanded","displayProperties","properties","hoverable","bodyStyle","src","alt","onError","highlightSearchTerm","regex","RegExp","part","test","textTransform","letterSpacing","CompressOutlined","ExpandOutlined","opacity","ghost","activeKey","onChange","header","showArrow","lineHeight","defaultProps","getAWSServiceIcon","resourceType","typeMapping","normalizedType","default","ResourcesByCategory","infrastructureData","Empty","resources","hasDiscoveredResources","managedResourceCount","managed_state","aws_details","createdAt","resourcesByCategory","values","r","reduce","acc","entries","category","Row","gutter","Col","xs","sm","lg","xl","StateHeader","onRefresh","refreshing","onSearchChange","totalResources","totalCategories","ReloadOutlined","loading","Input","placeholder","prefix","SearchOutlined","value","maxWidth","allowClear","mermaidSyntax","onFullscreen","nodeMetadata","mermaidRef","useRef","renderingRef","isFullscreen","setIsFullscreen","zoom","setZoom","pan","setPan","x","y","svgContainerRef","renderedSvg","setRenderedSvg","isDragging","setIsDragging","dragStart","setDragStart","dragContainerRef","current","isMounted","addIconsToNodes","async","metadataTypeMap","typeMap","Array","isArray","buildTypeMapFromMetadata","mermaidTypeMap","line","match","trim","parseNodeTypes","container","querySelectorAll","classAttr","getAttribute","originalId","mermaidId","extractOriginalId","detectResourceType","classNames","idLower","classLower","iconPath","rect","querySelector","bbox","getBBox","img","createElementNS","setAttributeNS","setAttribute","pointerEvents","labelContainer","textElements","parentNode","insertBefore","textEl","currentTransform","currentY","parseFloat","newTransform","now","element","removeAttribute","innerHTML","diagramDiv","textContent","run","suppressErrors","svgElement","outerHTML","errorHtml","renderMermaid","handleZoomIn","prevZoom","min","handleZoomOut","max","handleResetZoom","handleWheel","useCallback","preventDefault","delta","deltaY","handleMouseDown","button","clientX","clientY","handleMouseMove","handleMouseUp","addEventListener","removeEventListener","renderDiagramContent","isInModal","position","top","right","zIndex","Tooltip","ZoomInOutlined","AimOutlined","ZoomOutOutlined","DragOutlined","ref","onWheel","onMouseDown","textAlign","minHeight","transform","transformOrigin","transition","willChange","dangerouslySetInnerHTML","__html","left","NodeIndexOutlined","toLocaleString","FullscreenOutlined","handleFullscreen","Modal","open","handleCloseFullscreen","styles","footer","closeIcon","destroyOnClose","centered","md","Statistic","valueStyle","wrap","getImpactColor","WarningOutlined","bottleneck","resourceId","dependentCount"],"sourceRoot":""}