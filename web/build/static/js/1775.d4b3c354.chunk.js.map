{"version":3,"file":"static/js/1775.d4b3c354.chunk.js","mappings":"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","sources":["services/apiService.js","components/common/StatusAlert.js","components/layout/PageHeader.js","components/execution/ExecutionStep.js","components/execution/InlineRecovery.js","components/execution/ExecutionPlan.js","components/execution/ExecutionLogs.js","components/infrastructure/ResourceCard.js","components/infrastructure/StateOverview.js","components/infrastructure/ResourcesByCategory.js","components/infrastructure/StateHeader.js","components/graph/MermaidDiagram.js","components/graph/GraphStatistics.js","components/graph/BottlenecksList.js"],"sourcesContent":["// API service for centralized HTTP requests\nclass ApiService {\n  constructor() {\n    // Load API base URL from environment variable, fallback to relative path\n    this.baseURL = process.env.REACT_APP_API_BASE_URL || '/api';\n    \n    // Remove trailing slash if present\n    this.baseURL = this.baseURL.replace(/\\/$/, '');\n    \n    console.log('ApiService initialized with baseURL:', this.baseURL);\n  }\n\n  // Generic API call method with error handling\n  async call(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        // Try to get error details from response body\n        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        let errorDetails = null;\n        \n        try {\n          const errorText = await response.text();\n          if (errorText) {\n            try {\n              const errorData = JSON.parse(errorText);\n              if (errorData.error) {\n                errorMessage = errorData.error;\n              } else if (errorData.message) {\n                errorMessage = errorData.message;\n              } else if (errorData.detail) {\n                errorMessage = errorData.detail;\n              }\n              errorDetails = errorData;\n            } catch (jsonError) {\n              // If response isn't JSON, use the text as error message\n              if (errorText.length < 200) { // Only use short error messages\n                errorMessage = errorText;\n              }\n            }\n          }\n        } catch (readError) {\n          // If we can't read the response body, stick with the status message\n          console.warn('Could not read error response body:', readError);\n        }\n        \n        const error = new Error(errorMessage);\n        error.status = response.status;\n        error.statusText = response.statusText;\n        error.details = errorDetails;\n        throw error;\n      }\n\n      const responseText = await response.text();\n      \n      if (!responseText) {\n        throw new Error('Empty response from server');\n      }\n\n      try {\n        return JSON.parse(responseText);\n      } catch (jsonError) {\n        console.error('JSON parse error:', jsonError);\n        console.error('Response text:', responseText);\n        throw new Error(`Invalid JSON response: ${jsonError.message}`);\n      }\n    } catch (error) {\n      console.error(`API call failed for ${endpoint}:`, error);\n      \n      // Enhance error messages for common network issues\n      if (error.name === 'TypeError' && error.message === 'Failed to fetch') {\n        const enhancedError = new Error('Unable to connect to server. Please check your internet connection and try again.');\n        enhancedError.originalError = error;\n        enhancedError.isNetworkError = true;\n        throw enhancedError;\n      }\n      \n      if (error.name === 'AbortError') {\n        const enhancedError = new Error('Request timed out. Please try again.');\n        enhancedError.originalError = error;\n        enhancedError.isTimeoutError = true;\n        throw enhancedError;\n      }\n      \n      throw error;\n    }\n  }\n\n  // Agent operations\n  async processAgentRequest(request, dryRun = true) {\n    return this.call('/agent/process', {\n      method: 'POST',\n      body: JSON.stringify({ \n        request, \n        dry_run: dryRun \n      }),\n    });\n  }\n\n  async executeConfirmedPlan(decisionId) {\n    return this.call('/agent/execute', {\n      method: 'POST',\n      body: JSON.stringify({ decisionId: decisionId }),\n    });\n  }\n\n  // State management operations\n  async getInfrastructureState(discoveredOnly = false) {\n    const params = discoveredOnly ? '?discovered_only=true' : '';\n    return this.call(`/state${params}`);\n  }\n\n  async discoverInfrastructure() {\n    return this.call('/discover', {\n      method: 'POST',\n    });\n  }\n\n  async exportState(includeDiscovered = false) {\n    const params = includeDiscovered ? '?include_discovered=true' : '';\n    const response = await fetch(`${this.baseURL}/export${params}`);\n    \n    if (!response.ok) {\n      throw new Error(`Export failed: ${response.statusText}`);\n    }\n    \n    return response.blob();\n  }\n\n  // Graph operations\n  async getDependencyGraph() {\n    // API now only returns mermaid format\n    return this.call('/graph');\n  }\n\n  // Conflict detection\n  async detectConflicts(autoResolve = false) {\n    const params = new URLSearchParams({\n      auto_resolve: autoResolve.toString(),\n    });\n    \n    return this.call(`/conflicts?${params}`);\n  }\n\n  // Deployment planning\n  async generateDeploymentPlan(targetResources = [], includeLevels = true) {\n    const params = new URLSearchParams();\n    \n    if (targetResources.length > 0) {\n      targetResources.forEach(resource => {\n        params.append('target_resources', resource);\n      });\n    }\n    \n    params.set('include_levels', includeLevels.toString());\n    \n    return this.call(`/plan?${params}`);\n  }\n\n  // Utility methods for file operations\n  downloadFile(blob, filename) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }\n\n  getCurrentTimestamp() {\n    return new Date().toISOString().split('T')[0];\n  }\n\n  // Configuration methods\n  getBaseURL() {\n    return this.baseURL;\n  }\n\n  getConfig() {\n    return {\n      baseURL: this.baseURL,\n      wsURL: process.env.REACT_APP_WS_URL,\n      environment: process.env.NODE_ENV || 'development',\n    };\n  }\n}\n\n// Create a singleton instance\nconst apiService = new ApiService();\n\nexport default apiService;","import { Alert } from 'antd';\nimport PropTypes from 'prop-types';\n\n/**\n * Reusable status alert component with consistent styling\n * Automatically determines alert type based on message content\n */\nconst StatusAlert = ({ \n  message, \n  type = 'auto', \n  showIcon = true, \n  closable = false,\n  style = {},\n  ...props \n}) => {\n  // Auto-determine alert type based on message content\n  const getAlertType = () => {\n    if (type !== 'auto') return type;\n    \n    const msg = message.toLowerCase();\n    if (msg.includes('error') || msg.includes('failed') || msg.includes('fail')) {\n      return 'error';\n    } else if (msg.includes('warning') || msg.includes('warn')) {\n      return 'warning';\n    } else if (msg.includes('success') || msg.includes('completed') || msg.includes('processed')) {\n      return 'success';\n    } else if (msg === 'ready') {\n      return 'info';\n    } else {\n      return 'success';\n    }\n  };\n\n  const alertType = getAlertType();\n\n  // Clean up message display - remove \"Error:\" prefix for better UX\n  const displayMessage = typeof message === 'string' && message.startsWith('Error: ') \n    ? message.substring(7) // Remove \"Error: \" prefix\n    : message;\n\n  return (\n    <Alert \n      message={displayMessage} \n      type={alertType}\n      showIcon={showIcon}\n      closable={closable}\n      style={{ \n        borderRadius: 6,\n        fontSize: 14,\n        marginBottom: 16,\n        ...style \n      }}\n      {...props}\n    />\n  );\n};\n\nStatusAlert.propTypes = {\n  message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  type: PropTypes.oneOf(['auto', 'success', 'info', 'warning', 'error']),\n  showIcon: PropTypes.bool,\n  closable: PropTypes.bool,\n  style: PropTypes.object,\n};\n\nexport default StatusAlert;","import React from 'react';\nimport { Typography } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst { Title, Paragraph } = Typography;\n\n/**\n * Reusable page header component with consistent styling\n * Used across all pages for title and description\n */\nconst PageHeader = ({ \n  title, \n  description, \n  level = 2, \n  extra = null, \n  style = {} \n}) => {\n  return (\n    <div style={{ marginBottom: 24, ...style }}>\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'flex-start',\n        marginBottom: 8 \n      }}>\n        <Title level={level} style={{ margin: 0 }}>\n          {title}\n        </Title>\n        {extra && <div>{extra}</div>}\n      </div>\n      {description && (\n        <Paragraph type=\"secondary\" style={{ margin: 0, fontSize: '1rem' }}>\n          {description}\n        </Paragraph>\n      )}\n    </div>\n  );\n};\n\nPageHeader.propTypes = {\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  description: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  level: PropTypes.oneOf([1, 2, 3, 4, 5]),\n  extra: PropTypes.node,\n  style: PropTypes.object,\n};\n\nexport default PageHeader;","import { useState, useEffect } from 'react';\nimport { Button } from 'antd';\nimport { \n  CheckOutlined, \n  CloseOutlined, \n  ClockCircleOutlined,\n  LoadingOutlined,\n  DownOutlined,\n  UpOutlined,\n  CodeOutlined\n} from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\n/**\n * Individual execution step component with consistent styling\n * Shows step number, content, and status with proper visual hierarchy\n */\nconst ExecutionStep = ({ \n  step, \n  index, \n  logs = [],\n  className = '',\n  ...props \n}) => {\n  const [logsExpanded, setLogsExpanded] = useState(false);\n  const [parametersExpanded, setParametersExpanded] = useState(false);\n  \n  const stepStatus = step.status || 'pending';\n\n  // Auto-expand logs on failure or when there are new logs for running steps\n  useEffect(() => {\n    if (stepStatus === 'failed' || \n        stepStatus.includes('recovery') ||\n        (stepStatus === 'running' && logs.length > 0)) {\n      setLogsExpanded(true);\n    }\n  }, [stepStatus, logs.length]);\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed': \n        return <CheckOutlined style={{ color: 'white', fontSize: '12px' }} />;\n      case 'failed': \n        return <CloseOutlined style={{ color: 'white', fontSize: '12px' }} />;\n      case 'running': \n        return <LoadingOutlined spin style={{ color: 'white', fontSize: '12px' }} />;\n      case 'recovery-generating':\n        return <LoadingOutlined spin style={{ color: 'white', fontSize: '12px' }} />;\n      case 'recovery-pending':\n        return <ClockCircleOutlined style={{ color: '#212529', fontSize: '12px' }} />;\n      case 'recovery-in-progress':\n        return <LoadingOutlined spin style={{ color: 'white', fontSize: '12px' }} />;\n      case 'pending':\n      default: \n        return <ClockCircleOutlined style={{ color: '#6c757d', fontSize: '12px' }} />;\n    }\n  };\n\n  const getStepNumberClass = (status) => {\n    return `execution-step-number ${status}`;\n  };\n\n  const stepTitle =  step.name || step.description || step.action || `Step ${index + 1}`;\n  const stepDescription = step.details || step.description || 'Executing infrastructure operation...';\n\n  return (\n    <div \n      className={`execution-step ${className}`} \n      data-step-status={stepStatus}\n      {...props}\n    >\n      <div className=\"execution-step-header\">\n        <div className={getStepNumberClass(stepStatus)}>\n          <div className=\"step-number-content\">\n            <span className=\"step-number-text\">{index + 1}</span>\n          </div>\n        </div>\n        \n        <div className=\"execution-step-content\">\n          <div className=\"execution-step-title\">\n            {stepTitle}\n          </div>\n          \n          <div className=\"execution-step-description\">\n            {stepDescription}\n          </div>\n          \n          <div className=\"execution-step-meta\">\n            <span className=\"step-duration\">\n              Duration: {step.duration || 'Estimating...'}\n            </span>\n            <span className=\"step-dependencies\">\n              Status: {stepStatus}\n            </span>\n            {step.dependencies && (\n              <span className=\"step-dependencies\">\n                Dependencies: {step.dependencies}\n              </span>\n            )}\n          </div>\n          \n          {/* Tool Parameters Section */}\n          {(step.id || step.mcpTool || step.toolParameters || step.parameters) && (\n            <div style={{ marginTop: '12px' }}>\n              <Button\n                type=\"text\"\n                size=\"small\"\n                icon={<CodeOutlined />}\n                onClick={() => setParametersExpanded(!parametersExpanded)}\n                style={{ \n                  padding: '4px 8px',\n                  height: 'auto',\n                  fontSize: '12px',\n                  color: '#1890ff'\n                }}\n              >\n                {parametersExpanded ? 'Hide' : 'Show'} Step Details\n              </Button>\n              \n              {parametersExpanded && (\n                <div style={{\n                  marginTop: '8px',\n                  padding: '12px',\n                  background: '#f6f8fa',\n                  borderRadius: '6px',\n                  border: '1px solid #e1e4e8',\n                  fontSize: '13px',\n                  overflow: 'auto',\n                  maxHeight: '300px'\n                }}>\n                  {/* Step ID Section */}\n                  {step.id && (\n                    <div style={{ \n                      marginBottom: (step.mcpTool || step.toolParameters || step.parameters) ? '12px' : '0',\n                      paddingBottom: (step.mcpTool || step.toolParameters || step.parameters) ? '12px' : '0',\n                      borderBottom: (step.mcpTool || step.toolParameters || step.parameters) ? '1px solid #e1e4e8' : 'none'\n                    }}>\n                      <div style={{ fontWeight: '600', color: '#24292e', marginBottom: '4px' }}>\n                        Step ID\n                      </div>\n                      <div style={{ \n                        fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n                        color: '#0366d6',\n                        fontSize: '12px'\n                      }}>\n                        {step.id}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* MCP Tool Section */}\n                  {step.mcpTool && (\n                    <div style={{ \n                      marginBottom: (step.toolParameters || step.parameters) ? '12px' : '0',\n                      paddingBottom: (step.toolParameters || step.parameters) ? '12px' : '0',\n                      borderBottom: (step.toolParameters || step.parameters) ? '1px solid #e1e4e8' : 'none'\n                    }}>\n                      <div style={{ fontWeight: '600', color: '#24292e', marginBottom: '4px' }}>\n                        MCP Tool\n                      </div>\n                      <div style={{ \n                        fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n                        color: '#0366d6',\n                        fontSize: '12px'\n                      }}>\n                        {step.mcpTool}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Parameters Section */}\n                  {(step.toolParameters || step.parameters) && (\n                    <div>\n                      <div style={{ fontWeight: '600', color: '#24292e', marginBottom: '8px' }}>\n                        Parameters\n                      </div>\n                      <pre style={{ \n                        margin: 0,\n                        whiteSpace: 'pre-wrap',\n                        wordBreak: 'break-word',\n                        fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n                        fontSize: '12px',\n                        color: '#24292e'\n                      }}>\n                        {JSON.stringify(step.toolParameters || step.parameters, null, 2)}\n                      </pre>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        \n        <div className=\"step-status-icon-container\">\n          {getStatusIcon(stepStatus)}\n        </div>\n        \n        {/* Expand logs button - only show if there are logs or step is running/completed/failed */}\n        {(logs.length > 0 || ['running', 'completed', 'failed'].includes(stepStatus)) && (\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={logsExpanded ? <UpOutlined /> : <DownOutlined />}\n            onClick={() => setLogsExpanded(!logsExpanded)}\n            className=\"expand-logs-button\"\n          />\n        )}\n      </div>\n      \n      {/* Step logs section */}\n      {logsExpanded && (\n        <div className=\"execution-step-logs\">\n          <div className=\"logs-content\">\n            {logs.length > 0 ? (\n              logs.map((log, logIndex) => (\n                <div key={logIndex} className={`step-log-entry level-${log.type}`}>\n                  <span className=\"timestamp\">\n                    {log.timestamp?.toLocaleTimeString() || new Date().toLocaleTimeString()}\n                  </span>\n                  <span className=\"level\">[{log.type?.toUpperCase() || 'INFO'}]</span>\n                  <span className=\"message\">{log.message}</span>\n                </div>\n              ))\n            ) : (\n              <div className=\"no-logs\">No logs available for this step</div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nExecutionStep.propTypes = {\n  step: PropTypes.shape({\n    id: PropTypes.string,\n    action: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    details: PropTypes.string,\n    mcpTool: PropTypes.string,\n    toolParameters: PropTypes.object,\n    parameters: PropTypes.object,\n    status: PropTypes.oneOf([\n      'pending', \n      'running', \n      'completed', \n      'failed',\n      'recovery-generating',\n      'recovery-pending',\n      'recovery-in-progress'\n    ]),\n    duration: PropTypes.string,\n    dependencies: PropTypes.string,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  logs: PropTypes.arrayOf(PropTypes.shape({\n    type: PropTypes.string,\n    message: PropTypes.string,\n    timestamp: PropTypes.instanceOf(Date),\n    stepId: PropTypes.string,\n  })),\n  className: PropTypes.string,\n};\n\nexport default ExecutionStep;","import { useState } from 'react';\nimport { Button, Card, Tag, Space, Typography } from 'antd';\nimport { \n  ExclamationCircleOutlined,\n  PlayCircleOutlined,\n  StopOutlined,\n  LoadingOutlined,\n  DownOutlined,\n  UpOutlined\n} from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\nconst { Text, Paragraph } = Typography;\n\n/**\n * Inline Recovery component - displays recovery options directly within the execution plan\n * Based on the old UI's inline recovery implementation\n */\nconst InlineRecovery = ({ \n  stepId, \n  recoveryData, \n  onProceedWithRecovery, \n  onAbortRecovery \n}) => {\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(null);\n\n  if (!recoveryData) return null;\n\n  // Recovery in progress state\n  if (recoveryData.inProgress) {\n    return (\n      <Card \n        size=\"small\" \n        className=\"inline-recovery-card recovery-in-progress\"\n        style={{ \n          borderLeft: '4px solid #17a2b8',\n          backgroundColor: '#f8f9fa'\n        }}\n      >\n        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          <LoadingOutlined spin style={{ color: '#17a2b8' }} />\n          <Text strong>Executing Recovery...</Text>\n          {recoveryData.selectedOption === 'skip' ? (\n            <Text type=\"secondary\">Skipping step</Text>\n          ) : (\n            <Text type=\"secondary\">Option {parseInt(recoveryData.selectedOption) + 1}</Text>\n          )}\n        </div>\n        {recoveryData.progressMessage && (\n          <div style={{ marginTop: '8px' }}>\n            <Text type=\"secondary\">{recoveryData.progressMessage}</Text>\n          </div>\n        )}\n      </Card>\n    );\n  }\n\n  if (!recoveryData.visible) return null;\n\n  const { failureContext, recoveryOptions } = recoveryData;\n\n  const handleOptionSelect = (optionIndex) => {\n    setSelectedOptionIndex(optionIndex);\n  };\n\n  const handleProceed = () => {\n    if (selectedOptionIndex !== null && onProceedWithRecovery) {\n      onProceedWithRecovery(stepId, selectedOptionIndex);\n    }\n  };\n\n  const handleAbort = () => {\n    if (onAbortRecovery) {\n      onAbortRecovery(stepId);\n    }\n  };\n\n  return (\n    <Card \n      size=\"small\" \n      className=\"inline-recovery-card\"\n      style={{ \n        borderLeft: '4px solid #ffc107',\n        backgroundColor: '#fffef0',\n        marginTop: '8px'\n      }}\n    >\n      {/* Recovery Header */}\n      <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '12px' }}>\n        <ExclamationCircleOutlined style={{ color: '#ffc107', fontSize: '16px' }} />\n        <Text strong style={{ color: '#856404' }}>Step Failed - Recovery Options Available</Text>\n      </div>\n\n      {/* Failure Details */}\n      <div style={{ marginBottom: '12px', padding: '8px', backgroundColor: '#f8d7da', borderRadius: '4px' }}>\n        <Text strong>Error: </Text>\n        <Text>{failureContext?.errorMessage || 'Unknown error'}</Text>\n        <br />\n        <Text strong>Step: </Text>\n        <Text>{failureContext?.stepName || 'Unknown'}</Text>\n        {failureContext?.toolName && (\n          <>\n            <span> | </span>\n            <Text strong>Tool: </Text>\n            <Text>{failureContext.toolName}</Text>\n          </>\n        )}\n      </div>\n\n      {/* AI Analysis (if available) */}\n      {failureContext?.aiAnalysis && (\n        <div style={{ marginBottom: '12px', padding: '8px', backgroundColor: '#d1ecf1', borderRadius: '4px' }}>\n          <div style={{ marginBottom: '4px' }}>\n            <Text strong>Root Cause: </Text>\n            <Text>{failureContext.aiAnalysis.rootCause || 'Not available'}</Text>\n          </div>\n          <div>\n            <Text strong>Recommendation: </Text>\n            <Text>{failureContext.aiAnalysis.recommendation || 'Not available'}</Text>\n          </div>\n        </div>\n      )}\n\n      {/* Recovery Options */}\n      <div style={{ marginBottom: '12px' }}>\n        <Text strong style={{ marginBottom: '8px', display: 'block' }}>Choose Recovery Action:</Text>\n        \n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          {recoveryOptions && recoveryOptions.map((option, index) => (\n            <RecoveryOption\n              key={index}\n              option={option}\n              index={index}\n              isSelected={selectedOptionIndex === index}\n              onSelect={() => handleOptionSelect(index)}\n            />\n          ))}\n          \n          {/* Skip option */}\n          <RecoveryOption\n            option={{\n              action: 'Skip This Step',\n              reasoning: 'Skip this step and continue with the next step in the plan.',\n              riskLevel: 'medium',\n              successProbability: 0.7,\n              details: 'Note: May affect steps that depend on this step\\'s output.'\n            }}\n            index=\"skip\"\n            isSelected={selectedOptionIndex === 'skip'}\n            onSelect={() => handleOptionSelect('skip')}\n          />\n        </Space>\n      </div>\n\n      {/* Action Buttons */}\n      <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '8px' }}>\n        <Button \n          type=\"default\"\n          danger\n          icon={<StopOutlined />}\n          onClick={handleAbort}\n        >\n          Abort Execution\n        </Button>\n        <Button \n          type=\"primary\"\n          icon={<PlayCircleOutlined />}\n          disabled={selectedOptionIndex === null}\n          onClick={handleProceed}\n        >\n          Proceed with Selected Option\n        </Button>\n      </div>\n    </Card>\n  );\n};\n\n/**\n * Individual recovery option component\n */\nconst RecoveryOption = ({ option, index, isSelected, onSelect }) => {\n  const [showDetails, setShowDetails] = useState(false);\n  \n  const successProb = Math.round((option.successProbability || 0) * 100);\n  const riskLevel = (option.riskLevel || 'medium').toLowerCase();\n  \n  const isMultiStep = option.action === 'multi_step_recovery' && option.multiStepPlan && option.multiStepPlan.length > 0;\n  \n  const getRiskColor = (risk) => {\n    switch (risk) {\n      case 'low': return 'green';\n      case 'high': return 'red';\n      case 'medium':\n      default: return 'orange';\n    }\n  };\n\n  return (\n    <Card \n      size=\"small\"\n      className={`recovery-option ${isSelected ? 'selected' : ''}`}\n      onClick={onSelect}\n      style={{ \n        cursor: 'pointer',\n        border: isSelected ? '2px solid #1890ff' : '1px solid #d9d9d9',\n        backgroundColor: isSelected ? '#f0f7ff' : '#fff'\n      }}\n    >\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '8px' }}>\n        <Text strong>\n          {option.action}\n          {isMultiStep && (\n            <Tag size=\"small\" color=\"blue\" style={{ marginLeft: '8px' }}>\n              {option.totalSteps || option.multiStepPlan.length} steps\n            </Tag>\n          )}\n        </Text>\n        <Space size=\"small\">\n          <Tag color=\"blue\">{successProb}% Success</Tag>\n          <Tag color={getRiskColor(riskLevel)}>{option.riskLevel || 'Medium'} Risk</Tag>\n        </Space>\n      </div>\n      \n      <Paragraph style={{ marginBottom: isMultiStep || option.details ? '8px' : '0', color: '#666' }}>\n        {option.reasoning || 'No reasoning provided'}\n      </Paragraph>\n\n      {/* Single-step details */}\n      {!isMultiStep && (option.newTool || option.modifiedParameters) && (\n        <div style={{ fontSize: '12px', color: '#888', marginBottom: '8px' }}>\n          {option.newTool && `New Tool: ${option.newTool}`}\n          {option.newTool && option.modifiedParameters && ' | '}\n          {option.modifiedParameters && `Parameters: ${JSON.stringify(option.modifiedParameters)}`}\n        </div>\n      )}\n\n      {/* Option details */}\n      {option.details && !isMultiStep && (\n        <div style={{ fontSize: '12px', color: '#888' }}>\n          {option.details}\n        </div>\n      )}\n\n      {/* Multi-step details */}\n      {isMultiStep && (\n        <div style={{ marginTop: '8px' }}>\n          <Button \n            type=\"text\" \n            size=\"small\"\n            icon={showDetails ? <UpOutlined /> : <DownOutlined />}\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowDetails(!showDetails);\n            }}\n            style={{ padding: '0', height: 'auto', fontSize: '12px' }}\n          >\n            {showDetails ? 'Hide' : 'Show'} Multi-Step Plan ({option.totalSteps || option.multiStepPlan.length} steps)\n          </Button>\n          \n          {showDetails && (\n            <div style={{ marginTop: '8px', paddingLeft: '16px', borderLeft: '2px solid #f0f0f0' }}>\n              {option.multiStepPlan.map((step, stepIndex) => (\n                <div key={stepIndex} style={{ marginBottom: '8px', fontSize: '12px' }}>\n                  <div style={{ display: 'flex', alignItems: 'flex-start', gap: '8px' }}>\n                    <div style={{ \n                      minWidth: '16px', \n                      height: '16px', \n                      borderRadius: '50%', \n                      backgroundColor: '#1890ff', \n                      color: 'white', \n                      display: 'flex', \n                      alignItems: 'center', \n                      justifyContent: 'center',\n                      fontSize: '10px',\n                      marginTop: '2px'\n                    }}>\n                      {step.stepOrder || stepIndex + 1}\n                    </div>\n                    <div style={{ flex: 1 }}>\n                      <div style={{ fontWeight: 'bold' }}>{step.toolName}</div>\n                      <div style={{ color: '#666' }}>{step.purpose}</div>\n                      {step.parameters && Object.keys(step.parameters).length > 0 && (\n                        <div style={{ color: '#888', marginTop: '2px' }}>\n                          Parameters: {JSON.stringify(step.parameters, null, 2)}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n};\n\nInlineRecovery.propTypes = {\n  stepId: PropTypes.string.isRequired,\n  recoveryData: PropTypes.shape({\n    visible: PropTypes.bool,\n    inProgress: PropTypes.bool,\n    selectedOption: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    progressMessage: PropTypes.string,\n    failureContext: PropTypes.shape({\n      errorMessage: PropTypes.string,\n      stepName: PropTypes.string,\n      toolName: PropTypes.string,\n      aiAnalysis: PropTypes.shape({\n        rootCause: PropTypes.string,\n        recommendation: PropTypes.string,\n      }),\n    }),\n    recoveryOptions: PropTypes.arrayOf(PropTypes.shape({\n      action: PropTypes.string,\n      reasoning: PropTypes.string,\n      riskLevel: PropTypes.string,\n      successProbability: PropTypes.number,\n      newTool: PropTypes.string,\n      modifiedParameters: PropTypes.object,\n      details: PropTypes.string,\n      multiStepPlan: PropTypes.array,\n      totalSteps: PropTypes.number,\n    })),\n  }),\n  onProceedWithRecovery: PropTypes.func,\n  onAbortRecovery: PropTypes.func,\n};\n\nRecoveryOption.propTypes = {\n  option: PropTypes.object.isRequired,\n  index: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  isSelected: PropTypes.bool,\n  onSelect: PropTypes.func,\n};\n\nexport default InlineRecovery;","import React from 'react';\nimport { Card, Space, Button, Tag, Progress, Typography } from 'antd';\nimport { \n  RobotOutlined, \n  CheckOutlined, \n  CloseOutlined \n} from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport ExecutionStep from './ExecutionStep';\nimport InlineRecovery from './InlineRecovery';\n\nconst { Text } = Typography;\n\n/**\n * Complete execution plan component with status header, steps, and actions\n * Handles the entire execution plan display with consistent styling\n */\nconst ExecutionPlan = ({\n  steps = [],\n  logs = [],\n  recoveryOptions = {},\n  isExecuting = false,\n  executionProgress = 0,\n  executionElapsed = '00:00',\n  executionCompleted = false,\n  onConfirm = null,\n  onCancel = null,\n  onProceedWithRecovery = null,\n  onAbortRecovery = null,\n  showConfirmButton = true,\n  showCancelButton = true,\n  confirmButtonText = 'Confirm & Execute',\n  children = null,\n  title = 'Execution Plan',\n  icon = <RobotOutlined />,\n  className = '',\n  ...props\n}) => {\n  // Function to get logs for a specific step\n  const getStepLogs = (stepId, stepIndex) => {\n    if (!logs || logs.length === 0) return [];\n    \n    // Filter logs by stepId, or if stepId is not available, try to match by step index\n    return logs.filter(log => {\n      if (log.stepId) {\n        // Try exact match first\n        if (log.stepId === stepId) return true;\n        // Try step-{index} format\n        if (log.stepId === `step-${stepIndex}`) return true;\n        // Try just the index number\n        if (log.stepId === stepIndex.toString()) return true;\n        // Try step_{index} format\n        if (log.stepId === `step_${stepIndex}`) return true;\n      }\n      // If no stepId in the log, for now return all logs for the first step (index 0)\n      // This is a fallback for logs that don't have step association\n      return stepIndex === 0 && !log.stepId;\n    });\n  };\n\n  const renderStatusHeader = () => {\n    if (!isExecuting && !executionCompleted) return null;\n\n    const statusStyle = executionCompleted ? {\n      background: '#d4edda', \n      border: '1px solid #28a745',\n      boxShadow: '0 0 8px rgba(40, 167, 69, 0.3)',\n    } : {\n      background: '#f8f9fa', \n      border: '1px solid #dee2e6'\n    };\n\n    return (\n      <div style={{ \n        padding: '16px', \n        borderRadius: '8px',\n        ...statusStyle\n      }}>\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          marginBottom: '12px' \n        }}>\n          <Text strong className={executionCompleted ? 'status-success' : 'status-running'}>\n            {executionCompleted ? 'Execution Completed Successfully' : 'Execution in Progress'}\n          </Text>\n          <Text type=\"secondary\" style={{ fontFamily: 'monospace' }}>\n            {executionElapsed}\n          </Text>\n        </div>\n        <Progress \n          percent={executionProgress} \n          status={executionCompleted ? 'success' : 'active'} \n          strokeColor={executionCompleted ? '#28a745' : '#007bff'}\n          trailColor=\"#e9ecef\"\n        />\n      </div>\n    );\n  };\n\n  const renderActionButtons = () => {\n    if (isExecuting || executionCompleted) {\n      return isExecuting ? <Tag color=\"processing\">Executing...</Tag> : null;\n    }\n\n    return (\n      <Space>\n        {showConfirmButton && onConfirm && (\n          <Button \n            type=\"primary\" \n            icon={<CheckOutlined />}\n            onClick={onConfirm}\n            size=\"large\"\n          >\n            {confirmButtonText}\n          </Button>\n        )}\n        \n        {showCancelButton && onCancel && (\n          <Button \n            icon={<CloseOutlined />}\n            onClick={onCancel}\n            size=\"large\"\n          >\n            Cancel\n          </Button>\n        )}\n      </Space>\n    );\n  };  // Determine card styling based on execution state\n\n  const cardStyle = {\n    marginTop: 16,\n    ...(executionCompleted && {\n      borderColor: '#28a745',\n      boxShadow: '0 4px 12px rgba(40, 167, 69, 0.15)',\n    })\n  };\n\n  return (\n    <div className={`execution-plan-container ${className} ${executionCompleted ? 'execution-success' : ''}`}>\n      <Card \n        title={<>{icon} {title}</>} \n        style={cardStyle}\n        {...props}\n      >\n        <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n          {/* Execution Status Header */}\n          {renderStatusHeader()}\n          \n          {/* Execution Steps */}\n          <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>\n            {steps.map((step, index) => (\n              <React.Fragment key={`${step.id || index}-${step.status || 'pending'}`}>\n                <ExecutionStep\n                  step={step}\n                  index={index}\n                  logs={getStepLogs(step.id, index)}\n                />\n                {/* Recovery Options - inline after each step */}\n                {recoveryOptions[step.id] && (\n                  <InlineRecovery \n                    stepId={step.id}\n                    recoveryData={recoveryOptions[step.id]}\n                    onProceedWithRecovery={onProceedWithRecovery}\n                    onAbortRecovery={onAbortRecovery}\n                  />\n                )}\n              </React.Fragment>\n            ))}\n          </div>\n          \n          {/* Action Buttons */}\n          {renderActionButtons()}\n          \n          {children && React.Children.map(children, child => {\n            // Skip ExecutionLogs component\n            if (React.isValidElement(child) && child.type?.name === 'ExecutionLogs') {\n              return null;\n            }\n            return child;\n          })}\n        </Space>\n      </Card>\n    </div>\n  );\n};\n\nExecutionPlan.propTypes = {\n  steps: PropTypes.arrayOf(PropTypes.object),\n  logs: PropTypes.arrayOf(PropTypes.shape({\n    type: PropTypes.string,\n    message: PropTypes.string,\n    timestamp: PropTypes.instanceOf(Date),\n    stepId: PropTypes.string,\n  })),\n  recoveryOptions: PropTypes.object,\n  isExecuting: PropTypes.bool,\n  executionProgress: PropTypes.number,\n  executionElapsed: PropTypes.string,\n  executionCompleted: PropTypes.bool,\n  onConfirm: PropTypes.func,\n  onCancel: PropTypes.func,\n  onProceedWithRecovery: PropTypes.func,\n  onAbortRecovery: PropTypes.func,\n  showConfirmButton: PropTypes.bool,\n  showCancelButton: PropTypes.bool,\n  confirmButtonText: PropTypes.string,\n  children: PropTypes.node,\n  title: PropTypes.string,\n  icon: PropTypes.node,\n  className: PropTypes.string,\n};\n\nexport default ExecutionPlan;","import { Card, Tag, Typography, Empty } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst { Text } = Typography;\n\n/**\n * Execution logs component with consistent styling and formatting\n * Displays execution logs with timestamps and status indicators\n */\nconst ExecutionLogs = ({\n  logs = [],\n  title = 'Execution Logs',\n  maxHeight = 300,\n  showTimestamps = true,\n  className = '',\n  style = {},\n  ...props\n}) => {\n  if (!logs.length) {\n    return (\n      <Card \n        size=\"small\"\n        title={title}\n        className={className}\n        style={{ \n          background: '#f8f9fa',\n          border: '1px solid #dee2e6',\n          ...style\n        }}\n        {...props}\n      >\n        <Empty \n          description=\"No logs available\" \n          style={{ padding: '20px 0' }}\n        />\n      </Card>\n    );\n  }\n\n  const getTagColor = (type) => {\n    switch (type) {\n      case 'success': return 'success';\n      case 'error': return 'error';\n      case 'warning': return 'warning';\n      case 'info': return 'processing';\n      default: return 'default';\n    }\n  };\n\n  return (\n    <Card \n      size=\"small\"\n      title={title}\n      className={className}\n      style={{ \n        background: '#f8f9fa',\n        border: '1px solid #dee2e6',\n        ...style\n      }}\n      {...props}\n    >\n      <div style={{ maxHeight, overflow: 'auto' }}>\n        {logs.map((log, index) => (\n          <div key={index} style={{ \n            marginBottom: 8,\n            padding: '8px 12px',\n            background: 'white',\n            borderRadius: '4px',\n            border: '1px solid #e9ecef'\n          }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n              {showTimestamps && (\n                <Tag \n                  color={getTagColor(log.type)}\n                  size=\"small\"\n                >\n                  {log.timestamp instanceof Date \n                    ? log.timestamp.toLocaleTimeString() \n                    : log.timestamp\n                  }\n                </Tag>\n              )}\n              <Text style={{ fontSize: '0.9rem', flex: 1 }}>\n                {log.message}\n              </Text>\n              {log.type && !showTimestamps && (\n                <Tag \n                  color={getTagColor(log.type)}\n                  size=\"small\"\n                >\n                  {log.type.toUpperCase()}\n                </Tag>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n};\n\nExecutionLogs.propTypes = {\n  logs: PropTypes.arrayOf(PropTypes.shape({\n    message: PropTypes.string.isRequired,\n    timestamp: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n    type: PropTypes.oneOf(['success', 'error', 'warning', 'info', 'default']),\n  })),\n  title: PropTypes.string,\n  maxHeight: PropTypes.number,\n  showTimestamps: PropTypes.bool,\n  className: PropTypes.string,\n  style: PropTypes.object,\n};\n\nexport default ExecutionLogs;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Typography, Collapse, Button } from 'antd';\nimport { ExpandOutlined, CompressOutlined } from '@ant-design/icons';\n\nconst { Text, Title } = Typography;\nconst { Panel } = Collapse;\n\nconst ResourceCard = ({ resource, searchTerm, iconUrl }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  \n  // Extract resource properties with fallback handling\n  const displayProperties = resource.properties?.properties || resource.properties || {};\n  \n  // Highlight search term in resource ID\n  const highlightSearchTerm = (text, searchTerm) => {\n    if (!searchTerm) return text;\n    \n    const regex = new RegExp(`(${searchTerm})`, 'gi');\n    const parts = text.split(regex);\n    \n    return parts.map((part, index) => \n      regex.test(part) ? (\n        <span key={index} className=\"search-highlight\">\n          {part}\n        </span>\n      ) : part\n    );\n  };\n\n  return (\n    <Card\n      className=\"resource-card\"\n      hoverable\n      bodyStyle={{ padding: '20px' }}\n    >\n      <div className=\"resource-header\">\n        <div style={{ display: 'flex', alignItems: 'center', gap: '12px', marginBottom: '16px' }}>\n          <div className=\"resource-icon\">\n            <img \n              src={iconUrl}\n              alt={`${resource.type} icon`}\n              style={{ width: '32px', height: '32px' }}\n              onError={(e) => {\n                e.target.src = '/aws-service-icons/management-governance/32/Arch_AWS-CloudFormation_32.svg';\n              }}\n            />\n          </div>\n          <div style={{ flex: 1, minWidth: 0 }}>\n            <Title \n              level={5} \n              style={{ \n                margin: 0, \n                fontSize: '16px',\n                fontWeight: 600,\n                color: '#1a1a1a',\n                wordBreak: 'break-all'\n              }}\n            >\n              {highlightSearchTerm(resource.id, searchTerm)}\n            </Title>\n            <Text \n              type=\"secondary\" \n              style={{ \n                fontSize: '12px',\n                textTransform: 'uppercase',\n                fontWeight: 500,\n                letterSpacing: '0.5px'\n              }}\n            >\n              {resource.type}\n            </Text>\n          </div>\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={isExpanded ? <CompressOutlined /> : <ExpandOutlined />}\n            onClick={() => setIsExpanded(!isExpanded)}\n            style={{\n              color: '#666',\n              opacity: 0.7,\n            }}\n          />\n        </div>\n      </div>\n\n      <Collapse\n        ghost\n        activeKey={isExpanded ? ['properties'] : []}\n        onChange={() => setIsExpanded(!isExpanded)}\n        style={{ border: 'none' }}\n      >\n        <Panel \n          key=\"properties\" \n          header={null}\n          showArrow={false}\n          style={{ padding: 0, border: 'none' }}\n        >\n          <div className=\"properties-container\">\n            <pre \n              style={{ \n                margin: 0,\n                padding: '16px',\n                fontSize: '12px',\n                lineHeight: '1.5',\n                fontFamily: 'SF Mono, Monaco, Consolas, monospace',\n                color: '#2d3748',\n                backgroundColor: 'transparent',\n                whiteSpace: 'pre-wrap',\n                wordBreak: 'break-word',\n              }}\n            >\n              {JSON.stringify(displayProperties, null, 2)}\n            </pre>\n          </div>\n        </Panel>\n      </Collapse>\n    </Card>\n  );\n};\n\nResourceCard.propTypes = {\n  resource: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    properties: PropTypes.object,\n  }).isRequired,\n  searchTerm: PropTypes.string,\n  iconUrl: PropTypes.string.isRequired,\n};\n\nResourceCard.defaultProps = {\n  searchTerm: '',\n};\n\nexport default ResourceCard;","import PropTypes from 'prop-types';\nimport { Card, Row, Col, Typography, Alert } from 'antd';\n\nconst { Title, Text } = Typography;\n\nconst StateOverview = ({ infrastructureData }) => {\n  if (!infrastructureData) return null;\n\n  // Handle different response structures - similar to old UI logic\n  let actualState = infrastructureData;\n  let dataSource = 'direct';\n  let resourceCount = 0;\n\n  // Check if we have discovered resources and managed state is empty or doesn't exist\n  const hasDiscoveredResources = infrastructureData.resources && infrastructureData.resources.length > 0;\n  const managedResourceCount = infrastructureData.managed_state ? \n    Object.keys(infrastructureData.managed_state.resources || {}).length : 0;\n\n  if (infrastructureData.managed_state && managedResourceCount > 0) {\n    // Use managed state if it has resources\n    actualState = infrastructureData.managed_state;\n    dataSource = 'managed';\n    resourceCount = managedResourceCount;\n  } else if (hasDiscoveredResources) {\n    // Use discovered resources if managed state is empty\n    dataSource = 'discovered';\n    resourceCount = infrastructureData.count || infrastructureData.resources.length;\n  } else {\n    // Direct resource count from API response\n    resourceCount = infrastructureData.count || (infrastructureData.resources?.length || 0);\n  }\n\n  return (\n    <>\n      <div className=\"infrastructure-state-overview\">\n        <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n          <Col xs={24} sm={6}>\n            <Card>\n              <div style={{ textAlign: 'center' }}>\n                <Title level={2} style={{ margin: 0, color: '#1890ff' }}>\n                  {resourceCount}\n                </Title>\n                <Text type=\"secondary\">\n                  {dataSource === 'discovered' ? 'Discovered Resources' : 'Managed Resources'}\n                </Text>\n              </div>\n            </Card>\n          </Col>\n          \n          <Col xs={24} sm={6}>\n            <Card>\n              <div style={{ textAlign: 'center' }}>\n                <Title level={2} style={{ margin: 0, color: '#52c41a' }}>\n                  {actualState.version || '1.0.0'}\n                </Title>\n                <Text type=\"secondary\">State Version</Text>\n              </div>\n            </Card>\n          </Col>\n          \n          <Col xs={24} sm={6}>\n            <Card>\n              <div style={{ textAlign: 'center' }}>\n                <Title level={2} style={{ margin: 0, color: '#faad14' }}>\n                  {new Date(actualState.lastUpdated || actualState.last_updated || infrastructureData.timestamp || Date.now()).toLocaleDateString()}\n                </Title>\n                <Text type=\"secondary\">Last Updated</Text>\n              </div>\n            </Card>\n          </Col>\n\n          <Col xs={24} sm={6}>\n            <Card>\n              <div style={{ textAlign: 'center' }}>\n                <Title level={2} style={{ margin: 0, color: '#17a2b8' }}>\n                  {actualState.region || 'N/A'}\n                </Title>\n                <Text type=\"secondary\">Region</Text>\n              </div>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n\n      {dataSource === 'discovered' && (\n        <Alert\n          message={\n            <span>\n              <i className=\"fas fa-cloud\" style={{ marginRight: 8 }} />\n              Showing live AWS resources (no managed state found)\n            </span>\n          }\n          type=\"info\"\n          showIcon={false}\n          style={{ marginBottom: 16 }}\n        />\n      )}\n\n      {actualState.error && (\n        <Alert\n          message={`Error: ${actualState.error}`}\n          type=\"error\"\n          style={{ marginBottom: 16 }}\n        />\n      )}\n    </>\n  );\n};\n\nStateOverview.propTypes = {\n  infrastructureData: PropTypes.shape({\n    count: PropTypes.number,\n    resources: PropTypes.array,\n    managed_state: PropTypes.object,\n    timestamp: PropTypes.string,\n    error: PropTypes.string,\n  }),\n};\n\nexport default StateOverview;","import PropTypes from 'prop-types';\nimport { Card, Row, Col, Typography, Empty } from 'antd';\nimport ResourceCard from './ResourceCard';\n\nconst { Text } = Typography;\n\n// AWS service icon mapping\nconst getAWSServiceIcon = (resourceType) => {\n  const typeMapping = {\n    // Compute\n    'ec2_instance': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'instance': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'lambda': 'compute/32/Arch_AWS-Lambda_32.svg',\n    'auto_scaling_group': 'compute/32/Arch_Amazon-EC2-Auto-Scaling_32.svg',\n    'asg': 'compute/32/Arch_Amazon-EC2-Auto-Scaling_32.svg',\n    \n    // Networking\n    'vpc': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'subnet': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'security_group': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'securitygroup': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'load_balancer': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'loadbalancer': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'alb': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'route53': 'networking-content-delivery/32/Arch_Amazon-Route-53_32.svg',\n    'cloudfront': 'networking-content-delivery/32/Arch_Amazon-CloudFront_32.svg',\n    'internet_gateway': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'nat_gateway': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'route_table': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    \n    // Database\n    'rds': 'database/32/Arch_Amazon-RDS_32.svg',\n    'database': 'database/32/Arch_Amazon-RDS_32.svg',\n    'dynamodb': 'database/32/Arch_Amazon-DynamoDB_32.svg',\n    'redshift': 'database/32/Arch_Amazon-Redshift_32.svg',\n    \n    // Storage\n    's3': 'storage/32/Arch_Amazon-Simple-Storage-Service_32.svg',\n    'ebs': 'storage/32/Arch_Amazon-Elastic-Block-Store_32.svg',\n    'efs': 'storage/32/Arch_Amazon-Elastic-File-System_32.svg',\n    \n    // Default fallback\n    'default': 'management-governance/32/Arch_AWS-CloudFormation_32.svg'\n  };\n\n  const normalizedType = resourceType?.toLowerCase() || 'default';\n  return `/aws-service-icons/${typeMapping[normalizedType] || typeMapping.default}`;\n};\n\nconst ResourcesByCategory = ({ infrastructureData, searchTerm }) => {\n  if (!infrastructureData) {\n    return (\n      <div style={{ \n        backgroundColor: 'white',\n        borderRadius: '16px',\n        border: '1px solid #e8e8e8',\n        padding: '48px'\n      }}>\n        <Empty\n          description={\n            <Text type=\"secondary\" style={{ fontSize: '16px' }}>\n              No infrastructure data available\n            </Text>\n          }\n          style={{ padding: '48px 0' }}\n        />\n      </div>\n    );\n  }\n\n  // Handle different response structures\n  let resources = {};\n  \n  const hasDiscoveredResources = infrastructureData.resources && infrastructureData.resources.length > 0;\n  const managedResourceCount = infrastructureData.managed_state ? \n    Object.keys(infrastructureData.managed_state.resources || {}).length : 0;\n\n  if (infrastructureData.managed_state && managedResourceCount > 0) {\n    resources = infrastructureData.managed_state.resources || {};\n  } else if (hasDiscoveredResources) {\n    resources = {};\n    infrastructureData.resources.forEach((resource, index) => {\n      resources[resource.id || `resource-${index}`] = {\n        id: resource.id,\n        name: resource.name || resource.id,\n        type: resource.type,\n        status: resource.status,\n        properties: {\n          aws_details: resource.properties\n        },\n        createdAt: resource.createdAt,\n        dependencies: resource.properties?.dependencies\n      };\n    });\n  }\n\n  // Filter out step_reference resources and apply search\n  const filteredResources = Object.values(resources)\n    .filter(r => r.type !== 'step_reference')\n    .filter(r => !searchTerm || r.id.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  // Group resources by type (category)\n  const resourcesByCategory = filteredResources.reduce((acc, resource) => {\n    const type = resource.type || 'unknown';\n    if (!acc[type]) {\n      acc[type] = [];\n    }\n    acc[type].push(resource);\n    return acc;\n  }, {});\n\n  if (Object.keys(resourcesByCategory).length === 0) {\n    return (\n      <div style={{ \n        backgroundColor: 'white',\n        borderRadius: '16px',\n        border: '1px solid #e8e8e8',\n        padding: '48px'\n      }}>\n        <Empty\n          description={\n            <Text type=\"secondary\" style={{ fontSize: '16px' }}>\n              {searchTerm ? 'No resources match your search' : 'No resources found'}\n            </Text>\n          }\n          style={{ padding: '48px 0' }}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n      {Object.entries(resourcesByCategory).map(([category, resources]) => (\n        <Card\n          key={category}\n          className=\"category-card\"\n          bodyStyle={{ padding: '24px' }}\n          title={\n            <div className=\"category-header\">\n              <Text strong style={{ \n                textTransform: 'capitalize', \n                fontSize: '18px',\n                color: '#1a1a1a'\n              }}>\n                {category.replace('_', ' ')} ({resources.length})\n              </Text>\n            </div>\n          }\n        >\n          <Row gutter={[16, 16]}>\n            {resources.map((resource) => (\n              <Col key={resource.id} xs={24} sm={12} lg={8} xl={6}>\n                <ResourceCard \n                  resource={resource} \n                  searchTerm={searchTerm}\n                  iconUrl={getAWSServiceIcon(resource.type)}\n                />\n              </Col>\n            ))}\n          </Row>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\nResourcesByCategory.propTypes = {\n  infrastructureData: PropTypes.shape({\n    resources: PropTypes.array,\n    managed_state: PropTypes.object,\n  }),\n  searchTerm: PropTypes.string,\n};\n\nResourcesByCategory.defaultProps = {\n  searchTerm: '',\n};\n\nexport default ResourcesByCategory;","import PropTypes from 'prop-types';\nimport { Typography, Button, Input } from 'antd';\nimport { ReloadOutlined, SearchOutlined } from '@ant-design/icons';\n\nconst { Text, Title } = Typography;\n\nconst StateHeader = ({ \n  onRefresh, \n  refreshing, \n  searchTerm, \n  onSearchChange, \n  totalResources, \n  totalCategories \n}) => {\n  return (\n    <div style={{ \n      marginBottom: '32px',\n      backgroundColor: 'white',\n      padding: '24px',\n      borderRadius: '16px',\n      boxShadow: '0 2px 8px rgba(0, 0, 0, 0.04)',\n      border: '1px solid #e8e8e8'\n    }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>\n        <Title level={2} style={{ margin: 0, color: '#1a1a1a', fontWeight: 700 }}>\n          Infrastructure Resources\n        </Title>\n        <Button\n          type=\"primary\"\n          icon={<ReloadOutlined spin={refreshing} />}\n          onClick={onRefresh}\n          loading={refreshing}\n          style={{\n            borderRadius: '8px',\n            height: '40px',\n            backgroundColor: '#1890ff',\n            borderColor: '#1890ff',\n          }}\n        >\n          Refresh\n        </Button>\n      </div>\n      \n      <div style={{ display: 'flex', gap: '16px', alignItems: 'center' }}>\n        <Input\n          placeholder=\"Search resources by ID...\"\n          prefix={<SearchOutlined />}\n          value={searchTerm}\n          onChange={onSearchChange}\n          style={{\n            maxWidth: '300px',\n            borderRadius: '8px',\n          }}\n          allowClear\n        />\n        <Text type=\"secondary\">\n          {totalResources} resource{totalResources !== 1 ? 's' : ''} in {totalCategories} categories\n        </Text>\n      </div>\n    </div>\n  );\n};\n\nStateHeader.propTypes = {\n  onRefresh: PropTypes.func.isRequired,\n  refreshing: PropTypes.bool,\n  searchTerm: PropTypes.string,\n  onSearchChange: PropTypes.func,\n  totalResources: PropTypes.number,\n  totalCategories: PropTypes.number,\n};\n\nStateHeader.defaultProps = {\n  refreshing: false,\n  searchTerm: '',\n  onSearchChange: () => {},\n  totalResources: 0,\n  totalCategories: 0,\n};\n\nexport default StateHeader;","import { useEffect, useRef, useState, useCallback } from 'react';\nimport { Card, Space, Typography, Tooltip, Button, Tag, Modal } from 'antd';\nimport { NodeIndexOutlined, FullscreenOutlined, ZoomInOutlined, ZoomOutOutlined, CompressOutlined, DragOutlined, AimOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport mermaid from 'mermaid';\n\nconst { Text } = Typography;\n\n// AWS service icon mapping (same as ResourcesByCategory.js)\nconst getAWSServiceIcon = (resourceType) => {\n  const typeMapping = {\n    // Compute\n    'ec2_instance': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'instance': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'lambda': 'compute/32/Arch_AWS-Lambda_32.svg',\n    'auto_scaling_group': 'compute/32/Arch_Amazon-EC2-Auto-Scaling_32.svg',\n    'asg': 'compute/32/Arch_Amazon-EC2-Auto-Scaling_32.svg',\n    \n    // Networking\n    'vpc': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'subnet': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'security_group': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'securitygroup': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'load_balancer': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'loadbalancer': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'alb': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'route53': 'networking-content-delivery/32/Arch_Amazon-Route-53_32.svg',\n    'cloudfront': 'networking-content-delivery/32/Arch_Amazon-CloudFront_32.svg',\n    'internet_gateway': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'nat_gateway': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'route_table': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    \n    // Database\n    'rds': 'database/32/Arch_Amazon-RDS_32.svg',\n    'database': 'database/32/Arch_Amazon-RDS_32.svg',\n    'dynamodb': 'database/32/Arch_Amazon-DynamoDB_32.svg',\n    'redshift': 'database/32/Arch_Amazon-Redshift_32.svg',\n    \n    // Storage\n    's3': 'storage/32/Arch_Amazon-Simple-Storage-Service_32.svg',\n    'ebs': 'storage/32/Arch_Amazon-Elastic-Block-Store_32.svg',\n    'efs': 'storage/32/Arch_Amazon-Elastic-File-System_32.svg',\n    \n    // Default fallback\n    'default': 'management-governance/32/Arch_AWS-CloudFormation_32.svg'\n  };\n\n  const normalizedType = resourceType?.toLowerCase() || 'default';\n  return `/aws-service-icons/${typeMapping[normalizedType] || typeMapping.default}`;\n};\n\n/**\n * Detect resource type from node ID or class\n * Returns the AWS service type if detected\n */\nconst detectResourceType = (nodeId, classNames) => {\n  const idLower = nodeId.toLowerCase();\n  \n  // Check class names first (more reliable)\n  if (classNames) {\n    const classLower = classNames.toLowerCase();\n    if (classLower.includes('ec2') || classLower.includes('instance')) return 'instance';\n    if (classLower.includes('vpc')) return 'vpc';\n    if (classLower.includes('subnet')) return 'subnet';\n    if (classLower.includes('sg') || classLower.includes('security')) return 'security_group';\n    if (classLower.includes('lb') || classLower.includes('loadbalancer') || classLower.includes('load_balancer')) return 'load_balancer';\n    if (classLower.includes('asg') || classLower.includes('auto_scaling')) return 'auto_scaling_group';\n    if (classLower.includes('natgw') || classLower.includes('nat_gateway')) return 'nat_gateway';\n    if (classLower.includes('tg') || classLower.includes('targetgroup')) return 'load_balancer';\n    if (classLower.includes('rds') || classLower.includes('database')) return 'rds';\n    if (classLower.includes('lt') || classLower.includes('launch')) return 'instance';\n    if (classLower.includes('lambda')) return 'lambda';\n    if (classLower.includes('s3')) return 's3';\n    if (classLower.includes('dynamodb')) return 'dynamodb';\n  }\n  \n  // Fallback: check node ID patterns\n  if (idLower.includes('vpc-')) return 'vpc';\n  if (idLower.includes('subnet-')) return 'subnet';\n  if (idLower.includes('sg-')) return 'security_group';\n  if (idLower.includes('i-')) return 'instance';\n  if (idLower.includes('lt-')) return 'instance';\n  if (idLower.includes('targetgroup') || idLower.includes('elasticloadbalancing')) return 'load_balancer';\n  \n  return null;\n};\n\n/**\n * MermaidDiagram Component\n * Renders a Mermaid diagram with automatic initialization and error handling\n * Supports AWS service icons in node labels\n */\nconst MermaidDiagram = ({ mermaidSyntax, timestamp, onFullscreen }) => {\n  const mermaidRef = useRef(null);\n  const renderingRef = useRef(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [zoom, setZoom] = useState(1);\n  const [pan, setPan] = useState({ x: 0, y: 0 });\n  const svgContainerRef = useRef(null);\n  const [renderedSvg, setRenderedSvg] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const dragContainerRef = useRef(null);\n\n  useEffect(() => {\n    if (!mermaidSyntax || !mermaidRef.current || renderingRef.current) return;\n\n    let isMounted = true;\n    renderingRef.current = true;\n\n    const renderMermaid = async () => {\n      try {\n        // Generate a unique ID for this diagram\n        const id = `mermaid-${Date.now()}`;\n        \n        if (!isMounted || !mermaidRef.current) return;\n        \n        // Clear previous content and remove any previous data-processed attribute\n        const element = mermaidRef.current;\n        element.removeAttribute('data-processed');\n        element.innerHTML = '';\n        \n        // Create a new div for the diagram (use original syntax without HTML modifications)\n        const diagramDiv = document.createElement('div');\n        diagramDiv.className = 'mermaid';\n        diagramDiv.id = id;\n        diagramDiv.textContent = mermaidSyntax;\n        element.appendChild(diagramDiv);\n        \n        // Simple delay to let DOM settle\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        if (!isMounted) return;\n        \n        // Render the mermaid diagram\n        await mermaid.run({\n          nodes: [diagramDiv],\n          suppressErrors: false,\n        });\n        \n        if (!isMounted) return;\n        \n        // After rendering, add AWS icons as overlay elements\n        await addIconsToNodes(element);\n        \n        // Clone the rendered SVG to both containers\n        const svgElement = element.querySelector('svg');\n        if (svgElement) {\n          // Store in state for use in modal\n          setRenderedSvg(svgElement.outerHTML);\n          \n          // Also add to card view container\n          if (svgContainerRef.current) {\n            svgContainerRef.current.innerHTML = svgElement.outerHTML;\n          }\n        }\n        \n      } catch (error) {\n        console.error('Mermaid rendering error:', error);\n        \n        // Display error in the visible container\n        const errorHtml = `\n          <div style=\"color: #ff4d4f; text-align: left; padding: 20px; background: #fff2f0; border: 1px solid #ffccc7; border-radius: 4px;\">\n            <div style=\"font-weight: bold; margin-bottom: 8px;\">⚠️ Error rendering diagram</div>\n            <div style=\"margin-bottom: 12px;\">${error.message}</div>\n            <details style=\"margin-top: 12px;\">\n              <summary style=\"cursor: pointer; color: #1890ff;\">Show Mermaid Syntax</summary>\n              <pre style=\"margin-top: 8px; padding: 12px; background: #f5f5f5; border-radius: 4px; overflow: auto;\">${mermaidSyntax}</pre>\n            </details>\n          </div>\n        `;\n        \n        if (isMounted && svgContainerRef.current) {\n          svgContainerRef.current.innerHTML = errorHtml;\n        }\n        \n        setRenderedSvg(errorHtml);\n      } finally {\n        if (isMounted) {\n          renderingRef.current = false;\n        }\n      }\n    };\n    \n    // Function to add icon overlays to rendered nodes\n    const addIconsToNodes = async (container) => {\n      if (!isMounted) return;\n      \n      try {\n        // Wait a bit more for Mermaid to fully render\n        await new Promise(resolve => setTimeout(resolve, 150));\n        \n        if (!isMounted) return;\n        \n        // Find all nodes in the rendered SVG\n        const nodes = container.querySelectorAll('.node');\n        \n        nodes.forEach(node => {\n          // Get node ID from the element\n          const nodeId = node.id || '';\n          const classAttr = node.getAttribute('class') || '';\n          \n          // Detect resource type\n          const resourceType = detectResourceType(nodeId, classAttr);\n          \n          if (resourceType) {\n            const iconPath = getAWSServiceIcon(resourceType);\n            \n            // Find the rect element (the node box)\n            const rect = node.querySelector('rect, polygon, circle, ellipse');\n            if (!rect) return;\n            \n            // Get the position and size\n            const bbox = rect.getBBox();\n            \n            // Create an image element\n            const img = document.createElementNS('http://www.w3.org/2000/svg', 'image');\n            img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', iconPath);\n            img.setAttribute('width', '32');\n            img.setAttribute('height', '32');\n            // Center the icon horizontally at the top of the node\n            img.setAttribute('x', bbox.x + (bbox.width / 2) - 16); // Center icon (32/2 = 16)\n            img.setAttribute('y', bbox.y + 12); // Top padding\n            img.style.pointerEvents = 'none'; // Don't interfere with node interactions\n            \n            // Insert the icon before the text label so it appears behind\n            const labelContainer = node.querySelector('.label');\n            const textElements = node.querySelectorAll('.label text, text');\n            \n            if (labelContainer && labelContainer.parentNode) {\n              labelContainer.parentNode.insertBefore(img, labelContainer);\n            } else if (textElements.length > 0 && textElements[0].parentNode) {\n              textElements[0].parentNode.insertBefore(img, textElements[0]);\n            } else {\n              node.appendChild(img);\n            }\n            \n            // Move all text elements down to make room for icon (separate line)\n            textElements.forEach(textEl => {\n              // Get current transform if any\n              const currentTransform = textEl.getAttribute('transform') || '';\n              const currentY = parseFloat(textEl.getAttribute('y') || 0);\n              \n              // Move text down by icon height + spacing (more aggressive)\n              if (currentTransform) {\n                // If there's a transform, we need to add a translate\n                const newTransform = `${currentTransform} translate(0, 35)`;\n                textEl.setAttribute('transform', newTransform);\n              } else {\n                // Otherwise just adjust Y\n                textEl.setAttribute('y', currentY + 35);\n              }\n            });\n            \n            // Also adjust label container if it exists\n            if (labelContainer) {\n              const currentTransform = labelContainer.getAttribute('transform') || '';\n              if (currentTransform) {\n                const newTransform = `${currentTransform} translate(0, 35)`;\n                labelContainer.setAttribute('transform', newTransform);\n              } else {\n                const currentY = parseFloat(labelContainer.getAttribute('y') || 0);\n                labelContainer.setAttribute('y', currentY + 35);\n              }\n            }\n          }\n        });\n      } catch (error) {\n        console.warn('Failed to add icons to nodes:', error);\n        // Non-critical error, diagram will still display without icons\n      }\n    };\n    \n    renderMermaid();\n    \n    // Cleanup function\n    return () => {\n      isMounted = false;\n      renderingRef.current = false;\n    };\n  }, [mermaidSyntax]);\n\n  const handleFullscreen = () => {\n    if (onFullscreen) {\n      onFullscreen();\n    } else {\n      setIsFullscreen(true);\n    }\n  };\n\n  const handleCloseFullscreen = () => {\n    setIsFullscreen(false);\n    setZoom(1);\n    setPan({ x: 0, y: 0 }); // Reset pan when closing fullscreen\n  };\n\n  const handleZoomIn = () => {\n    setZoom(prevZoom => Math.min(prevZoom + 0.25, 5)); // Max 5x zoom\n  };\n\n  const handleZoomOut = () => {\n    setZoom(prevZoom => Math.max(prevZoom - 0.25, 0.25)); // Min 0.25x zoom\n  };\n\n  const handleResetZoom = () => {\n    setZoom(1);\n    setPan({ x: 0, y: 0 });\n  };\n\n  // Mouse wheel zoom\n  const handleWheel = useCallback((e) => {\n    e.preventDefault();\n    const delta = e.deltaY > 0 ? -0.1 : 0.1;\n    setZoom(prevZoom => Math.min(Math.max(prevZoom + delta, 0.25), 5));\n  }, []);\n\n  // Pan handlers\n  const handleMouseDown = useCallback((e) => {\n    if (e.button === 0) { // Left mouse button\n      setIsDragging(true);\n      setDragStart({ x: e.clientX - pan.x, y: e.clientY - pan.y });\n      e.preventDefault();\n    }\n  }, [pan]);\n\n  const handleMouseMove = useCallback((e) => {\n    if (isDragging) {\n      setPan({\n        x: e.clientX - dragStart.x,\n        y: e.clientY - dragStart.y,\n      });\n    }\n  }, [isDragging, dragStart]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  // Add/remove event listeners for dragging\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  const renderDiagramContent = (isInModal = false) => (\n    <div style={{ position: 'relative' }}>\n      {/* Zoom Controls */}\n      <div style={{\n        position: 'absolute',\n        top: '10px',\n        right: '10px',\n        zIndex: 10,\n        display: 'flex',\n        gap: '8px',\n        background: 'rgba(255, 255, 255, 0.95)',\n        padding: '8px',\n        borderRadius: '6px',\n        boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\n      }}>\n        <Tooltip title=\"Zoom In (or scroll up)\">\n          <Button \n            icon={<ZoomInOutlined />} \n            size=\"small\"\n            onClick={handleZoomIn}\n          />\n        </Tooltip>\n        <Tooltip title=\"Reset View (Zoom & Pan)\">\n          <Button \n            icon={<AimOutlined />}\n            size=\"small\"\n            onClick={handleResetZoom}\n          >\n            {Math.round(zoom * 100)}%\n          </Button>\n        </Tooltip>\n        <Tooltip title=\"Zoom Out (or scroll down)\">\n          <Button \n            icon={<ZoomOutOutlined />} \n            size=\"small\"\n            onClick={handleZoomOut}\n          />\n        </Tooltip>\n        <Tooltip title=\"Drag to Pan\">\n          <Tag icon={<DragOutlined />} color=\"blue\" style={{ margin: 0 }}>\n            Pan Mode\n          </Tag>\n        </Tooltip>\n      </div>\n      \n      {/* Diagram Container with Pan & Zoom */}\n      <div \n        ref={dragContainerRef}\n        onWheel={handleWheel}\n        onMouseDown={handleMouseDown}\n        style={{ \n          textAlign: 'center',\n          backgroundColor: '#fafafa',\n          padding: '20px',\n          borderRadius: '6px',\n          overflow: 'hidden', // Changed from 'auto' to 'hidden' for pan to work\n          maxHeight: isInModal ? 'calc(100vh - 200px)' : '600px',\n          minHeight: isInModal ? '500px' : '200px',\n          cursor: isDragging ? 'grabbing' : 'grab',\n          position: 'relative',\n        }}\n      >\n        <div \n          ref={isInModal ? null : svgContainerRef}\n          style={{ \n            display: 'inline-block',\n            minWidth: '100%',\n            transform: `translate(${pan.x}px, ${pan.y}px) scale(${zoom})`,\n            transformOrigin: 'center center',\n            transition: isDragging ? 'none' : 'transform 0.1s ease-out',\n            willChange: 'transform',\n          }}\n          dangerouslySetInnerHTML={isInModal && renderedSvg ? { __html: renderedSvg } : undefined}\n        >\n          {/* Card view: SVG injected via ref, Modal view: SVG injected via dangerouslySetInnerHTML */}\n        </div>\n      </div>\n      \n      {/* Instructions */}\n      <div style={{ \n        marginTop: '8px', \n        textAlign: 'center',\n        color: '#999',\n        fontSize: '12px'\n      }}>\n        💡 Drag to pan • Scroll to zoom • Click controls for precise zoom\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      {/* Hidden container for Mermaid rendering */}\n      <div ref={mermaidRef} style={{ position: 'absolute', left: '-9999px', top: 0 }} />\n      \n      <Card\n        title={\n          <Space>\n            <NodeIndexOutlined />\n            <Text strong>Dependency Visualization</Text>\n            <Tag color=\"blue\">Mermaid Diagram</Tag>\n          </Space>\n        }\n        extra={\n          <Space>\n            {timestamp && (\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                Generated: {new Date(timestamp).toLocaleString()}\n              </Text>\n            )}\n            <Tooltip title=\"View fullscreen\">\n              <Button \n                icon={<FullscreenOutlined />} \n                size=\"small\"\n                onClick={handleFullscreen}\n              />\n            </Tooltip>\n          </Space>\n        }\n      >\n        {renderDiagramContent(false)}\n      </Card>\n\n      {/* Fullscreen Modal */}\n      <Modal\n        title={\n          <Space>\n            <NodeIndexOutlined />\n            <Text strong>Dependency Visualization (Fullscreen)</Text>\n            <Tag color=\"blue\">Mermaid Diagram</Tag>\n          </Space>\n        }\n        open={isFullscreen}\n        onCancel={handleCloseFullscreen}\n        width=\"96vw\"\n        style={{ \n          top: 20,\n          maxWidth: '96vw',\n          paddingBottom: 0,\n        }}\n        styles={{ \n          body: { \n            height: 'calc(100vh - 120px)', // Full height minus header, margins, and footer space\n            overflow: 'auto',\n            padding: '16px',\n          } \n        }}\n        footer={null}\n        closeIcon={<CompressOutlined />}\n        destroyOnClose={false}\n        centered={false}\n      >\n        {renderDiagramContent(true)}\n      </Modal>\n    </>\n  );\n};\n\nMermaidDiagram.propTypes = {\n  mermaidSyntax: PropTypes.string.isRequired,\n  timestamp: PropTypes.string,\n  onFullscreen: PropTypes.func,\n};\n\nexport default MermaidDiagram;\n","import { Card, Row, Col, Statistic, Space, Tag, Typography } from 'antd';\nimport { NodeIndexOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\nconst { Text } = Typography;\n\n/**\n * GraphStatistics Component\n * Displays statistics about the dependency graph including nodes, edges, types, and bottlenecks\n */\nconst GraphStatistics = ({ metadata }) => {\n  if (!metadata) return null;\n\n  const { nodeCount, edgeCount, resourceTypeCounts, bottlenecks } = metadata;\n\n  return (\n    <Card title=\"Graph Statistics\" style={{ marginTop: 16 }}>\n      <Row gutter={[16, 16]}>\n        <Col xs={12} sm={8} md={6}>\n          <Statistic\n            title=\"Total Resources\"\n            value={nodeCount}\n            valueStyle={{ color: '#1890ff' }}\n            prefix={<NodeIndexOutlined />}\n          />\n        </Col>\n        \n        <Col xs={12} sm={8} md={6}>\n          <Statistic\n            title=\"Dependencies\"\n            value={edgeCount}\n            valueStyle={{ color: '#52c41a' }}\n          />\n        </Col>\n        \n        <Col xs={12} sm={8} md={6}>\n          <Statistic\n            title=\"Resource Types\"\n            value={Object.keys(resourceTypeCounts || {}).length}\n            valueStyle={{ color: '#faad14' }}\n          />\n        </Col>\n        \n        <Col xs={12} sm={8} md={6}>\n          <Statistic\n            title=\"Bottlenecks\"\n            value={bottlenecks?.length || 0}\n            valueStyle={{ \n              color: bottlenecks?.length > 0 ? '#ff4d4f' : '#52c41a' \n            }}\n          />\n        </Col>\n      </Row>\n      \n      {resourceTypeCounts && Object.keys(resourceTypeCounts).length > 0 && (\n        <>\n          <div style={{ marginTop: 24, marginBottom: 12 }}>\n            <Text strong>Resource Type Distribution</Text>\n          </div>\n          <Space wrap>\n            {Object.entries(resourceTypeCounts).map(([type, count]) => (\n              <Tag key={type} color=\"blue\">\n                {type}: {count}\n              </Tag>\n            ))}\n          </Space>\n        </>\n      )}\n    </Card>\n  );\n};\n\nGraphStatistics.propTypes = {\n  metadata: PropTypes.shape({\n    nodeCount: PropTypes.number,\n    edgeCount: PropTypes.number,\n    resourceTypeCounts: PropTypes.object,\n    bottlenecks: PropTypes.array,\n  }),\n};\n\nexport default GraphStatistics;\n","import { Card, Space, Tag, Typography } from 'antd';\nimport { WarningOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\nconst { Text } = Typography;\n\n/**\n * BottlenecksList Component\n * Displays performance bottlenecks with color-coded impact levels\n */\nconst BottlenecksList = ({ bottlenecks }) => {\n  if (!bottlenecks || bottlenecks.length === 0) {\n    return null;\n  }\n\n  const getImpactColor = (impact) => {\n    switch (impact) {\n      case 'critical': return '#ff4d4f';\n      case 'high': return '#faad14';\n      case 'medium': return '#1890ff';\n      case 'low': return '#52c41a';\n      default: return '#d9d9d9';\n    }\n  };\n\n  const getImpactIcon = (impact) => {\n    return <WarningOutlined style={{ color: getImpactColor(impact) }} />;\n  };\n\n  return (\n    <Card \n      title={\n        <Space>\n          <WarningOutlined style={{ color: '#faad14' }} />\n          <Text strong>Performance Bottlenecks Detected</Text>\n        </Space>\n      }\n      style={{ marginTop: 16 }}\n    >\n      <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n        {bottlenecks.map((bottleneck, index) => (\n          <Card \n            key={index}\n            size=\"small\"\n            style={{ \n              borderLeft: `4px solid ${getImpactColor(bottleneck.impact)}`,\n              backgroundColor: '#fafafa'\n            }}\n          >\n            <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n              <Space>\n                {getImpactIcon(bottleneck.impact)}\n                <Text strong style={{ fontSize: '14px' }}>\n                  {bottleneck.resourceId}\n                </Text>\n                <Tag color={getImpactColor(bottleneck.impact)}>\n                  {bottleneck.impact.toUpperCase()}\n                </Tag>\n              </Space>\n              <div style={{ paddingLeft: '24px' }}>\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  Type: {bottleneck.resourceType} • {bottleneck.dependentCount} dependent{bottleneck.dependentCount !== 1 ? 's' : ''}\n                </Text>\n              </div>\n            </Space>\n          </Card>\n        ))}\n      </Space>\n    </Card>\n  );\n};\n\nBottlenecksList.propTypes = {\n  bottlenecks: PropTypes.arrayOf(\n    PropTypes.shape({\n      resourceId: PropTypes.string.isRequired,\n      resourceType: PropTypes.string.isRequired,\n      dependentCount: PropTypes.number.isRequired,\n      impact: PropTypes.oneOf(['low', 'medium', 'high', 'critical']).isRequired,\n      dependents: PropTypes.arrayOf(PropTypes.string),\n    })\n  ),\n};\n\nexport default BottlenecksList;\n"],"names":["constructor","this","baseURL","process","replace","console","log","call","endpoint","options","arguments","length","undefined","url","concat","config","_objectSpread","headers","response","fetch","ok","errorMessage","status","statusText","errorDetails","errorText","text","errorData","JSON","parse","error","message","detail","jsonError","readError","warn","Error","details","responseText","name","enhancedError","originalError","isNetworkError","isTimeoutError","processAgentRequest","request","dryRun","method","body","stringify","dry_run","executeConfirmedPlan","decisionId","getInfrastructureState","params","discoverInfrastructure","exportState","blob","getDependencyGraph","detectConflicts","URLSearchParams","auto_resolve","toString","generateDeploymentPlan","targetResources","includeLevels","forEach","resource","append","set","downloadFile","filename","window","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","getCurrentTimestamp","Date","toISOString","split","getBaseURL","getConfig","wsURL","environment","_ref","type","showIcon","closable","style","props","_objectWithoutProperties","_excluded","alertType","getAlertType","msg","toLowerCase","includes","displayMessage","startsWith","substring","_jsx","Alert","borderRadius","fontSize","marginBottom","Title","Paragraph","Typography","title","description","level","extra","_jsxs","children","display","justifyContent","alignItems","margin","step","index","logs","className","logsExpanded","setLogsExpanded","useState","parametersExpanded","setParametersExpanded","stepStatus","useEffect","stepTitle","action","stepDescription","duration","dependencies","id","mcpTool","toolParameters","parameters","marginTop","Button","size","icon","CodeOutlined","onClick","padding","height","color","background","border","overflow","maxHeight","paddingBottom","borderBottom","fontWeight","fontFamily","whiteSpace","wordBreak","CheckOutlined","CloseOutlined","LoadingOutlined","spin","ClockCircleOutlined","getStatusIcon","UpOutlined","DownOutlined","map","logIndex","_log$timestamp","_log$type","timestamp","toLocaleTimeString","toUpperCase","Text","RecoveryOption","_ref2","option","isSelected","onSelect","showDetails","setShowDetails","successProb","Math","round","successProbability","riskLevel","isMultiStep","multiStepPlan","Card","cursor","backgroundColor","strong","Tag","marginLeft","totalSteps","Space","risk","getRiskColor","reasoning","newTool","modifiedParameters","e","stopPropagation","paddingLeft","borderLeft","stepIndex","gap","minWidth","stepOrder","flex","toolName","purpose","Object","keys","stepId","recoveryData","onProceedWithRecovery","onAbortRecovery","selectedOptionIndex","setSelectedOptionIndex","inProgress","selectedOption","parseInt","progressMessage","visible","failureContext","recoveryOptions","handleOptionSelect","optionIndex","ExclamationCircleOutlined","stepName","_Fragment","aiAnalysis","rootCause","recommendation","direction","width","danger","StopOutlined","handleAbort","PlayCircleOutlined","disabled","handleProceed","steps","isExecuting","executionProgress","executionElapsed","executionCompleted","onConfirm","onCancel","showConfirmButton","showCancelButton","confirmButtonText","RobotOutlined","cardStyle","borderColor","boxShadow","renderStatusHeader","statusStyle","Progress","percent","strokeColor","trailColor","flexDirection","React","ExecutionStep","filter","InlineRecovery","getStepLogs","child","_child$type","Panel","Collapse","ResourceCard","_resource$properties","searchTerm","iconUrl","isExpanded","setIsExpanded","displayProperties","properties","hoverable","bodyStyle","src","alt","onError","target","highlightSearchTerm","regex","RegExp","part","test","textTransform","letterSpacing","CompressOutlined","ExpandOutlined","opacity","ghost","activeKey","onChange","header","showArrow","lineHeight","defaultProps","getAWSServiceIcon","resourceType","typeMapping","normalizedType","default","ResourcesByCategory","infrastructureData","Empty","resources","hasDiscoveredResources","managedResourceCount","managed_state","aws_details","createdAt","resourcesByCategory","values","r","reduce","acc","push","entries","category","Row","gutter","Col","xs","sm","lg","xl","StateHeader","onRefresh","refreshing","onSearchChange","totalResources","totalCategories","ReloadOutlined","loading","Input","placeholder","prefix","SearchOutlined","value","maxWidth","allowClear","mermaidSyntax","onFullscreen","mermaidRef","useRef","renderingRef","isFullscreen","setIsFullscreen","zoom","setZoom","pan","setPan","x","y","svgContainerRef","renderedSvg","setRenderedSvg","isDragging","setIsDragging","dragStart","setDragStart","dragContainerRef","current","isMounted","addIconsToNodes","async","Promise","resolve","setTimeout","container","querySelectorAll","node","detectResourceType","nodeId","classNames","idLower","classLower","getAttribute","iconPath","rect","querySelector","bbox","getBBox","img","createElementNS","setAttributeNS","setAttribute","pointerEvents","labelContainer","textElements","parentNode","insertBefore","textEl","currentTransform","currentY","parseFloat","newTransform","now","element","removeAttribute","innerHTML","diagramDiv","textContent","mermaid","run","nodes","suppressErrors","svgElement","outerHTML","errorHtml","renderMermaid","handleZoomIn","prevZoom","min","handleZoomOut","max","handleResetZoom","handleWheel","useCallback","preventDefault","delta","deltaY","handleMouseDown","button","clientX","clientY","handleMouseMove","handleMouseUp","addEventListener","removeEventListener","renderDiagramContent","isInModal","position","top","right","zIndex","Tooltip","ZoomInOutlined","AimOutlined","ZoomOutOutlined","DragOutlined","ref","onWheel","onMouseDown","textAlign","minHeight","transform","transformOrigin","transition","willChange","dangerouslySetInnerHTML","__html","left","NodeIndexOutlined","toLocaleString","FullscreenOutlined","handleFullscreen","Modal","open","handleCloseFullscreen","styles","footer","closeIcon","destroyOnClose","centered","metadata","nodeCount","edgeCount","resourceTypeCounts","bottlenecks","md","Statistic","valueStyle","wrap","count","getImpactColor","impact","WarningOutlined","bottleneck","resourceId","dependentCount"],"sourceRoot":""}