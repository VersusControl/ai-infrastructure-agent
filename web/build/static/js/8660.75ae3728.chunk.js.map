{"version":3,"file":"static/js/8660.75ae3728.chunk.js","mappings":"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","sources":["pages/InfrastructureStatePage.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport {\n  Spin,\n  Typography,\n} from 'antd';\nimport { useApp } from '../contexts/AppContext';\nimport { ACTION_TYPES } from '../contexts/AppContext';\nimport apiService from '../services/apiService';\nimport { \n  StateHeader, \n  ResourcesByCategory \n} from '../components';\n\nconst { Text } = Typography;\n\nconst InfrastructureStatePage = () => {\n  const { state, dispatch } = useApp();\n  const [infrastructureData, setInfrastructureData] = useState(null);\n  const [refreshing, setRefreshing] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Define functions before they're used in callbacks\n  const loadInfrastructureState = useCallback(async (forceFresh = false) => {\n    setRefreshing(true);\n    dispatch({\n      type: ACTION_TYPES.SET_LOADING,\n      payload: { key: 'state', value: true },\n    });\n\n    try {\n      const data = await apiService.getInfrastructureState(forceFresh);\n      setInfrastructureData(data);\n      \n      dispatch({\n        type: ACTION_TYPES.SET_INFRASTRUCTURE_STATE,\n        payload: data,\n      });\n    } catch (error) {\n      console.error('Failed to load infrastructure state:', error);\n    } finally {\n      setRefreshing(false);\n      dispatch({\n        type: ACTION_TYPES.SET_LOADING,\n        payload: { key: 'state', value: false },\n      });\n    }\n  }, [dispatch]);\n\n  // Infrastructure State specific WebSocket message handler\n  const handleInfrastructureStateWebSocketMessage = useCallback((data) => {\n    console.log('InfrastructureStatePage: Handling WebSocket message:', data.type, data);\n    \n    switch (data.type) {\n      case 'state_update':\n        setInfrastructureData(data.data);\n        dispatch({\n          type: ACTION_TYPES.SET_INFRASTRUCTURE_STATE,\n          payload: data.data,\n        });\n        break;\n      \n      case 'processing_completed':\n        if (data.success) {\n          setTimeout(() => {\n            loadInfrastructureState(false);\n          }, 1000);\n        }\n        break;\n      \n      default:\n        break;\n    }\n  }, [dispatch, loadInfrastructureState]);\n\n  // Register this page as active and setup WebSocket message handler\n  useEffect(() => {\n    dispatch({\n      type: ACTION_TYPES.SET_CURRENT_PAGE,\n      payload: 'infrastructure-state',\n    });\n\n    // Register page-specific WebSocket message handler\n    dispatch({\n      type: ACTION_TYPES.REGISTER_PAGE_HANDLER,\n      payload: {\n        page: 'infrastructure-state',\n        handler: handleInfrastructureStateWebSocketMessage,\n      },\n    });\n\n    // Cleanup when component unmounts\n    return () => {\n      dispatch({\n        type: ACTION_TYPES.UNREGISTER_PAGE_HANDLER,\n        payload: 'infrastructure-state',\n      });\n      \n      dispatch({\n        type: ACTION_TYPES.SET_CURRENT_PAGE,\n        payload: null,\n      });\n    };\n  }, [dispatch, handleInfrastructureStateWebSocketMessage]);\n\n  // Load state on component mount\n  useEffect(() => {\n    loadInfrastructureState();\n  }, [loadInfrastructureState]);\n\n  // Process and filter resources with category grouping\n  const getFilteredResourcesByCategory = () => {\n    if (!infrastructureData) return {};\n\n    let resources = {};\n    \n    const hasDiscoveredResources = infrastructureData.resources && infrastructureData.resources.length > 0;\n    const managedResourceCount = infrastructureData.managed_state ? \n      Object.keys(infrastructureData.managed_state.resources || {}).length : 0;\n\n    if (infrastructureData.managed_state && managedResourceCount > 0) {\n      resources = infrastructureData.managed_state.resources || {};\n    } else if (hasDiscoveredResources) {\n      resources = {};\n      infrastructureData.resources.forEach((resource, index) => {\n        resources[resource.id || `resource-${index}`] = {\n          id: resource.id,\n          name: resource.name || resource.id,\n          type: resource.type,\n          status: resource.status,\n          properties: {\n            aws_details: resource.properties\n          },\n          createdAt: resource.createdAt,\n          dependencies: resource.properties?.dependencies\n        };\n      });\n    }\n\n    // Filter out step_reference resources and apply search\n    const filteredResources = Object.values(resources)\n      .filter(r => r.type !== 'step_reference')\n      .filter(r => !searchTerm || r.id.toLowerCase().includes(searchTerm.toLowerCase()));\n\n    // Group resources by type (category)\n    const resourcesByCategory = filteredResources.reduce((acc, resource) => {\n      const type = resource.type || 'unknown';\n      if (!acc[type]) {\n        acc[type] = [];\n      }\n      acc[type].push(resource);\n      return acc;\n    }, {});\n\n    return resourcesByCategory;\n  };\n\n  const resourcesByCategory = getFilteredResourcesByCategory();\n  const totalResources = Object.values(resourcesByCategory).flat().length;\n\n  return (\n    <div style={{ \n      padding: '24px', \n      minHeight: '100vh',\n      backgroundColor: '#fafafa'\n    }}>\n      <StateHeader\n        onRefresh={() => loadInfrastructureState(false)}\n        refreshing={refreshing}\n        searchTerm={searchTerm}\n        onSearchChange={(e) => setSearchTerm(e.target.value)}\n        totalResources={totalResources}\n        totalCategories={Object.keys(resourcesByCategory).length}\n      />\n\n      {/* Content */}\n      {state.loading.state ? (\n        <div style={{ \n          textAlign: 'center', \n          padding: '80px 0',\n          backgroundColor: 'white',\n          borderRadius: '16px',\n          border: '1px solid #e8e8e8'\n        }}>\n          <Spin size=\"large\" />\n          <div style={{ marginTop: 24 }}>\n            <Text type=\"secondary\" style={{ fontSize: '16px' }}>\n              Loading infrastructure resources...\n            </Text>\n          </div>\n        </div>\n      ) : (\n        <ResourcesByCategory \n          infrastructureData={infrastructureData} \n          searchTerm={searchTerm}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default InfrastructureStatePage;"],"names":["Text","Typography","InfrastructureStatePage","state","dispatch","useApp","infrastructureData","setInfrastructureData","useState","refreshing","setRefreshing","searchTerm","setSearchTerm","loadInfrastructureState","useCallback","async","forceFresh","arguments","length","undefined","type","ACTION_TYPES","SET_LOADING","payload","key","value","data","apiService","getInfrastructureState","SET_INFRASTRUCTURE_STATE","error","console","handleInfrastructureStateWebSocketMessage","log","success","setTimeout","useEffect","SET_CURRENT_PAGE","REGISTER_PAGE_HANDLER","page","handler","UNREGISTER_PAGE_HANDLER","resourcesByCategory","getFilteredResourcesByCategory","resources","hasDiscoveredResources","managedResourceCount","managed_state","Object","keys","forEach","resource","index","_resource$properties","id","concat","name","status","properties","aws_details","createdAt","dependencies","values","filter","r","toLowerCase","includes","reduce","acc","push","totalResources","flat","_jsxs","style","padding","minHeight","backgroundColor","children","_jsx","StateHeader","onRefresh","onSearchChange","e","target","totalCategories","loading","textAlign","borderRadius","border","Spin","size","marginTop","fontSize","ResourcesByCategory"],"sourceRoot":""}