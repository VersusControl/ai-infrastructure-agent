{"version":3,"file":"static/js/1707.279d4917.chunk.js","mappings":"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","sources":["pages/AIAgentPage.js"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nimport { \n  Card, \n  Input, \n  Button, \n  Checkbox, \n  Space, \n  Typography, \n  Alert,\n  message,\n  Tooltip,\n} from 'antd';\nimport { \n  SendOutlined, \n  RobotOutlined,\n  ApiOutlined,\n} from '@ant-design/icons';\nimport ReactMarkdown from 'react-markdown';\nimport { useApp } from '../contexts/AppContext';\nimport { ACTION_TYPES } from '../contexts/AppContext';\nimport apiService from '../services/apiService';\nimport { setupErrorSuppression } from '../utils/safeFetch';\nimport { \n  PageHeader, \n  StatusAlert, \n  ExecutionPlan\n} from '../components';\n\nconst { TextArea } = Input;\nconst { Text, Paragraph } = Typography;\n\nconst AIAgentPage = () => {\n  const { state, dispatch } = useApp();\n  const [request, setRequest] = useState('');\n  const [dryRun, setDryRun] = useState(true);\n  const [autoScroll, setAutoScroll] = useState(true); // Enable auto-scroll by default\n  const [executionTimer, setExecutionTimer] = useState(null);\n  const [backendAvailable, setBackendAvailable] = useState(true); // Track backend connection status\n  \n  // Recovery state - SIMPLIFIED to bare minimum\n  const [isRecoveryAnalyzing, setIsRecoveryAnalyzing] = useState(false); // Show \"Analyzing...\" loading indicator\n  const [recoveryExecutionId, setRecoveryExecutionId] = useState(null); // Store executionId for recovery confirmation\n  const [originalExecutionPlan, setOriginalExecutionPlan] = useState(null); // Store original plan for cancel button only\n  const [recoveryMetadata, setRecoveryMetadata] = useState(null); // Store recovery plan metadata (preservedCount, newStepsCount, etc.)\n  \n  // Ref for execution plan section to enable smooth scrolling\n  const executionPlanRef = useRef(null);\n  // Ref for ExecutionPlan component to access scrollToStep method\n  const executionPlanComponentRef = useRef(null);\n\n  // Check backend health on component mount and when WebSocket connects\n  useEffect(() => {\n    // Setup global error suppression for fetch errors\n    const cleanup = setupErrorSuppression();\n    \n    // Check WebSocket connection status to determine backend availability\n    const checkWebSocketConnection = () => {\n      if (state.websocket) {\n        const isConnected = state.websocket.readyState === WebSocket.OPEN;\n        setBackendAvailable(isConnected);\n        if (isConnected) {\n          console.log('✅ Backend available (WebSocket connected)');\n        } else {\n          console.log('⚠️ Backend unavailable (WebSocket not connected)');\n        }\n      } else {\n        setBackendAvailable(false);\n        console.log('⚠️ Backend unavailable (No WebSocket)');\n      }\n    };\n    \n    // Check immediately\n    checkWebSocketConnection();\n    \n    // Add event listeners to detect connection state changes\n    if (state.websocket) {\n      const ws = state.websocket;\n      \n      const handleOpen = () => {\n        console.log('✅ WebSocket opened - Backend available');\n        setBackendAvailable(true);\n      };\n      \n      const handleClose = () => {\n        console.log('⚠️ WebSocket closed - Backend unavailable');\n        setBackendAvailable(false);\n      };\n      \n      const handleError = () => {\n        console.log('❌ WebSocket error - Backend unavailable');\n        setBackendAvailable(false);\n      };\n      \n      ws.addEventListener('open', handleOpen);\n      ws.addEventListener('close', handleClose);\n      ws.addEventListener('error', handleError);\n      \n      return () => {\n        ws.removeEventListener('open', handleOpen);\n        ws.removeEventListener('close', handleClose);\n        ws.removeEventListener('error', handleError);\n        cleanup(); // Remove error suppression listeners\n      };\n    }\n    \n    return () => {\n      cleanup(); // Remove error suppression listeners\n    };\n  }, [state.websocket]); // Re-check when WebSocket changes\n\n  // Start execution timer\n  const startExecutionTimer = useCallback(() => {\n    const startTime = new Date();\n    \n    const timer = setInterval(() => {\n      const now = new Date();\n      const elapsed = Math.floor((now - startTime) / 1000);\n      const minutes = Math.floor(elapsed / 60);\n      const seconds = elapsed % 60;\n      const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n      \n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_EXECUTION_ELAPSED,\n        payload: timeString,\n      });\n    }, 1000);\n    \n    setExecutionTimer(timer);\n  }, [dispatch]);\n\n  // Stop execution timer\n  const stopExecutionTimer = useCallback(() => {\n    if (executionTimer) {\n      clearInterval(executionTimer);\n      setExecutionTimer(null);\n    }\n  }, [executionTimer]);\n\n  // Helper function to update step status\n  const updateStepStatus = useCallback((stepId, status) => {\n    dispatch({\n      type: ACTION_TYPES.UPDATE_STEP_STATUS,\n      payload: { stepId, status }\n    });\n  }, [dispatch]);\n\n  // Helper function to update execution progress\n  const updateExecutionProgress = useCallback(() => {\n    dispatch({\n      type: ACTION_TYPES.UPDATE_EXECUTION_PROGRESS\n    });\n  }, [dispatch]);\n\n  // Helper function to update execution log\n  const updateExecutionLog = useCallback((logData) => {\n    dispatch({\n      type: ACTION_TYPES.ADD_AGENT_EXECUTION_LOG,\n      payload: {\n        ...logData,\n        timestamp: new Date(),\n      }\n    });\n  }, [dispatch]);\n\n  // SIMPLIFIED: When recovery plan is received, just REPLACE the execution plan\n  // The plan becomes \"pending\" and waits for user confirmation like the original plan\n  const showRecoveryPlan = useCallback((data) => {\n    console.log('📋 Recovery plan received, replacing current execution plan');\n    \n    const { executionId, strategy, failureContext } = data;\n    \n    // Detailed validation with helpful error messages\n    if (!strategy) {\n      message.error('Backend sent incomplete recovery plan (missing strategy field)');\n      setIsRecoveryAnalyzing(false);\n      return;\n    }\n    \n    if (!strategy.executionPlan) {\n      message.error('Backend sent incomplete recovery plan (missing execution plan)');\n      setIsRecoveryAnalyzing(false);\n      return;\n    }\n    \n    if (strategy.executionPlan.length === 0) {\n      message.error('Recovery plan has no steps');\n      setIsRecoveryAnalyzing(false);\n      return;\n    }\n    \n    // Store original plan ONCE (only on first recovery) for cancel functionality\n    if (!originalExecutionPlan) {\n      console.log('💾 Storing original plan for cancel button');\n      setOriginalExecutionPlan(state.agentExecutionPlan);\n    }\n    \n    // Store executionId for when user confirms\n    setRecoveryExecutionId(executionId);\n    console.log('💾 Set recoveryExecutionId:', executionId);\n    \n    // Store recovery metadata for UI display\n    setRecoveryMetadata({\n      preservedCount: strategy.preservedCount || 0,\n      newStepsCount: strategy.newStepsCount || 0,\n      totalSteps: strategy.totalSteps || strategy.executionPlan.length,\n      recoveryNotes: strategy.recoveryNotes || '',\n      reasoning: strategy.reasoning || '',\n      successProbability: strategy.successProbability || 0,\n      riskLevel: strategy.riskLevel || 'unknown',\n      estimatedDuration: strategy.estimatedDuration || 'unknown',\n      attemptNumber: failureContext?.attemptNumber || 1,\n    });\n    \n    // Convert recovery steps to same format as original plan\n    // CRITICAL: Preserve the status from backend! Completed steps stay 'completed'\n    // Mark recovery steps for special styling\n    const preservedCount = strategy.preservedCount || 0;\n    const newStepsCount = strategy.newStepsCount || 0;\n    \n    const recoverySteps = strategy.executionPlan.map((step, index) => {\n      const isRecoveryStep = index >= preservedCount && index < (preservedCount + newStepsCount);\n      \n      return {\n        id: step.id,\n        name: step.name,\n        action: step.action,\n        resource_type: step.resourceId || step.mcpTool || 'recovery',\n        description: step.description,\n        status: step.status || 'pending',  // ← PRESERVE backend status!\n        mcpTool: step.mcpTool,\n        toolParameters: step.toolParameters,\n        parameters: step.parameters,\n        dependsOn: step.dependsOn,\n        estimatedDuration: step.estimatedDuration,\n        riskLevel: step.riskLevel,\n        isRecoveryStep: isRecoveryStep,  // Mark recovery steps for styling\n      };\n    });\n    \n    // REPLACE the execution plan (recovery plan becomes THE plan)\n    dispatch({\n      type: ACTION_TYPES.SET_AGENT_EXECUTION_PLAN,\n      payload: recoverySteps,\n    });\n    \n    // Set status to 'pending' - this will show the confirm button\n    dispatch({\n      type: ACTION_TYPES.SET_CURRENT_EXECUTION,\n      payload: { status: 'pending', executionId: executionId, isRecovery: true },\n    });\n    \n    // Stop showing \"Analyzing...\" indicator\n    setIsRecoveryAnalyzing(false);\n    \n    const attemptMsg = failureContext?.attemptNumber > 1 \n      ? ` (Recovery Attempt #${failureContext.attemptNumber})` \n      : '';\n    message.info(`Recovery plan ready - please review and confirm${attemptMsg}`);\n  }, [dispatch, state.agentExecutionPlan, originalExecutionPlan]);\n\n  // SIMPLIFIED: Confirm recovery - send WebSocket approval and update UI state\n  const handleConfirmRecovery = useCallback(async () => {\n    console.log('🔵 ========================================');\n    console.log('🔵 Sending WebSocket approval to backend');\n    console.log('🔵 ========================================');\n    \n    if (!recoveryExecutionId) {\n      message.error('No recovery plan to confirm');\n      return;\n    }\n\n    // Show loading state immediately\n    dispatch({\n      type: ACTION_TYPES.SET_LOADING,\n      payload: { key: 'agent', value: true },\n    });\n\n    try {\n      // Clear logs for fresh execution\n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_EXECUTION_LOGS,\n        payload: [],\n      });\n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_EXECUTION_PROGRESS,\n        payload: 0,\n      });\n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_EXECUTION_COMPLETED,\n        payload: false,\n      });\n      \n      // Reset step statuses (only pending steps will be executed)\n      if (state.agentExecutionPlan) {\n        const resetPlan = state.agentExecutionPlan.map(step => {\n          // Keep completed steps as completed, reset pending steps\n          if (step.status === 'completed') {\n            return step;\n          }\n          return { ...step, status: 'pending' };\n        });\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_PLAN,\n          payload: resetPlan,\n        });\n      }\n      \n      // Send WebSocket approval to backend\n      if (state.websocket && state.websocket.readyState === WebSocket.OPEN) {\n        state.websocket.send(JSON.stringify({\n          type: 'plan_recovery_decision',\n          executionId: recoveryExecutionId,\n          approved: true,\n          timestamp: new Date().toISOString()\n        }));\n        \n        message.success('Recovery plan confirmed - execution starting...');\n        \n        // Scroll to execution plan to show progress\n        setTimeout(() => {\n          if (executionPlanRef.current) {\n            executionPlanRef.current.scrollIntoView({ \n              behavior: 'smooth', \n              block: 'start',\n              inline: 'nearest'\n            });\n          }\n        }, 200);\n      } else {\n        throw new Error('WebSocket not connected');\n      }\n    } catch (error) {\n      console.error('❌ Failed to send recovery approval:', error);\n      message.error('Failed to send recovery confirmation');\n      \n      // Clear loading state on error\n      dispatch({\n        type: ACTION_TYPES.SET_LOADING,\n        payload: { key: 'agent', value: false },\n      });\n    }\n  }, [recoveryExecutionId, state.websocket, state.agentExecutionPlan, dispatch, executionPlanRef]);\n\n  // SIMPLIFIED: Cancel recovery - restore original plan and abort\n  const handleCancelRecovery = useCallback(async () => {\n    console.log('❌ User cancelled recovery - restoring original plan');\n    \n    if (!recoveryExecutionId) {\n      return;\n    }\n\n    try {\n      // Send abort via WebSocket\n      if (state.websocket && state.websocket.readyState === WebSocket.OPEN) {\n        state.websocket.send(JSON.stringify({\n          type: 'plan_recovery_abort',\n          executionId: recoveryExecutionId,\n          approved: false,\n          timestamp: new Date().toISOString()\n        }));\n      }\n    } catch (error) {\n      console.error('Failed to send recovery abort:', error);\n    }\n\n    // Restore original plan if available\n    if (originalExecutionPlan) {\n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_EXECUTION_PLAN,\n        payload: originalExecutionPlan,\n      });\n    }\n\n    // Clean up recovery state\n    setRecoveryExecutionId(null);\n    setOriginalExecutionPlan(null);\n    \n    // Update execution status\n    dispatch({\n      type: ACTION_TYPES.UPDATE_EXECUTION_STATUS,\n      payload: 'aborted',\n    });\n    \n    stopExecutionTimer();\n    message.info('Recovery cancelled');\n  }, [recoveryExecutionId, originalExecutionPlan, state.websocket, dispatch, stopExecutionTimer]);\n\n  // AI Agent specific WebSocket message handler\n  const handleAIAgentWebSocketMessage = useCallback((data) => {\n    // Log ALL WebSocket messages for debugging\n    console.log('📨 WebSocket message received:', {\n      type: data.type,\n      executionId: data.executionId,\n      hasStrategy: !!data.strategy,\n      hasFailureContext: !!data.failureContext,\n      keys: Object.keys(data)\n    });\n    \n    switch (data.type) {\n      case 'processing_started':\n        dispatch({\n          type: ACTION_TYPES.SET_STATUS_MESSAGE,\n          payload: `Processing: ${data.request}`,\n        });\n        dispatch({\n          type: ACTION_TYPES.SET_LOADING,\n          payload: { key: 'agent', value: true },\n        });\n        break;\n      \n      case 'processing_completed':\n        if (data.success) {\n          dispatch({\n            type: ACTION_TYPES.SET_STATUS_MESSAGE,\n            payload: 'Processing completed successfully',\n          });\n        } else {\n          dispatch({\n            type: ACTION_TYPES.SET_STATUS_MESSAGE,\n            payload: 'Processing failed',\n          });\n        }\n        dispatch({\n          type: ACTION_TYPES.SET_LOADING,\n          payload: { key: 'agent', value: false },\n        });\n        break;\n      \n      case 'execution_started':\n        startExecutionTimer();\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_COMPLETED,\n          payload: false,\n        });\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_PROGRESS,\n          payload: 0,\n        });\n        updateExecutionLog({\n          type: 'info',\n          message: data.message || 'Execution started',\n          stepId: null, // global log\n        });\n        break;\n        \n      case 'step_started':\n        console.log('🔵 Step started:', { stepId: data.stepId, message: data.message });\n        updateStepStatus(data.stepId, 'running');\n        updateExecutionLog({\n          type: 'info',\n          message: data.message,\n          stepId: data.stepId,\n        });\n        \n        // Auto-scroll to the step that just started (if enabled)\n        if (autoScroll) {\n          setTimeout(() => {\n            if (executionPlanComponentRef.current && data.stepId) {\n              executionPlanComponentRef.current.scrollToStep(data.stepId);\n            }\n          }, 100);\n        }\n        break;\n      \n      case 'step_progress':\n        console.log('🔵 Step progress:', { stepId: data.stepId, message: data.message });\n        updateExecutionLog({\n          type: 'info',\n          message: data.message,\n          stepId: data.stepId,\n        });\n        break;\n      \n      case 'step_completed':\n        console.log('✅ Step completed:', { stepId: data.stepId, message: data.message });\n        updateStepStatus(data.stepId, 'completed');\n        updateExecutionProgress();\n        updateExecutionLog({\n          type: 'success',\n          message: data.message,\n          stepId: data.stepId,\n        });\n        \n        // Auto-scroll to the completed step (if enabled)\n        if (autoScroll) {\n          setTimeout(() => {\n            if (executionPlanComponentRef.current && data.stepId) {\n              executionPlanComponentRef.current.scrollToStep(data.stepId);\n            }\n          }, 100);\n        }\n        break;\n      \n      case 'step_failed':\n        console.log('❌ Step failed:', { stepId: data.stepId, message: data.message });\n        updateStepStatus(data.stepId, 'failed');\n        updateExecutionLog({\n          type: 'error',\n          message: data.message,\n          stepId: data.stepId,\n        });\n        \n        // Auto-scroll to the failed step (if enabled)\n        if (autoScroll) {\n          setTimeout(() => {\n            if (executionPlanComponentRef.current && data.stepId) {\n              executionPlanComponentRef.current.scrollToStep(data.stepId);\n            }\n          }, 100);\n        }\n        break;\n      \n      case 'execution_completed':\n        console.log('✅ Execution completed successfully');\n        stopExecutionTimer();\n        \n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_PROGRESS,\n          payload: 100,\n        });\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_COMPLETED,\n          payload: true,\n        });\n        dispatch({\n          type: ACTION_TYPES.UPDATE_EXECUTION_STATUS,\n          payload: 'completed',\n        });\n        \n        // Clean up ALL recovery state\n        setOriginalExecutionPlan(null);\n        setRecoveryExecutionId(null);\n        setIsRecoveryAnalyzing(false);\n        setRecoveryMetadata(null);\n        \n        message.success('Execution completed successfully');\n        \n        // Auto-refresh infrastructure state\n        setTimeout(() => {\n          dispatch({ type: ACTION_TYPES.REFRESH_INFRASTRUCTURE });\n        }, 1000);\n        break;\n      \n      case 'execution_aborted':\n        console.log('❌ Execution aborted');\n        stopExecutionTimer();\n        \n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_COMPLETED,\n          payload: true,\n        });\n        dispatch({\n          type: ACTION_TYPES.UPDATE_EXECUTION_STATUS,\n          payload: 'aborted',\n        });\n        \n        // Clean up ALL recovery state\n        setOriginalExecutionPlan(null);\n        setRecoveryExecutionId(null);\n        setIsRecoveryAnalyzing(false);\n        setRecoveryMetadata(null);\n        \n        message.error('Execution was aborted');\n        break;\n      \n      // Plan-level recovery messages\n      case 'plan_recovery_analyzing':\n        setIsRecoveryAnalyzing(true); // Show loading state\n        updateExecutionLog({\n          type: 'warning',\n          message: data.message || `Plan failed at step ${data.failedStepIndex + 1}. AI is analyzing recovery options...`,\n          stepId: data.failedStepId,\n        });\n        break;\n        \n      case 'plan_recovery_request':\n        // Show recovery plan as next steps for user confirmation\n        showRecoveryPlan(data);\n        break;\n        \n      case 'plan_recovery_executing':\n        console.log('✅ Backend started executing recovery plan');\n        console.log('📋 Recovery execution data:', {\n          executionId: data.executionId,\n          action: data.action,\n          totalSteps: data.totalSteps\n        });\n        \n        setIsRecoveryAnalyzing(false);\n        \n        // Clear loading state\n        dispatch({\n          type: ACTION_TYPES.SET_LOADING,\n          payload: { key: 'agent', value: false },\n        });\n        \n        // Start execution timer\n        startExecutionTimer();\n        \n        // IMPORTANT: Update currentExecution with recovery executionId from backend\n        // This ensures step updates will match the correct execution\n        dispatch({\n          type: ACTION_TYPES.SET_CURRENT_EXECUTION,\n          payload: { \n            status: 'running', \n            executionId: data.executionId,\n            isRecovery: true \n          },\n        });\n        \n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_COMPLETED,\n          payload: false,\n        });\n        \n        // Clear recovery executionId (we don't need it anymore)\n        setRecoveryExecutionId(null);\n        \n        message.success('Executing recovery plan...');\n        \n        updateExecutionLog({\n          type: 'info',\n          message: `Recovery plan execution started: ${data.action || 'Executing recovery steps'}`,\n          stepId: null,\n        });\n        break;\n        \n      case 'plan_recovery_completed':\n        console.log('✅ Recovery completed successfully');\n        setIsRecoveryAnalyzing(false);\n        message.success('Recovery completed - continuing execution');\n        break;\n        \n      case 'plan_recovery_failed':\n        console.error('❌ Recovery failed');\n        setIsRecoveryAnalyzing(false);\n        stopExecutionTimer();\n        \n        dispatch({\n          type: ACTION_TYPES.UPDATE_EXECUTION_STATUS,\n          payload: 'failed',\n        });\n        \n        setRecoveryExecutionId(null);\n        message.error('Recovery failed');\n        break;\n      \n      default:\n        break;\n    }\n  }, [dispatch, startExecutionTimer, stopExecutionTimer, updateStepStatus, updateExecutionProgress, updateExecutionLog, showRecoveryPlan, autoScroll, executionPlanComponentRef]);\n\n  // Setup direct WebSocket message handler\n  useEffect(() => {\n    const { websocket } = state;\n    if (!websocket) {\n      return;\n    }\n    \n    const messageHandler = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        handleAIAgentWebSocketMessage(data);\n      } catch (error) {\n        console.error('AIAgentPage: Failed to parse WebSocket message:', error);\n      }\n    };\n\n    websocket.addEventListener('message', messageHandler);\n\n    // Cleanup when component unmounts or WebSocket changes\n    return () => {\n      websocket.removeEventListener('message', messageHandler);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.websocket, handleAIAgentWebSocketMessage]);\n\n  // Cleanup timer on unmount\n  useEffect(() => {\n    return () => {\n      if (executionTimer) {\n        clearInterval(executionTimer);\n      }\n    };\n  }, [executionTimer]);\n\n  const handleProcessRequest = async () => {\n    if (!request.trim()) {\n      message.warning('Please enter a request');\n      return;\n    }\n\n    // Check backend availability before processing\n    if (!backendAvailable) {\n      message.error({\n        content: (\n          <div>\n            <div style={{ fontWeight: 600, marginBottom: 4 }}>Backend Server Not Available</div>\n            <div style={{ fontSize: 13 }}>\n              The backend server (http://localhost:8080) is not responding.\n            </div>\n            <div style={{ fontSize: 12, marginTop: 8, color: '#666' }}>\n              Please ensure the backend server is running and try again.\n            </div>\n          </div>\n        ),\n        duration: 6,\n      });\n      \n      return;\n    }\n\n    console.log('🆕 New request submitted - resetting ALL state');\n    \n    // RESET ALL STATE when starting new request\n    dispatch({\n      type: ACTION_TYPES.CLEAR_AGENT_RESPONSE,\n    });\n    stopExecutionTimer();\n    \n    // Clear ALL recovery state\n    setOriginalExecutionPlan(null);\n    setRecoveryExecutionId(null);\n    setIsRecoveryAnalyzing(false);\n    setRecoveryMetadata(null);\n\n    dispatch({\n      type: ACTION_TYPES.SET_LOADING,\n      payload: { key: 'agent', value: true },\n    });\n\n    try {\n      const response = await apiService.processAgentRequest(request, dryRun);\n      \n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_RESPONSE,\n        payload: response,\n      });\n      \n      // If there's an execution plan, display it\n      if (response.executionPlan && response.executionPlan.length > 0) {\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_PLAN,\n          payload: response.executionPlan,\n        });\n      }\n      \n      dispatch({\n        type: ACTION_TYPES.SET_STATUS_MESSAGE,\n        payload: 'Request processed successfully',\n      });\n      \n      // Backend is working, ensure status is updated\n      setBackendAvailable(true);\n    } catch (error) {\n      console.error('Agent request failed:', error);\n      \n      // Clear any previous response on error\n      dispatch({\n        type: ACTION_TYPES.CLEAR_AGENT_RESPONSE,\n      });\n      \n      // Provide user-friendly error messages\n      let errorMessage = 'Failed to process request';\n      let isConnectionError = false;\n      \n      if (error.status === 500) {\n        errorMessage = 'Server error occurred. Please try again or check with your administrator.';\n      } else if (error.status === 400) {\n        errorMessage = error.message || 'Invalid request. Please check your input and try again.';\n      } else if (error.status === 401) {\n        errorMessage = 'Authentication required. Please log in and try again.';\n      } else if (error.status === 403) {\n        errorMessage = 'You do not have permission to perform this action.';\n      } else if (error.status === 404) {\n        errorMessage = 'Service not found. Please check your configuration.';\n      } else if (error.status === 429) {\n        errorMessage = 'Too many requests. Please wait a moment and try again.';\n      } else if (error.message && error.message !== 'Failed to fetch') {\n        errorMessage = error.message;\n      } else if (error.message === 'Failed to fetch') {\n        isConnectionError = true;\n        errorMessage = 'Unable to connect to backend server. The server may not be running.';\n        setBackendAvailable(false); // Update backend status\n      }\n      \n      if (isConnectionError) {\n        message.error({\n          content: (\n            <div>\n              <div style={{ fontWeight: 600, marginBottom: 4 }}>Connection Failed</div>\n              <div style={{ fontSize: 13 }}>{errorMessage}</div>\n              <div style={{ fontSize: 12, marginTop: 8, color: '#666' }}>\n                Make sure the backend server is running on port 8080 and try again.\n              </div>\n            </div>\n          ),\n          duration: 6,\n        });\n      } else {\n        message.error(errorMessage);\n      }\n      \n      dispatch({\n        type: ACTION_TYPES.SET_STATUS_MESSAGE,\n        payload: `Error: ${errorMessage}`,\n      });\n    } finally {\n      dispatch({\n        type: ACTION_TYPES.SET_LOADING,\n        payload: { key: 'agent', value: false },\n      });\n    }\n  };\n\n  const handleConfirmExecution = async () => {\n    console.log('🟢 ========================================');\n    console.log('🟢 ORIGINAL PLAN CONFIRMATION');\n    console.log('🟢 User clicked \"Confirm & Execute\" on ORIGINAL plan');\n    console.log('🟢 This WILL call API: /agent/execute-with-plan-recovery');\n    console.log('🟢 ========================================');\n    \n    if (!state.agentResponse?.decision?.id) {\n      message.error('No execution plan to confirm');\n      return;\n    }\n\n    dispatch({\n      type: ACTION_TYPES.SET_LOADING,\n      payload: { key: 'agent', value: true },\n    });\n\n    try {\n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_EXECUTION_LOGS,\n        payload: [],\n      });\n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_EXECUTION_PROGRESS,\n        payload: 0,\n      });\n      dispatch({\n        type: ACTION_TYPES.SET_AGENT_EXECUTION_COMPLETED,\n        payload: false,\n      });\n      stopExecutionTimer(); // Clear any existing timer\n      \n      // Reset all step statuses to pending\n      if (state.agentExecutionPlan) {\n        const resetPlan = state.agentExecutionPlan.map(step => ({ ...step, status: 'pending' }));\n        dispatch({\n          type: ACTION_TYPES.SET_AGENT_EXECUTION_PLAN,\n          payload: resetPlan,\n        });\n      }\n      \n      // Pass dry_run flag from stored agentResponse or local state\n      const isDryRun = state.agentResponse?.dry_run ?? dryRun;\n      await apiService.executeConfirmedPlan(state.agentResponse.decision.id, isDryRun);\n      \n      dispatch({\n        type: ACTION_TYPES.SET_CURRENT_EXECUTION,\n        payload: { status: 'running', decisionId: state.agentResponse.decision.id },\n      });\n      \n      // Show different message based on mode\n      if (isDryRun) {\n        message.success('Dry run execution started');\n      } else {\n        message.success('Execution started');\n      }\n      \n      // Scroll to execution plan section after state updates\n      setTimeout(() => {\n        if (executionPlanRef.current) {\n          executionPlanRef.current.scrollIntoView({ \n            behavior: 'smooth', \n            block: 'start',\n            inline: 'nearest'\n          });\n        }\n      }, 200);\n    } catch (error) {\n      console.error('Execution start failed:', error);\n      \n      // Provide user-friendly error messages\n      let errorMessage = 'Failed to start execution';\n      \n      if (error.status === 500) {\n        errorMessage = 'Server error occurred while starting execution. Please try again.';\n      } else if (error.status === 400) {\n        errorMessage = error.message || 'Invalid execution request. Please regenerate the plan and try again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Execution plan not found. Please regenerate the plan and try again.';\n      } else if (error.status === 409) {\n        errorMessage = 'Another execution is already in progress. Please wait for it to complete.';\n      } else if (error.message && error.message !== 'Failed to fetch') {\n        errorMessage = error.message;\n      } else if (error.message === 'Failed to fetch') {\n        errorMessage = 'Unable to connect to server. Please check your connection and try again.';\n      }\n      \n      message.error(errorMessage);\n      \n      dispatch({\n        type: ACTION_TYPES.SET_STATUS_MESSAGE,\n        payload: `Error: ${errorMessage}`,\n      });\n    } finally {\n      dispatch({\n        type: ACTION_TYPES.SET_LOADING,\n        payload: { key: 'agent', value: false },\n      });\n    }\n  };\n\n  const handleCancelPlan = () => {\n    dispatch({\n      type: ACTION_TYPES.CLEAR_AGENT_RESPONSE,\n    });\n    stopExecutionTimer();\n    message.info('Plan cancelled');\n  };\n\n  const handleKeyPress = (e) => {\n    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {\n      handleProcessRequest();\n    }\n  };\n\n  const renderExecutionPlan = () => {\n    const logs = Array.isArray(state.agentExecutionLogs) ? state.agentExecutionLogs : [];\n    \n    // SIMPLIFIED: Determine if recovery based on multiple signals\n    // 1. We have a recoveryExecutionId (recovery plan waiting for confirmation)\n    // 2. OR currentExecution has isRecovery flag (backend set it)\n    const isRecoveryPlan = !!recoveryExecutionId || state.currentExecution?.isRecovery;\n    \n    console.log('🔍 renderExecutionPlan check:', {\n      recoveryExecutionId,\n      currentExecutionIsRecovery: state.currentExecution?.isRecovery,\n      isRecoveryPlan,\n      currentExecutionStatus: state.currentExecution?.status\n    });\n    \n    const planTitle = isRecoveryPlan \n      ? 'Recovery Plan' \n      : (dryRun ? 'Execution Plan (Dry Run)' : 'Execution Plan');\n    const buttonText = isRecoveryPlan\n      ? 'Confirm Recovery'\n      : (dryRun ? 'Confirm & Execute (Dry Run)' : 'Confirm & Execute');\n    \n    // SIMPLIFIED: Just check if currently executing\n    const isCurrentlyExecuting = state.currentExecution?.status === 'running';\n    \n    return (\n      <div \n        ref={executionPlanRef}\n        style={{ \n          scrollMarginTop: '100px',\n        }}\n      >\n        {/* Recovery Plan Summary - show above execution plan */}\n        {isRecoveryPlan && recoveryMetadata && (\n          <Card \n            style={{ \n              marginTop: 16, \n              marginBottom: 8,\n              background: '#fff7e6',\n              border: '1px solid #ffa940'\n            }}\n          >\n            <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n              <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n                <span style={{ fontSize: 16, fontWeight: 600 }}>🔧 Recovery Strategy</span>\n              </div>\n              \n              {recoveryMetadata.reasoning && (\n                <Text style={{ fontSize: 13, color: '#595959' }}>\n                  {recoveryMetadata.reasoning}\n                </Text>\n              )}\n              \n              <div style={{ \n                display: 'flex', \n                gap: 16, \n                flexWrap: 'wrap',\n                marginTop: 8,\n                padding: '8px 12px',\n                background: '#fff',\n                borderRadius: 4,\n                border: '1px solid #ffd591'\n              }}>\n                <Text style={{ fontSize: 12 }}>\n                  <strong>Completed:</strong> {recoveryMetadata.preservedCount} steps ✓\n                </Text>\n                <Text style={{ fontSize: 12 }}>\n                  <strong>Recovery:</strong> {recoveryMetadata.newStepsCount} new steps 🔧\n                </Text>\n                <Text style={{ fontSize: 12 }}>\n                  <strong>Total:</strong> {recoveryMetadata.totalSteps} steps\n                </Text>\n                <Text style={{ fontSize: 12 }}>\n                  <strong>Success:</strong> {Math.round((recoveryMetadata.successProbability || 0) * 100)}%\n                </Text>\n                <Text style={{ fontSize: 12 }}>\n                  <strong>Risk:</strong> {recoveryMetadata.riskLevel}\n                </Text>\n                <Text style={{ fontSize: 12 }}>\n                  <strong>Duration:</strong> ~{recoveryMetadata.estimatedDuration}\n                </Text>\n              </div>\n              \n              {recoveryMetadata.recoveryNotes && (\n                <Alert\n                  message={recoveryMetadata.recoveryNotes}\n                  type=\"info\"\n                  showIcon\n                  style={{ marginTop: 8, fontSize: 12 }}\n                />\n              )}\n            </Space>\n          </Card>\n        )}\n        \n        <ExecutionPlan\n          ref={executionPlanComponentRef}\n          steps={state.agentExecutionPlan}\n          logs={logs}\n          isExecuting={isCurrentlyExecuting}\n          executionProgress={state.agentExecutionProgress}\n          executionElapsed={state.agentExecutionElapsed}\n          executionCompleted={state.agentExecutionCompleted}\n          onConfirm={isRecoveryPlan ? handleConfirmRecovery : handleConfirmExecution}\n          onCancel={isRecoveryPlan ? handleCancelRecovery : handleCancelPlan}\n          showConfirmButton={true}\n          showCancelButton={true}\n          confirmButtonText={buttonText}\n          title={planTitle}\n          isRecoveryAnalyzing={isRecoveryAnalyzing}\n        />\n      </div>\n    );\n  };\n\n  const renderAgentResponse = () => {\n    if (!state.agentResponse || state.loading.agent) return null;\n\n    return (\n      <Card title={<><RobotOutlined /> AI Agent Response</>} style={{ marginTop: 16 }}>\n        <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n          <Alert\n            message=\"Request Processed\"\n            description={\n              <div>\n                <Paragraph><strong>Request:</strong> {state.agentResponse.request}</Paragraph>\n                <Paragraph><strong>Mode:</strong> {state.agentResponse.mode === 'demo' ? 'Demo Mode' : (state.agentResponse.dry_run ? 'Dry Run' : 'Live Execution')}</Paragraph>\n                <Paragraph><strong>Confidence:</strong> {(state.agentResponse.confidence * 100).toFixed(1)}%</Paragraph>\n              </div>\n            }\n            type=\"info\"\n            showIcon\n          />\n\n          {state.agentResponse.mode === 'demo' && (\n            <Card size=\"small\" title=\"Response\">\n              <Text>{state.agentResponse.response}</Text>\n            </Card>\n          )}\n\n          {state.agentResponse.mode === 'live' && (\n            <>\n              <Card size=\"small\" title=\"Action\">\n                <Text>{state.agentResponse.action}</Text>\n              </Card>\n              \n              <Card size=\"small\" title=\"Reasoning\">\n                <div className=\"reasoning-content\">\n                  <ReactMarkdown>{state.agentResponse.reasoning}</ReactMarkdown>\n                </div>\n              </Card>\n            </>\n          )}\n\n          {state.agentExecutionPlan && renderExecutionPlan()}\n        </Space>\n      </Card>\n    );\n  };\n\n  return (\n    <div style={{ maxWidth: 1200, margin: '0 auto' }}>\n      <PageHeader\n        title=\"Single Prompt Execute\"\n        description=\"Describe what you want to do with your infrastructure in natural language.\"\n      />\n\n      {/* Status Message - hide when backend is offline */}\n      {backendAvailable && (\n        <StatusAlert \n          message={state.statusMessage} \n          type={state.statusMessage?.startsWith('Error:') ? 'error' : undefined}\n          showIcon={state.statusMessage?.startsWith('Error:')}\n        />\n      )}\n\n      {/* Backend Offline Warning */}\n      {!backendAvailable && (\n        <Alert\n          message=\"Backend Server Not Available\"\n          description={\n            <div>\n              <p style={{ marginBottom: 8 }}>\n                The backend server (http://localhost:8080) is not responding. \n                Please start the backend server to use this application.\n              </p>\n              <div style={{ fontSize: 12, color: '#666' }}>\n                <strong>To start the backend:</strong>\n                <ol style={{ marginTop: 8, marginBottom: 8, paddingLeft: 20 }}>\n                  <li>Navigate to your backend project directory</li>\n                  <li>Run: <code style={{ background: '#f5f5f5', padding: '2px 6px' }}>go run cmd/server/main.go</code></li>\n                  <li>Wait for \"Server starting on :8080\" message</li>\n                  <li>The connection will automatically reconnect</li>\n                </ol>\n              </div>\n            </div>\n          }\n          type=\"warning\"\n          showIcon\n          icon={<ApiOutlined />}\n          style={{ marginBottom: 16 }}\n        />\n      )}\n\n      <Card>\n        <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n          <TextArea\n            placeholder=\"Example: Create a new VPC with 2 subnets and an auto-scaling group with 3 EC2 instances running nginx\"\n            value={request}\n            onChange={(e) => setRequest(e.target.value)}\n            onKeyDown={handleKeyPress}\n            rows={4}\n            style={{ fontSize: 16 }}\n          />\n          \n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <Space direction=\"horizontal\" size=\"large\">\n              <Checkbox \n                checked={dryRun} \n                onChange={(e) => setDryRun(e.target.checked)}\n              >\n                Dry Run Mode\n              </Checkbox>\n              \n              <Checkbox \n                checked={autoScroll} \n                onChange={(e) => setAutoScroll(e.target.checked)}\n              >\n                Auto-scroll to steps\n              </Checkbox>\n              \n            </Space>\n            \n            <Tooltip \n              title={\n                !backendAvailable \n                  ? 'Backend server is not available. Please start it first.' \n                  : !request.trim() \n                  ? 'Please enter a request' \n                  : 'Click to process your request'\n              }\n            >\n              <Button\n                type=\"primary\"\n                size=\"large\"\n                icon={<SendOutlined />}\n                onClick={handleProcessRequest}\n                loading={state.loading.agent}\n                disabled={!request.trim() || !backendAvailable}\n                danger={!backendAvailable}\n              >\n                Process Request\n              </Button>\n            </Tooltip>\n          </div>\n          \n          <div style={{ fontSize: 12, color: '#666' }}>\n            Tip: Press Ctrl+Enter (Cmd+Enter on Mac) to quickly process your request\n          </div>\n        </Space>\n      </Card>\n\n      {renderAgentResponse()}\n\n    </div>\n  );\n};\n\nexport default AIAgentPage;"],"names":["TextArea","Input","Text","Paragraph","Typography","AIAgentPage","_state$statusMessage","_state$statusMessage2","state","dispatch","useApp","request","setRequest","useState","dryRun","setDryRun","autoScroll","setAutoScroll","executionTimer","setExecutionTimer","backendAvailable","setBackendAvailable","isRecoveryAnalyzing","setIsRecoveryAnalyzing","recoveryExecutionId","setRecoveryExecutionId","originalExecutionPlan","setOriginalExecutionPlan","recoveryMetadata","setRecoveryMetadata","executionPlanRef","useRef","executionPlanComponentRef","useEffect","cleanup","setupErrorSuppression","checkWebSocketConnection","websocket","isConnected","readyState","WebSocket","OPEN","console","log","ws","handleOpen","handleClose","handleError","addEventListener","removeEventListener","startExecutionTimer","useCallback","startTime","Date","timer","setInterval","now","elapsed","Math","floor","minutes","seconds","timeString","concat","toString","padStart","type","ACTION_TYPES","SET_AGENT_EXECUTION_ELAPSED","payload","stopExecutionTimer","clearInterval","updateStepStatus","stepId","status","UPDATE_STEP_STATUS","updateExecutionProgress","UPDATE_EXECUTION_PROGRESS","updateExecutionLog","logData","ADD_AGENT_EXECUTION_LOG","_objectSpread","timestamp","showRecoveryPlan","data","executionId","strategy","failureContext","message","error","executionPlan","length","agentExecutionPlan","preservedCount","newStepsCount","totalSteps","recoveryNotes","reasoning","successProbability","riskLevel","estimatedDuration","attemptNumber","recoverySteps","map","step","index","isRecoveryStep","id","name","action","resource_type","resourceId","mcpTool","description","toolParameters","parameters","dependsOn","SET_AGENT_EXECUTION_PLAN","SET_CURRENT_EXECUTION","isRecovery","attemptMsg","info","handleConfirmRecovery","async","SET_LOADING","key","value","SET_AGENT_EXECUTION_LOGS","SET_AGENT_EXECUTION_PROGRESS","SET_AGENT_EXECUTION_COMPLETED","resetPlan","Error","send","JSON","stringify","approved","toISOString","success","setTimeout","current","scrollIntoView","behavior","block","inline","handleCancelRecovery","UPDATE_EXECUTION_STATUS","handleAIAgentWebSocketMessage","hasStrategy","hasFailureContext","keys","Object","SET_STATUS_MESSAGE","scrollToStep","REFRESH_INFRASTRUCTURE","failedStepIndex","failedStepId","messageHandler","event","parse","handleProcessRequest","trim","CLEAR_AGENT_RESPONSE","response","apiService","processAgentRequest","SET_AGENT_RESPONSE","errorMessage","isConnectionError","content","_jsxs","children","_jsx","style","fontWeight","marginBottom","fontSize","marginTop","color","duration","warning","handleConfirmExecution","_state$agentResponse","_state$agentResponse$","agentResponse","decision","_state$agentResponse$2","_state$agentResponse2","isDryRun","dry_run","executeConfirmedPlan","decisionId","handleCancelPlan","renderExecutionPlan","_state$currentExecuti","_state$currentExecuti2","_state$currentExecuti3","_state$currentExecuti4","logs","Array","isArray","agentExecutionLogs","isRecoveryPlan","currentExecution","currentExecutionIsRecovery","currentExecutionStatus","planTitle","buttonText","isCurrentlyExecuting","ref","scrollMarginTop","Card","background","border","Space","direction","size","width","display","alignItems","gap","flexWrap","padding","borderRadius","round","Alert","showIcon","ExecutionPlan","steps","isExecuting","executionProgress","agentExecutionProgress","executionElapsed","agentExecutionElapsed","executionCompleted","agentExecutionCompleted","onConfirm","onCancel","showConfirmButton","showCancelButton","confirmButtonText","title","maxWidth","margin","PageHeader","StatusAlert","statusMessage","startsWith","undefined","paddingLeft","icon","ApiOutlined","placeholder","onChange","e","target","onKeyDown","ctrlKey","metaKey","rows","justifyContent","Checkbox","checked","Tooltip","Button","SendOutlined","onClick","loading","agent","disabled","danger","_Fragment","RobotOutlined","mode","confidence","toFixed","className","ReactMarkdown"],"sourceRoot":""}