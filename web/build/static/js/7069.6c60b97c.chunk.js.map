{"version":3,"file":"static/js/7069.6c60b97c.chunk.js","mappings":"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","sources":["utils/safeFetch.js","services/mockDataService.js","services/apiService.js","components/common/StatusAlert.js","components/layout/PageHeader.js","components/execution/ExecutionStep.js","components/execution/InlineRecovery.js","components/execution/ExecutionPlan.js","components/execution/ExecutionLogs.js","components/infrastructure/ResourceCard.js","components/infrastructure/StateOverview.js","components/infrastructure/ResourcesByCategory.js","components/infrastructure/StateHeader.js","components/graph/MermaidDiagram.js","components/graph/GraphStatistics.js","components/graph/BottlenecksList.js"],"sourcesContent":["/**\n * Safe fetch utility that never throws uncaught errors\n * Uses XMLHttpRequest to avoid browser extension interference\n */\n\n/**\n * Performs a safe HTTP request using XMLHttpRequest\n * @param {string} url - The URL to fetch\n * @param {object} options - Request options (method, headers, body)\n * @param {number} timeout - Timeout in milliseconds (default: 5000)\n * @returns {Promise<{ok: boolean, status: number, statusText: string, data: any, error: string|null}>}\n */\nexport const safeFetch = (url, options = {}, timeout = 5000) => {\n  return new Promise((resolve) => {\n    const xhr = new XMLHttpRequest();\n    const method = options.method || 'GET';\n    \n    const timeoutId = setTimeout(() => {\n      xhr.abort();\n      console.warn(`⚠️ Request timeout: ${url}`);\n      resolve({\n        ok: false,\n        status: 0,\n        statusText: 'Timeout',\n        data: null,\n        error: 'Request timeout',\n      });\n    }, timeout);\n    \n    xhr.onload = () => {\n      clearTimeout(timeoutId);\n      let data = null;\n      let parseError = null;\n      \n      try {\n        if (xhr.responseText) {\n          data = JSON.parse(xhr.responseText);\n        }\n      } catch (e) {\n        console.warn('Failed to parse response:', e);\n        parseError = 'Failed to parse response';\n      }\n      \n      resolve({\n        ok: xhr.status >= 200 && xhr.status < 300,\n        status: xhr.status,\n        statusText: xhr.statusText,\n        data: data,\n        error: parseError || (xhr.status >= 200 && xhr.status < 300 ? null : xhr.statusText),\n      });\n    };\n    \n    xhr.onerror = () => {\n      clearTimeout(timeoutId);\n      console.warn(`⚠️ Request failed: ${url}`);\n      resolve({\n        ok: false,\n        status: 0,\n        statusText: 'Network Error',\n        data: null,\n        error: 'Network error',\n      });\n    };\n    \n    xhr.onabort = () => {\n      clearTimeout(timeoutId);\n      resolve({\n        ok: false,\n        status: 0,\n        statusText: 'Aborted',\n        data: null,\n        error: 'Request aborted',\n      });\n    };\n    \n    try {\n      xhr.open(method, url, true);\n      \n      // Set headers\n      if (options.headers) {\n        Object.entries(options.headers).forEach(([key, value]) => {\n          xhr.setRequestHeader(key, value);\n        });\n      }\n      \n      // Send request\n      if (options.body) {\n        xhr.send(options.body);\n      } else {\n        xhr.send();\n      }\n    } catch (error) {\n      clearTimeout(timeoutId);\n      console.warn(`❌ Request error: ${url}`, error.message);\n      resolve({\n        ok: false,\n        status: 0,\n        statusText: 'Error',\n        data: null,\n        error: error.message,\n      });\n    }\n  });\n};\n\n/**\n * Helper function to check backend health\n * @param {string} baseURL - The base URL of the API\n * @returns {Promise<boolean>} - Returns true if backend is available\n */\nexport const checkBackendHealth = async (baseURL) => {\n  const result = await safeFetch(`${baseURL}/state`, {\n    method: 'GET',\n    headers: { 'Content-Type': 'application/json' },\n  }, 5000);\n  \n  if (result.ok) {\n    console.log('✅ Backend is available');\n    return true;\n  } else {\n    console.warn('⚠️ Backend is not reachable:', result.error);\n    return false;\n  }\n};\n\n/**\n * Creates error suppression handlers for window events\n * Call the returned cleanup function when component unmounts\n * @returns {Function} Cleanup function to remove event listeners\n */\nexport const setupErrorSuppression = () => {\n  const handleError = (event) => {\n    if (event.message && event.message.includes('Failed to fetch')) {\n      const stack = event.error?.stack || '';\n      if (stack.includes('/state') || \n          stack.includes('checkBackendHealth') || \n          stack.includes('safeFetch') ||\n          !stack) {\n        console.warn('🔇 Suppressed fetch error');\n        event.preventDefault();\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n        return false;\n      }\n    }\n  };\n  \n  const handleUnhandledRejection = (event) => {\n    const errorMsg = event.reason?.message || event.reason?.toString() || '';\n    if (errorMsg.includes('Failed to fetch') || errorMsg.includes('fetch')) {\n      const stack = event.reason?.stack || '';\n      if (stack.includes('/state') || \n          stack.includes('checkBackendHealth') || \n          stack.includes('safeFetch') ||\n          errorMsg.includes('/state') ||\n          !stack) {\n        console.warn('🔇 Suppressed promise rejection');\n        event.preventDefault();\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n        return false;\n      }\n    }\n  };\n  \n  window.addEventListener('error', handleError, true);\n  window.addEventListener('unhandledrejection', handleUnhandledRejection, true);\n  \n  // Return cleanup function\n  return () => {\n    window.removeEventListener('error', handleError, true);\n    window.removeEventListener('unhandledrejection', handleUnhandledRejection, true);\n  };\n};\n","// Mock data service for development/testing\nclass MockDataService {\n  constructor() {\n    this.mockEnabled = process.env.REACT_APP_ENABLE_FEATURE_MOCK === 'true';\n    console.log('MockDataService initialized. Mock enabled:', this.mockEnabled);\n  }\n\n  // Simulate API delay\n  async delay(ms = 500) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // Load mock data from public/mocks folder\n  async loadMockData(filename) {\n    try {\n      const response = await fetch(`/mocks/${filename}`);\n      if (!response.ok) {\n        throw new Error(`Failed to load mock data: ${filename}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error loading mock data:', error);\n      throw error;\n    }\n  }\n\n  // Mock: Get dependency graph\n  async getDependencyGraph(source = null) {\n    await this.delay(800); // Simulate network delay\n\n    try {\n      let mockFile;\n      \n      if (source === 'live') {\n        // Load live discovery mock data\n        mockFile = 'mock-discovery-live.json';\n      } else {\n        // Load default graph mock data (generate-graph button)\n        mockFile = 'mock-generate-graph.json';\n      }\n\n      const data = await this.loadMockData(mockFile);\n      \n      // Transform the mock data to match expected API response format\n      return this.transformGraphData(data);\n    } catch (error) {\n      console.error('Mock getDependencyGraph error:', error);\n      throw new Error(`Failed to load mock dependency graph: ${error.message}`);\n    }\n  }\n\n  // Transform mock graph data to match API response format\n  transformGraphData(mockData) {\n    // Real API response format includes both mermaid syntax and graph structure\n    // We should return the data as-is if it already has the expected format\n    if (mockData.mermaid && mockData.graph) {\n      return {\n        mermaid: mockData.mermaid,\n        graph: mockData.graph, // Include graph with nodes metadata\n        timestamp: mockData.timestamp || new Date().toISOString(),\n        metadata: mockData.metadata || this.generateDefaultMetadata(mockData),\n        source: mockData.source || 'unknown',\n        format: mockData.format || 'mermaid',\n      };\n    }\n\n    // Legacy: If mock data only has mermaid syntax (old format)\n    if (mockData.mermaid) {\n      return {\n        mermaid: mockData.mermaid,\n        graph: null, // No graph metadata available\n        timestamp: mockData.timestamp || new Date().toISOString(),\n        metadata: mockData.metadata || this.generateDefaultMetadata(mockData),\n      };\n    }\n\n    // Legacy: If mock data has graph structure but no mermaid (shouldn't happen in real API)\n    if (mockData.graph && mockData.graph.edges) {\n      const mermaidSyntax = this.convertGraphToMermaid(mockData.graph);\n      return {\n        mermaid: mermaidSyntax,\n        graph: mockData.graph,\n        timestamp: new Date().toISOString(),\n        metadata: this.generateMetadataFromGraph(mockData.graph),\n      };\n    }\n\n    throw new Error('Invalid mock data format');\n  }\n\n  // Convert graph edges/nodes to Mermaid syntax\n  convertGraphToMermaid(graph) {\n    const lines = ['graph TD'];\n    const nodes = new Set();\n    const nodeTypes = {};\n\n    // Collect all nodes and their types\n    graph.edges.forEach(edge => {\n      nodes.add(edge.source);\n      nodes.add(edge.target);\n      \n      // Detect node types and store with SANITIZED IDs (for Mermaid output)\n      const sanitizedSource = edge.source.replace(/[^a-zA-Z0-9_]/g, '_');\n      const sanitizedTarget = edge.target.replace(/[^a-zA-Z0-9_]/g, '_');\n      \n      // Detect type for source\n      if (edge.source.startsWith('vpc-')) nodeTypes[sanitizedSource] = 'vpc';\n      else if (edge.source.startsWith('subnet-')) nodeTypes[sanitizedSource] = 'subnet';\n      else if (edge.source.startsWith('sg-')) nodeTypes[sanitizedSource] = 'sg';\n      else if (edge.source.startsWith('i-')) nodeTypes[sanitizedSource] = 'ec2';\n      else if (edge.source.startsWith('lt-')) nodeTypes[sanitizedSource] = 'lt';\n      else if (edge.source.startsWith('nat-')) nodeTypes[sanitizedSource] = 'natgw';\n      else if (edge.source.includes('targetgroup')) nodeTypes[sanitizedSource] = 'tg';\n      else if (edge.source.includes('loadbalancer') || edge.source.includes('app/') || edge.source.includes('net/')) nodeTypes[sanitizedSource] = 'lb';\n      else if (edge.source.includes('database') || edge.source.includes('cluster')) nodeTypes[sanitizedSource] = 'rds';\n      \n      // Detect type for target\n      if (edge.target.startsWith('vpc-')) nodeTypes[sanitizedTarget] = 'vpc';\n      else if (edge.target.startsWith('subnet-')) nodeTypes[sanitizedTarget] = 'subnet';\n      else if (edge.target.startsWith('sg-')) nodeTypes[sanitizedTarget] = 'sg';\n      else if (edge.target.startsWith('i-')) nodeTypes[sanitizedTarget] = 'ec2';\n      else if (edge.target.startsWith('lt-')) nodeTypes[sanitizedTarget] = 'lt';\n      else if (edge.target.startsWith('nat-')) nodeTypes[sanitizedTarget] = 'natgw';\n      else if (edge.target.includes('targetgroup')) nodeTypes[sanitizedTarget] = 'tg';\n      else if (edge.target.includes('loadbalancer') || edge.target.includes('app/') || edge.target.includes('net/')) nodeTypes[sanitizedTarget] = 'lb';\n      else if (edge.target.includes('database') || edge.target.includes('cluster')) nodeTypes[sanitizedTarget] = 'rds';\n    });\n\n    // Add blank line\n    lines.push('');\n\n    // Define nodes with their types\n    nodes.forEach(node => {\n      const type = nodeTypes[node] || 'default';\n      const sanitizedId = node.replace(/[^a-zA-Z0-9_]/g, '_');\n      lines.push(`    ${sanitizedId}[\"${node}\"]:::${type}`);\n    });\n\n    // Add blank line\n    lines.push('');\n\n    // Add edges\n    graph.edges.forEach(edge => {\n      const sourceId = edge.source.replace(/[^a-zA-Z0-9_]/g, '_');\n      const targetId = edge.target.replace(/[^a-zA-Z0-9_]/g, '_');\n      lines.push(`    ${sourceId} --> ${targetId}`);\n    });\n\n    // Add blank line\n    lines.push('');\n\n    // Add class definitions with colors\n    lines.push('    classDef vpc fill:#e1f5fe');\n    lines.push('    classDef subnet fill:#b3e5fc');\n    lines.push('    classDef ec2 fill:#fff3e0');\n    lines.push('    classDef sg fill:#f3e5f5');\n    lines.push('    classDef lb fill:#e8f5e8');\n    lines.push('    classDef asg fill:#fce4ec');\n    lines.push('    classDef natgw fill:#e0f2f1');\n    lines.push('    classDef tg fill:#f1f8e9');\n    lines.push('    classDef rds fill:#fff9c4');\n    lines.push('    classDef lt fill:#fce4ec');\n    lines.push('    classDef default fill:#f5f5f5');\n\n    return lines.join('\\n');\n  }\n\n  // Generate metadata from graph structure\n  generateMetadataFromGraph(graph) {\n    const nodeTypes = {};\n    const nodes = new Set();\n\n    graph.edges.forEach(edge => {\n      nodes.add(edge.source);\n      nodes.add(edge.target);\n      \n      // Count node types\n      const sourceType = this.detectNodeType(edge.source);\n      const targetType = this.detectNodeType(edge.target);\n      \n      nodeTypes[sourceType] = (nodeTypes[sourceType] || 0) + 1;\n      nodeTypes[targetType] = (nodeTypes[targetType] || 0) + 1;\n    });\n\n    return {\n      nodeCount: nodes.size,\n      edgeCount: graph.edges.length,\n      resourceTypeCounts: nodeTypes,\n      bottlenecks: this.generateMockBottlenecks(nodes),\n    };\n  }\n\n  // Detect node type from ID\n  detectNodeType(nodeId) {\n    if (nodeId.startsWith('vpc-')) return 'VPC';\n    if (nodeId.startsWith('subnet-')) return 'Subnet';\n    if (nodeId.startsWith('sg-')) return 'Security Group';\n    if (nodeId.startsWith('i-')) return 'EC2 Instance';\n    if (nodeId.startsWith('lt-')) return 'Launch Template';\n    if (nodeId.includes('targetgroup')) return 'Target Group';\n    if (nodeId.includes('loadbalancer')) return 'Load Balancer';\n    return 'Other';\n  }\n\n  // Generate mock bottlenecks\n  generateMockBottlenecks(nodes) {\n    const bottlenecks = [];\n    let count = 0;\n    \n    // Add a few mock bottlenecks\n    nodes.forEach(node => {\n      if (count >= 3) return; // Limit to 3 bottlenecks\n      \n      if (node.startsWith('vpc-')) {\n        bottlenecks.push({\n          resource: node,\n          dependents: Math.floor(Math.random() * 20) + 10,\n          impact: 'high',\n          reason: 'Multiple resources depend on this VPC',\n        });\n        count++;\n      }\n    });\n\n    return bottlenecks;\n  }\n\n  // Generate default metadata\n  generateDefaultMetadata(mockData) {\n    return {\n      nodeCount: 0,\n      edgeCount: 0,\n      resourceTypeCounts: {},\n      bottlenecks: [],\n    };\n  }\n}\n\nconst mockDataService = new MockDataService();\nexport default mockDataService;\n","// API service for centralized HTTP requests\nimport mockDataService from './mockDataService';\nimport { safeFetch } from '../utils/safeFetch';\n\nclass ApiService {\n  constructor() {\n    // Load API base URL from environment variable, fallback to relative path\n    this.baseURL = process.env.REACT_APP_API_BASE_URL || '/api';\n    \n    // Remove trailing slash if present\n    this.baseURL = this.baseURL.replace(/\\/$/, '');\n    \n    // Check if mock mode is enabled\n    this.mockEnabled = process.env.REACT_APP_ENABLE_FEATURE_MOCK === 'true';\n    \n    console.log('ApiService initialized with baseURL:', this.baseURL);\n    console.log('Mock mode enabled:', this.mockEnabled);\n  }\n\n  // Generic API call method with error handling\n  async call(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        // Try to get error details from response body\n        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        let errorDetails = null;\n        \n        try {\n          const errorText = await response.text();\n          if (errorText) {\n            try {\n              const errorData = JSON.parse(errorText);\n              if (errorData.error) {\n                errorMessage = errorData.error;\n              } else if (errorData.message) {\n                errorMessage = errorData.message;\n              } else if (errorData.detail) {\n                errorMessage = errorData.detail;\n              }\n              errorDetails = errorData;\n            } catch (jsonError) {\n              // If response isn't JSON, use the text as error message\n              if (errorText.length < 200) { // Only use short error messages\n                errorMessage = errorText;\n              }\n            }\n          }\n        } catch (readError) {\n          // If we can't read the response body, stick with the status message\n          console.warn('Could not read error response body:', readError);\n        }\n        \n        const error = new Error(errorMessage);\n        error.status = response.status;\n        error.statusText = response.statusText;\n        error.details = errorDetails;\n        throw error;\n      }\n\n      const responseText = await response.text();\n      \n      if (!responseText) {\n        throw new Error('Empty response from server');\n      }\n\n      try {\n        return JSON.parse(responseText);\n      } catch (jsonError) {\n        console.error('JSON parse error:', jsonError);\n        console.error('Response text:', responseText);\n        throw new Error(`Invalid JSON response: ${jsonError.message}`);\n      }\n    } catch (error) {\n      console.error(`API call failed for ${endpoint}:`, error);\n      \n      // Enhance error messages for common network issues\n      if (error.name === 'TypeError' && error.message === 'Failed to fetch') {\n        const enhancedError = new Error('Unable to connect to server. Please check your internet connection and try again.');\n        enhancedError.originalError = error;\n        enhancedError.isNetworkError = true;\n        throw enhancedError;\n      }\n      \n      if (error.name === 'AbortError') {\n        const enhancedError = new Error('Request timed out. Please try again.');\n        enhancedError.originalError = error;\n        enhancedError.isTimeoutError = true;\n        throw enhancedError;\n      }\n      \n      throw error;\n    }\n  }\n\n  // Safe API call method that uses XMLHttpRequest for GET requests to avoid extension interference\n  async safeCall(endpoint, options = {}) {\n    const method = options.method || 'GET';\n    \n    // For GET requests, use safeFetch to avoid extension interference\n    if (method === 'GET') {\n      const url = `${this.baseURL}${endpoint}`;\n      const result = await safeFetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers,\n        },\n      });\n      \n      if (!result.ok) {\n        const error = new Error(result.error || `HTTP ${result.status}: ${result.statusText}`);\n        error.status = result.status;\n        error.statusText = result.statusText;\n        error.isNetworkError = result.status === 0;\n        throw error;\n      }\n      \n      return result.data;\n    }\n    \n    // For POST/PUT/DELETE, use the regular fetch-based call method\n    return this.call(endpoint, options);\n  }\n\n  // Agent operations\n  async processAgentRequest(request, dryRun = true) {\n    return this.call('/agent/process', {\n      method: 'POST',\n      body: JSON.stringify({ \n        request, \n        dry_run: dryRun \n      }),\n    });\n  }\n\n  // Execute confirmed plan with plan-level recovery (NEW)\n  async executeConfirmedPlan(decisionId, dryRun = false) {\n    return this.call('/agent/execute-with-plan-recovery', {\n      method: 'POST',\n      body: JSON.stringify({ \n        decisionId: decisionId,\n        dry_run: dryRun \n      }),\n    });\n  }\n\n  // State management operations\n  async getInfrastructureState(discoveredOnly = false) {\n    const params = discoveredOnly ? '?discovered_only=true' : '';\n    return this.safeCall(`/state${params}`);\n  }\n\n  async discoverInfrastructure() {\n    return this.call('/discover', {\n      method: 'POST',\n    });\n  }\n\n  async exportState(includeDiscovered = false) {\n    const params = includeDiscovered ? '?include_discovered=true' : '';\n    const response = await fetch(`${this.baseURL}/export${params}`);\n    \n    if (!response.ok) {\n      throw new Error(`Export failed: ${response.statusText}`);\n    }\n    \n    return response.blob();\n  }\n\n  // Graph operations\n  async getDependencyGraph(source = null) {\n    // Use mock data if enabled\n    if (this.mockEnabled) {\n      console.log('Using mock data for getDependencyGraph, source:', source);\n      return mockDataService.getDependencyGraph(source);\n    }\n    \n    // API now only returns mermaid format\n    // source can be 'live' for live discovery or null for default\n    const params = source ? `?source=${source}` : '';\n    return this.call(`/graph${params}`);\n  }\n\n  // Conflict detection\n  async detectConflicts(autoResolve = false) {\n    const params = new URLSearchParams({\n      auto_resolve: autoResolve.toString(),\n    });\n    \n    return this.call(`/conflicts?${params}`);\n  }\n\n  // Deployment planning\n  async generateDeploymentPlan(targetResources = [], includeLevels = true) {\n    const params = new URLSearchParams();\n    \n    if (targetResources.length > 0) {\n      targetResources.forEach(resource => {\n        params.append('target_resources', resource);\n      });\n    }\n    \n    params.set('include_levels', includeLevels.toString());\n    \n    return this.call(`/plan?${params}`);\n  }\n\n  // Utility methods for file operations\n  downloadFile(blob, filename) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }\n\n  getCurrentTimestamp() {\n    return new Date().toISOString().split('T')[0];\n  }\n\n  // Configuration methods\n  getBaseURL() {\n    return this.baseURL;\n  }\n\n  getConfig() {\n    return {\n      baseURL: this.baseURL,\n      wsURL: process.env.REACT_APP_WS_URL,\n      environment: process.env.NODE_ENV || 'development',\n    };\n  }\n}\n\n// Create a singleton instance\nconst apiService = new ApiService();\n\nexport default apiService;","import { Alert } from 'antd';\nimport PropTypes from 'prop-types';\n\n/**\n * Reusable status alert component with consistent styling\n * Automatically determines alert type based on message content\n */\nconst StatusAlert = ({ \n  message, \n  type = 'auto', \n  showIcon = true, \n  closable = false,\n  style = {},\n  ...props \n}) => {\n  // Auto-determine alert type based on message content\n  const getAlertType = () => {\n    if (type !== 'auto') return type;\n    \n    const msg = message.toLowerCase();\n    if (msg.includes('error') || msg.includes('failed') || msg.includes('fail')) {\n      return 'error';\n    } else if (msg.includes('warning') || msg.includes('warn')) {\n      return 'warning';\n    } else if (msg.includes('success') || msg.includes('completed') || msg.includes('processed')) {\n      return 'success';\n    } else if (msg === 'ready') {\n      return 'info';\n    } else {\n      return 'success';\n    }\n  };\n\n  const alertType = getAlertType();\n\n  // Clean up message display - remove \"Error:\" prefix for better UX\n  const displayMessage = typeof message === 'string' && message.startsWith('Error: ') \n    ? message.substring(7) // Remove \"Error: \" prefix\n    : message;\n\n  return (\n    <Alert \n      message={displayMessage} \n      type={alertType}\n      showIcon={showIcon}\n      closable={closable}\n      style={{ \n        borderRadius: 6,\n        fontSize: 14,\n        marginBottom: 16,\n        ...style \n      }}\n      {...props}\n    />\n  );\n};\n\nStatusAlert.propTypes = {\n  message: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  type: PropTypes.oneOf(['auto', 'success', 'info', 'warning', 'error']),\n  showIcon: PropTypes.bool,\n  closable: PropTypes.bool,\n  style: PropTypes.object,\n};\n\nexport default StatusAlert;","import React from 'react';\nimport { Typography } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst { Title, Paragraph } = Typography;\n\n/**\n * Reusable page header component with consistent styling\n * Used across all pages for title and description\n */\nconst PageHeader = ({ \n  title, \n  description, \n  level = 2, \n  extra = null, \n  style = {} \n}) => {\n  return (\n    <div style={{ marginBottom: 24, ...style }}>\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'flex-start',\n        marginBottom: 8 \n      }}>\n        <Title level={level} style={{ margin: 0 }}>\n          {title}\n        </Title>\n        {extra && <div>{extra}</div>}\n      </div>\n      {description && (\n        <Paragraph type=\"secondary\" style={{ margin: 0, fontSize: '1rem' }}>\n          {description}\n        </Paragraph>\n      )}\n    </div>\n  );\n};\n\nPageHeader.propTypes = {\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  description: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  level: PropTypes.oneOf([1, 2, 3, 4, 5]),\n  extra: PropTypes.node,\n  style: PropTypes.object,\n};\n\nexport default PageHeader;","import { useState, useEffect, forwardRef } from 'react';\nimport { Button } from 'antd';\nimport { \n  CheckOutlined, \n  CloseOutlined, \n  ClockCircleOutlined,\n  LoadingOutlined,\n  DownOutlined,\n  UpOutlined,\n  CodeOutlined\n} from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\n/**\n * Individual execution step component with consistent styling\n * Shows step number, content, and status with proper visual hierarchy\n */\nconst ExecutionStep = forwardRef(({ \n  step, \n  index, \n  logs = [],\n  className = '',\n  ...props \n}, ref) => {\n  const [logsExpanded, setLogsExpanded] = useState(false);\n  const [parametersExpanded, setParametersExpanded] = useState(false);\n  \n  const stepStatus = step.status || 'pending';\n\n  // Auto-expand logs on failure or when there are new logs for running steps\n  // Once expanded, keep them expanded (don't auto-collapse)\n  useEffect(() => {\n    if (!logsExpanded) { // Only expand if not already expanded\n      if (stepStatus === 'failed' || \n          stepStatus.includes('recovery') ||\n          (stepStatus === 'running' && logs.length > 0)) {\n        setLogsExpanded(true);\n      }\n    }\n  }, [stepStatus, logs.length, logsExpanded]);\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed': \n        return <CheckOutlined style={{ color: 'white', fontSize: '12px' }} />;\n      case 'failed': \n        return <CloseOutlined style={{ color: 'white', fontSize: '12px' }} />;\n      case 'running': \n        return <LoadingOutlined spin style={{ color: 'white', fontSize: '12px' }} />;\n      case 'recovery-generating':\n        return <LoadingOutlined spin style={{ color: 'white', fontSize: '12px' }} />;\n      case 'recovery-pending':\n        return <ClockCircleOutlined style={{ color: '#212529', fontSize: '12px' }} />;\n      case 'recovery-in-progress':\n        return <LoadingOutlined spin style={{ color: 'white', fontSize: '12px' }} />;\n      case 'pending':\n      default: \n        return <ClockCircleOutlined style={{ color: '#6c757d', fontSize: '12px' }} />;\n    }\n  };\n\n  const getStepNumberClass = (status) => {\n    return `execution-step-number ${status}`;\n  };\n\n  const stepTitle =  step.name || step.description || step.action || `Step ${index + 1}`;\n  const stepDescription = step.details || step.description || 'Executing infrastructure operation...';\n  const isRecoveryStep = step.isRecoveryStep === true;\n  const isCompletedStep = stepStatus === 'completed';\n\n  return (\n    <div \n      ref={ref}\n      className={`execution-step ${className} ${isRecoveryStep ? 'recovery-step' : ''}`} \n      data-step-status={stepStatus}\n      {...props}\n    >\n      <div className=\"execution-step-header\">\n        <div className={getStepNumberClass(stepStatus)}>\n          <div className=\"step-number-content\">\n            <span className=\"step-number-text\">{index + 1}</span>\n          </div>\n        </div>\n        \n        <div className=\"execution-step-content\">\n          <div className=\"execution-step-title\">\n            {stepTitle}\n            {isRecoveryStep && !isCompletedStep && (\n              <span style={{\n                marginLeft: 8,\n                padding: '2px 8px',\n                background: '#e6f7ff',\n                color: '#1890ff',\n                borderRadius: 4,\n                fontSize: 11,\n                fontWeight: 600\n              }}>\n                🔧 Recovery\n              </span>\n            )}\n            {isCompletedStep && (\n              <span style={{\n                marginLeft: 8,\n                padding: '2px 8px',\n                background: '#f6ffed',\n                color: '#52c41a',\n                borderRadius: 4,\n                fontSize: 11,\n                fontWeight: 600\n              }}>\n                ✓ Completed\n              </span>\n            )}\n          </div>\n          \n          <div className=\"execution-step-description\">\n            {stepDescription}\n          </div>\n          \n          <div className=\"execution-step-meta\">\n            <span className=\"step-duration\">\n              Duration: {step.duration || 'Estimating...'}\n            </span>\n            <span className=\"step-dependencies\">\n              Status: {stepStatus}\n            </span>\n            {step.dependencies && (\n              <span className=\"step-dependencies\">\n                Dependencies: {step.dependencies}\n              </span>\n            )}\n          </div>\n          \n          {/* Tool Parameters Section */}\n          {(step.id || step.mcpTool || step.toolParameters || step.parameters) && (\n            <div style={{ marginTop: '12px' }}>\n              <Button\n                type=\"text\"\n                size=\"small\"\n                icon={<CodeOutlined />}\n                onClick={() => setParametersExpanded(!parametersExpanded)}\n                style={{ \n                  padding: '4px 8px',\n                  height: 'auto',\n                  fontSize: '12px',\n                  color: '#1890ff'\n                }}\n              >\n                {parametersExpanded ? 'Hide' : 'Show'} Step Details\n              </Button>\n              \n              {parametersExpanded && (\n                <div style={{\n                  marginTop: '8px',\n                  padding: '12px',\n                  background: '#f6f8fa',\n                  borderRadius: '6px',\n                  border: '1px solid #e1e4e8',\n                  fontSize: '13px',\n                  overflow: 'auto',\n                  maxHeight: '300px'\n                }}>\n                  {/* Step ID Section */}\n                  {step.id && (\n                    <div style={{ \n                      marginBottom: (step.mcpTool || step.toolParameters || step.parameters) ? '12px' : '0',\n                      paddingBottom: (step.mcpTool || step.toolParameters || step.parameters) ? '12px' : '0',\n                      borderBottom: (step.mcpTool || step.toolParameters || step.parameters) ? '1px solid #e1e4e8' : 'none'\n                    }}>\n                      <div style={{ fontWeight: '600', color: '#24292e', marginBottom: '4px' }}>\n                        Step ID\n                      </div>\n                      <div style={{ \n                        fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n                        color: '#0366d6',\n                        fontSize: '12px'\n                      }}>\n                        {step.id}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* MCP Tool Section */}\n                  {step.mcpTool && (\n                    <div style={{ \n                      marginBottom: (step.toolParameters || step.parameters) ? '12px' : '0',\n                      paddingBottom: (step.toolParameters || step.parameters) ? '12px' : '0',\n                      borderBottom: (step.toolParameters || step.parameters) ? '1px solid #e1e4e8' : 'none'\n                    }}>\n                      <div style={{ fontWeight: '600', color: '#24292e', marginBottom: '4px' }}>\n                        MCP Tool\n                      </div>\n                      <div style={{ \n                        fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n                        color: '#0366d6',\n                        fontSize: '12px'\n                      }}>\n                        {step.mcpTool}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Parameters Section */}\n                  {(step.toolParameters || step.parameters) && (\n                    <div>\n                      <div style={{ fontWeight: '600', color: '#24292e', marginBottom: '8px' }}>\n                        Parameters\n                      </div>\n                      <pre style={{ \n                        margin: 0,\n                        whiteSpace: 'pre-wrap',\n                        wordBreak: 'break-word',\n                        fontFamily: 'Monaco, Menlo, \"Ubuntu Mono\", monospace',\n                        fontSize: '12px',\n                        color: '#24292e'\n                      }}>\n                        {JSON.stringify(step.toolParameters || step.parameters, null, 2)}\n                      </pre>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        \n        <div className=\"step-status-icon-container\">\n          {getStatusIcon(stepStatus)}\n        </div>\n        \n        {/* Expand logs button - only show if there are logs or step is running/completed/failed */}\n        {(logs.length > 0 || ['running', 'completed', 'failed'].includes(stepStatus)) && (\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={logsExpanded ? <UpOutlined /> : <DownOutlined />}\n            onClick={() => setLogsExpanded(!logsExpanded)}\n            className=\"expand-logs-button\"\n          />\n        )}\n      </div>\n      \n      {/* Step logs section */}\n      {logsExpanded && (\n        <div className=\"execution-step-logs\">\n          <div className=\"logs-content\">\n            {logs.length > 0 ? (\n              logs.map((log, logIndex) => (\n                <div key={logIndex} className={`step-log-entry level-${log.type}`}>\n                  <span className=\"timestamp\">\n                    {log.timestamp?.toLocaleTimeString() || new Date().toLocaleTimeString()}\n                  </span>\n                  <span className=\"level\">[{log.type?.toUpperCase() || 'INFO'}]</span>\n                  <span className=\"message\">{log.message}</span>\n                </div>\n              ))\n            ) : (\n              <div className=\"no-logs\">No logs available for this step</div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nExecutionStep.displayName = 'ExecutionStep';\n\nExecutionStep.propTypes = {\n  step: PropTypes.shape({\n    id: PropTypes.string,\n    action: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    details: PropTypes.string,\n    mcpTool: PropTypes.string,\n    toolParameters: PropTypes.object,\n    parameters: PropTypes.object,\n    status: PropTypes.oneOf([\n      'pending', \n      'running', \n      'completed', \n      'failed',\n      'recovery-generating',\n      'recovery-pending',\n      'recovery-in-progress'\n    ]),\n    duration: PropTypes.string,\n    dependencies: PropTypes.string,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  logs: PropTypes.arrayOf(PropTypes.shape({\n    type: PropTypes.string,\n    message: PropTypes.string,\n    timestamp: PropTypes.instanceOf(Date),\n    stepId: PropTypes.string,\n  })),\n  className: PropTypes.string,\n};\n\nexport default ExecutionStep;","import { useState } from 'react';\nimport { Button, Card, Tag, Space, Typography } from 'antd';\nimport { \n  ExclamationCircleOutlined,\n  PlayCircleOutlined,\n  StopOutlined,\n  LoadingOutlined,\n  DownOutlined,\n  UpOutlined\n} from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\nconst { Text, Paragraph } = Typography;\n\n/**\n * Inline Recovery component - displays recovery options directly within the execution plan\n * Based on the old UI's inline recovery implementation\n */\nconst InlineRecovery = ({ \n  stepId, \n  recoveryData, \n  onProceedWithRecovery, \n  onAbortRecovery \n}) => {\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(null);\n\n  if (!recoveryData) return null;\n\n  // Recovery in progress state\n  if (recoveryData.inProgress) {\n    return (\n      <Card \n        size=\"small\" \n        className=\"inline-recovery-card recovery-in-progress\"\n        style={{ \n          borderLeft: '4px solid #17a2b8',\n          backgroundColor: '#f8f9fa'\n        }}\n      >\n        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          <LoadingOutlined spin style={{ color: '#17a2b8' }} />\n          <Text strong>Executing Recovery...</Text>\n          {recoveryData.selectedOption === 'skip' ? (\n            <Text type=\"secondary\">Skipping step</Text>\n          ) : (\n            <Text type=\"secondary\">Option {parseInt(recoveryData.selectedOption) + 1}</Text>\n          )}\n        </div>\n        {recoveryData.progressMessage && (\n          <div style={{ marginTop: '8px' }}>\n            <Text type=\"secondary\">{recoveryData.progressMessage}</Text>\n          </div>\n        )}\n      </Card>\n    );\n  }\n\n  if (!recoveryData.visible) return null;\n\n  const { failureContext, recoveryOptions } = recoveryData;\n\n  const handleOptionSelect = (optionIndex) => {\n    setSelectedOptionIndex(optionIndex);\n  };\n\n  const handleProceed = () => {\n    if (selectedOptionIndex !== null && onProceedWithRecovery) {\n      onProceedWithRecovery(stepId, selectedOptionIndex);\n    }\n  };\n\n  const handleAbort = () => {\n    if (onAbortRecovery) {\n      onAbortRecovery(stepId);\n    }\n  };\n\n  return (\n    <Card \n      size=\"small\" \n      className=\"inline-recovery-card\"\n      style={{ \n        borderLeft: '4px solid #ffc107',\n        backgroundColor: '#fffef0',\n        marginTop: '8px'\n      }}\n    >\n      {/* Recovery Header */}\n      <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '12px' }}>\n        <ExclamationCircleOutlined style={{ color: '#ffc107', fontSize: '16px' }} />\n        <Text strong style={{ color: '#856404' }}>Step Failed - Recovery Options Available</Text>\n      </div>\n\n      {/* Failure Details */}\n      <div style={{ marginBottom: '12px', padding: '8px', backgroundColor: '#f8d7da', borderRadius: '4px' }}>\n        <Text strong>Error: </Text>\n        <Text>{failureContext?.errorMessage || 'Unknown error'}</Text>\n        <br />\n        <Text strong>Step: </Text>\n        <Text>{failureContext?.stepName || 'Unknown'}</Text>\n        {failureContext?.toolName && (\n          <>\n            <span> | </span>\n            <Text strong>Tool: </Text>\n            <Text>{failureContext.toolName}</Text>\n          </>\n        )}\n      </div>\n\n      {/* AI Analysis (if available) */}\n      {failureContext?.aiAnalysis && (\n        <div style={{ marginBottom: '12px', padding: '8px', backgroundColor: '#d1ecf1', borderRadius: '4px' }}>\n          <div style={{ marginBottom: '4px' }}>\n            <Text strong>Root Cause: </Text>\n            <Text>{failureContext.aiAnalysis.rootCause || 'Not available'}</Text>\n          </div>\n          <div>\n            <Text strong>Recommendation: </Text>\n            <Text>{failureContext.aiAnalysis.recommendation || 'Not available'}</Text>\n          </div>\n        </div>\n      )}\n\n      {/* Recovery Options */}\n      <div style={{ marginBottom: '12px' }}>\n        <Text strong style={{ marginBottom: '8px', display: 'block' }}>Choose Recovery Action:</Text>\n        \n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          {recoveryOptions && recoveryOptions.map((option, index) => (\n            <RecoveryOption\n              key={index}\n              option={option}\n              index={index}\n              isSelected={selectedOptionIndex === index}\n              onSelect={() => handleOptionSelect(index)}\n            />\n          ))}\n          \n          {/* Skip option */}\n          <RecoveryOption\n            option={{\n              action: 'Skip This Step',\n              reasoning: 'Skip this step and continue with the next step in the plan.',\n              riskLevel: 'medium',\n              successProbability: 0.7,\n              details: 'Note: May affect steps that depend on this step\\'s output.'\n            }}\n            index=\"skip\"\n            isSelected={selectedOptionIndex === 'skip'}\n            onSelect={() => handleOptionSelect('skip')}\n          />\n        </Space>\n      </div>\n\n      {/* Action Buttons */}\n      <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '8px' }}>\n        <Button \n          type=\"default\"\n          danger\n          icon={<StopOutlined />}\n          onClick={handleAbort}\n        >\n          Abort Execution\n        </Button>\n        <Button \n          type=\"primary\"\n          icon={<PlayCircleOutlined />}\n          disabled={selectedOptionIndex === null}\n          onClick={handleProceed}\n        >\n          Proceed with Selected Option\n        </Button>\n      </div>\n    </Card>\n  );\n};\n\n/**\n * Individual recovery option component\n */\nconst RecoveryOption = ({ option, index, isSelected, onSelect }) => {\n  const [showDetails, setShowDetails] = useState(false);\n  \n  const successProb = Math.round((option.successProbability || 0) * 100);\n  const riskLevel = (option.riskLevel || 'medium').toLowerCase();\n  \n  const isMultiStep = option.action === 'multi_step_recovery' && option.multiStepPlan && option.multiStepPlan.length > 0;\n  \n  const getRiskColor = (risk) => {\n    switch (risk) {\n      case 'low': return 'green';\n      case 'high': return 'red';\n      case 'medium':\n      default: return 'orange';\n    }\n  };\n\n  return (\n    <Card \n      size=\"small\"\n      className={`recovery-option ${isSelected ? 'selected' : ''}`}\n      onClick={onSelect}\n      style={{ \n        cursor: 'pointer',\n        border: isSelected ? '2px solid #1890ff' : '1px solid #d9d9d9',\n        backgroundColor: isSelected ? '#f0f7ff' : '#fff'\n      }}\n    >\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '8px' }}>\n        <Text strong>\n          {option.action}\n          {isMultiStep && (\n            <Tag size=\"small\" color=\"blue\" style={{ marginLeft: '8px' }}>\n              {option.totalSteps || option.multiStepPlan.length} steps\n            </Tag>\n          )}\n        </Text>\n        <Space size=\"small\">\n          <Tag color=\"blue\">{successProb}% Success</Tag>\n          <Tag color={getRiskColor(riskLevel)}>{option.riskLevel || 'Medium'} Risk</Tag>\n        </Space>\n      </div>\n      \n      <Paragraph style={{ marginBottom: isMultiStep || option.details ? '8px' : '0', color: '#666' }}>\n        {option.reasoning || 'No reasoning provided'}\n      </Paragraph>\n\n      {/* Single-step details */}\n      {!isMultiStep && (option.newTool || option.modifiedParameters) && (\n        <div style={{ fontSize: '12px', color: '#888', marginBottom: '8px' }}>\n          {option.newTool && `New Tool: ${option.newTool}`}\n          {option.newTool && option.modifiedParameters && ' | '}\n          {option.modifiedParameters && `Parameters: ${JSON.stringify(option.modifiedParameters)}`}\n        </div>\n      )}\n\n      {/* Option details */}\n      {option.details && !isMultiStep && (\n        <div style={{ fontSize: '12px', color: '#888' }}>\n          {option.details}\n        </div>\n      )}\n\n      {/* Multi-step details */}\n      {isMultiStep && (\n        <div style={{ marginTop: '8px' }}>\n          <Button \n            type=\"text\" \n            size=\"small\"\n            icon={showDetails ? <UpOutlined /> : <DownOutlined />}\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowDetails(!showDetails);\n            }}\n            style={{ padding: '0', height: 'auto', fontSize: '12px' }}\n          >\n            {showDetails ? 'Hide' : 'Show'} Multi-Step Plan ({option.totalSteps || option.multiStepPlan.length} steps)\n          </Button>\n          \n          {showDetails && (\n            <div style={{ marginTop: '8px', paddingLeft: '16px', borderLeft: '2px solid #f0f0f0' }}>\n              {option.multiStepPlan.map((step, stepIndex) => (\n                <div key={stepIndex} style={{ marginBottom: '8px', fontSize: '12px' }}>\n                  <div style={{ display: 'flex', alignItems: 'flex-start', gap: '8px' }}>\n                    <div style={{ \n                      minWidth: '16px', \n                      height: '16px', \n                      borderRadius: '50%', \n                      backgroundColor: '#1890ff', \n                      color: 'white', \n                      display: 'flex', \n                      alignItems: 'center', \n                      justifyContent: 'center',\n                      fontSize: '10px',\n                      marginTop: '2px'\n                    }}>\n                      {step.stepOrder || stepIndex + 1}\n                    </div>\n                    <div style={{ flex: 1 }}>\n                      <div style={{ fontWeight: 'bold' }}>{step.toolName}</div>\n                      <div style={{ color: '#666' }}>{step.purpose}</div>\n                      {step.parameters && Object.keys(step.parameters).length > 0 && (\n                        <div style={{ color: '#888', marginTop: '2px' }}>\n                          Parameters: {JSON.stringify(step.parameters, null, 2)}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n};\n\nInlineRecovery.propTypes = {\n  stepId: PropTypes.string.isRequired,\n  recoveryData: PropTypes.shape({\n    visible: PropTypes.bool,\n    inProgress: PropTypes.bool,\n    selectedOption: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    progressMessage: PropTypes.string,\n    failureContext: PropTypes.shape({\n      errorMessage: PropTypes.string,\n      stepName: PropTypes.string,\n      toolName: PropTypes.string,\n      aiAnalysis: PropTypes.shape({\n        rootCause: PropTypes.string,\n        recommendation: PropTypes.string,\n      }),\n    }),\n    recoveryOptions: PropTypes.arrayOf(PropTypes.shape({\n      action: PropTypes.string,\n      reasoning: PropTypes.string,\n      riskLevel: PropTypes.string,\n      successProbability: PropTypes.number,\n      newTool: PropTypes.string,\n      modifiedParameters: PropTypes.object,\n      details: PropTypes.string,\n      multiStepPlan: PropTypes.array,\n      totalSteps: PropTypes.number,\n    })),\n  }),\n  onProceedWithRecovery: PropTypes.func,\n  onAbortRecovery: PropTypes.func,\n};\n\nRecoveryOption.propTypes = {\n  option: PropTypes.object.isRequired,\n  index: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  isSelected: PropTypes.bool,\n  onSelect: PropTypes.func,\n};\n\nexport default InlineRecovery;","import React, { useRef, useImperativeHandle, forwardRef } from 'react';\nimport { Card, Space, Button, Tag, Progress, Typography, Alert, Spin } from 'antd';\nimport { \n  RobotOutlined, \n  CheckOutlined, \n  CloseOutlined,\n  LoadingOutlined \n} from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport ExecutionStep from './ExecutionStep';\nimport InlineRecovery from './InlineRecovery';\n\nconst { Text } = Typography;\n\n/**\n * Complete execution plan component with status header, steps, and actions\n * Handles the entire execution plan display with consistent styling\n */\nconst ExecutionPlan = forwardRef(({\n  steps = [],\n  logs = [],\n  recoveryOptions = {},\n  isExecuting = false,\n  executionProgress = 0,\n  executionElapsed = '00:00',\n  executionCompleted = false,\n  isRecoveryAnalyzing = false,\n  onConfirm = null,\n  onCancel = null,\n  onProceedWithRecovery = null,\n  onAbortRecovery = null,\n  showConfirmButton = true,\n  showCancelButton = true,\n  confirmButtonText = 'Confirm & Execute',\n  children = null,\n  title = 'Execution Plan',\n  icon = <RobotOutlined />,\n  className = '',\n  ...props\n}, ref) => {\n  // Create refs for each step\n  const stepRefs = useRef({});\n  \n  // Expose scrollToStep method to parent components\n  useImperativeHandle(ref, () => ({\n    scrollToStep: (stepId) => {\n      const stepRef = stepRefs.current[stepId];\n      if (stepRef) {\n        stepRef.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n          inline: 'nearest'\n        });\n      }\n    }\n  }));\n  \n  // Function to get logs for a specific step\n  const getStepLogs = (stepId, stepIndex) => {\n    if (!logs || logs.length === 0) return [];\n    \n    // Filter logs by stepId, or if stepId is not available, try to match by step index\n    return logs.filter(log => {\n      if (log.stepId) {\n        // Try exact match first\n        if (log.stepId === stepId) return true;\n        // Try step-{index} format\n        if (log.stepId === `step-${stepIndex}`) return true;\n        // Try just the index number\n        if (log.stepId === stepIndex.toString()) return true;\n        // Try step_{index} format\n        if (log.stepId === `step_${stepIndex}`) return true;\n      }\n      // If no stepId in the log, for now return all logs for the first step (index 0)\n      // This is a fallback for logs that don't have step association\n      return stepIndex === 0 && !log.stepId;\n    });\n  };\n\n  const renderStatusHeader = () => {\n    if (!isExecuting && !executionCompleted) return null;\n\n    const statusStyle = executionCompleted ? {\n      background: '#d4edda', \n      border: '1px solid #28a745',\n      boxShadow: '0 0 8px rgba(40, 167, 69, 0.3)',\n    } : {\n      background: '#f8f9fa', \n      border: '1px solid #dee2e6'\n    };\n\n    return (\n      <div style={{ \n        padding: '16px', \n        borderRadius: '8px',\n        ...statusStyle\n      }}>\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          marginBottom: '12px' \n        }}>\n          <Text strong className={executionCompleted ? 'status-success' : 'status-running'}>\n            {executionCompleted ? 'Execution Completed Successfully' : 'Execution in Progress'}\n          </Text>\n          <Text type=\"secondary\" style={{ fontFamily: 'monospace' }}>\n            {executionElapsed}\n          </Text>\n        </div>\n        <Progress \n          percent={executionProgress} \n          status={executionCompleted ? 'success' : 'active'} \n          strokeColor={executionCompleted ? '#28a745' : '#007bff'}\n          trailColor=\"#e9ecef\"\n        />\n      </div>\n    );\n  };\n\n  const renderActionButtons = () => {\n    if (isExecuting || executionCompleted) {\n      return isExecuting ? <Tag color=\"processing\">Executing...</Tag> : null;\n    }\n\n    return (\n      <Space>\n        {showConfirmButton && onConfirm && (\n          <Button \n            type=\"primary\" \n            icon={<CheckOutlined />}\n            onClick={onConfirm}\n            size=\"large\"\n          >\n            {confirmButtonText}\n          </Button>\n        )}\n        \n        {showCancelButton && onCancel && (\n          <Button \n            icon={<CloseOutlined />}\n            onClick={onCancel}\n            size=\"large\"\n          >\n            Cancel\n          </Button>\n        )}\n      </Space>\n    );\n  };  // Determine card styling based on execution state\n\n  const cardStyle = {\n    marginTop: 16,\n    ...(executionCompleted && {\n      borderColor: '#28a745',\n      boxShadow: '0 4px 12px rgba(40, 167, 69, 0.15)',\n    })\n  };\n\n  return (\n    <div className={`execution-plan-container ${className} ${executionCompleted ? 'execution-success' : ''}`}>\n      <Card \n        title={<>{icon} {title}</>} \n        style={cardStyle}\n        {...props}\n      >\n        <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n          {/* Execution Status Header */}\n          {renderStatusHeader()}\n          \n          {/* Execution Steps */}\n          <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>\n            {steps.map((step, index) => (\n              <React.Fragment key={step.id || index}>\n                <ExecutionStep\n                  ref={(el) => {\n                    if (el && step.id) {\n                      stepRefs.current[step.id] = el;\n                    }\n                  }}\n                  step={step}\n                  index={index}\n                  logs={getStepLogs(step.id, index)}\n                />\n                {/* Show recovery analyzing indicator after failed step */}\n                {isRecoveryAnalyzing && step.status === 'failed' && (\n                  <Alert\n                    message={\n                      <Space>\n                        <Spin indicator={<LoadingOutlined style={{ fontSize: 18 }} spin />} />\n                        <Text strong>Analyzing Recovery Options...</Text>\n                      </Space>\n                    }\n                    description=\"AI is analyzing the failure and generating recovery strategies. This may take a moment.\"\n                    type=\"warning\"\n                    showIcon={false}\n                    style={{ \n                      marginLeft: 48,\n                      marginTop: 6,\n                      marginBottom: 12\n                    }}\n                  />\n                )}\n                {/* Recovery Options - inline after each step */}\n                {recoveryOptions[step.id] && (\n                  <InlineRecovery \n                    stepId={step.id}\n                    recoveryData={recoveryOptions[step.id]}\n                    onProceedWithRecovery={onProceedWithRecovery}\n                    onAbortRecovery={onAbortRecovery}\n                  />\n                )}\n              </React.Fragment>\n            ))}\n          </div>\n          \n          {/* Action Buttons */}\n          {renderActionButtons()}\n          \n          {children && React.Children.map(children, child => {\n            // Skip ExecutionLogs component\n            if (React.isValidElement(child) && child.type?.name === 'ExecutionLogs') {\n              return null;\n            }\n            return child;\n          })}\n        </Space>\n      </Card>\n    </div>\n  );\n});\n\nExecutionPlan.displayName = 'ExecutionPlan';\n\nExecutionPlan.propTypes = {\n  steps: PropTypes.arrayOf(PropTypes.object),\n  logs: PropTypes.arrayOf(PropTypes.shape({\n    type: PropTypes.string,\n    message: PropTypes.string,\n    timestamp: PropTypes.instanceOf(Date),\n    stepId: PropTypes.string,\n  })),\n  recoveryOptions: PropTypes.object,\n  isExecuting: PropTypes.bool,\n  executionProgress: PropTypes.number,\n  executionElapsed: PropTypes.string,\n  executionCompleted: PropTypes.bool,\n  isRecoveryAnalyzing: PropTypes.bool,\n  onConfirm: PropTypes.func,\n  onCancel: PropTypes.func,\n  onProceedWithRecovery: PropTypes.func,\n  onAbortRecovery: PropTypes.func,\n  showConfirmButton: PropTypes.bool,\n  showCancelButton: PropTypes.bool,\n  confirmButtonText: PropTypes.string,\n  children: PropTypes.node,\n  title: PropTypes.string,\n  icon: PropTypes.node,\n  className: PropTypes.string,\n};\n\nexport default ExecutionPlan;","import { Card, Tag, Typography, Empty } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst { Text } = Typography;\n\n/**\n * Execution logs component with consistent styling and formatting\n * Displays execution logs with timestamps and status indicators\n */\nconst ExecutionLogs = ({\n  logs = [],\n  title = 'Execution Logs',\n  maxHeight = 300,\n  showTimestamps = true,\n  className = '',\n  style = {},\n  ...props\n}) => {\n  if (!logs.length) {\n    return (\n      <Card \n        size=\"small\"\n        title={title}\n        className={className}\n        style={{ \n          background: '#f8f9fa',\n          border: '1px solid #dee2e6',\n          ...style\n        }}\n        {...props}\n      >\n        <Empty \n          description=\"No logs available\" \n          style={{ padding: '20px 0' }}\n        />\n      </Card>\n    );\n  }\n\n  const getTagColor = (type) => {\n    switch (type) {\n      case 'success': return 'success';\n      case 'error': return 'error';\n      case 'warning': return 'warning';\n      case 'info': return 'processing';\n      default: return 'default';\n    }\n  };\n\n  return (\n    <Card \n      size=\"small\"\n      title={title}\n      className={className}\n      style={{ \n        background: '#f8f9fa',\n        border: '1px solid #dee2e6',\n        ...style\n      }}\n      {...props}\n    >\n      <div style={{ maxHeight, overflow: 'auto' }}>\n        {logs.map((log, index) => (\n          <div key={index} style={{ \n            marginBottom: 8,\n            padding: '8px 12px',\n            background: 'white',\n            borderRadius: '4px',\n            border: '1px solid #e9ecef'\n          }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n              {showTimestamps && (\n                <Tag \n                  color={getTagColor(log.type)}\n                  size=\"small\"\n                >\n                  {log.timestamp instanceof Date \n                    ? log.timestamp.toLocaleTimeString() \n                    : log.timestamp\n                  }\n                </Tag>\n              )}\n              <Text style={{ fontSize: '0.9rem', flex: 1 }}>\n                {log.message}\n              </Text>\n              {log.type && !showTimestamps && (\n                <Tag \n                  color={getTagColor(log.type)}\n                  size=\"small\"\n                >\n                  {log.type.toUpperCase()}\n                </Tag>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n};\n\nExecutionLogs.propTypes = {\n  logs: PropTypes.arrayOf(PropTypes.shape({\n    message: PropTypes.string.isRequired,\n    timestamp: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n    type: PropTypes.oneOf(['success', 'error', 'warning', 'info', 'default']),\n  })),\n  title: PropTypes.string,\n  maxHeight: PropTypes.number,\n  showTimestamps: PropTypes.bool,\n  className: PropTypes.string,\n  style: PropTypes.object,\n};\n\nexport default ExecutionLogs;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Typography, Collapse, Button } from 'antd';\nimport { ExpandOutlined, CompressOutlined } from '@ant-design/icons';\n\nconst { Text, Title } = Typography;\nconst { Panel } = Collapse;\n\nconst ResourceCard = ({ resource, searchTerm, iconUrl }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  \n  // Extract resource properties with fallback handling\n  const displayProperties = resource.properties?.properties || resource.properties || {};\n  \n  // Highlight search term in resource ID\n  const highlightSearchTerm = (text, searchTerm) => {\n    if (!searchTerm) return text;\n    \n    const regex = new RegExp(`(${searchTerm})`, 'gi');\n    const parts = text.split(regex);\n    \n    return parts.map((part, index) => \n      regex.test(part) ? (\n        <span key={index} className=\"search-highlight\">\n          {part}\n        </span>\n      ) : part\n    );\n  };\n\n  return (\n    <Card\n      className=\"resource-card\"\n      hoverable\n      bodyStyle={{ padding: '20px' }}\n    >\n      <div className=\"resource-header\">\n        <div style={{ display: 'flex', alignItems: 'center', gap: '12px', marginBottom: '16px' }}>\n          <div className=\"resource-icon\">\n            <img \n              src={iconUrl}\n              alt={`${resource.type} icon`}\n              style={{ width: '32px', height: '32px' }}\n              onError={(e) => {\n                e.target.src = '/aws-service-icons/management-governance/32/Arch_AWS-CloudFormation_32.svg';\n              }}\n            />\n          </div>\n          <div style={{ flex: 1, minWidth: 0 }}>\n            <Title \n              level={5} \n              style={{ \n                margin: 0, \n                fontSize: '16px',\n                fontWeight: 600,\n                color: '#1a1a1a',\n                wordBreak: 'break-all'\n              }}\n            >\n              {highlightSearchTerm(resource.id, searchTerm)}\n            </Title>\n            <Text \n              type=\"secondary\" \n              style={{ \n                fontSize: '12px',\n                textTransform: 'uppercase',\n                fontWeight: 500,\n                letterSpacing: '0.5px'\n              }}\n            >\n              {resource.type}\n            </Text>\n          </div>\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={isExpanded ? <CompressOutlined /> : <ExpandOutlined />}\n            onClick={() => setIsExpanded(!isExpanded)}\n            style={{\n              color: '#666',\n              opacity: 0.7,\n            }}\n          />\n        </div>\n      </div>\n\n      <Collapse\n        ghost\n        activeKey={isExpanded ? ['properties'] : []}\n        onChange={() => setIsExpanded(!isExpanded)}\n        style={{ border: 'none' }}\n      >\n        <Panel \n          key=\"properties\" \n          header={null}\n          showArrow={false}\n          style={{ padding: 0, border: 'none' }}\n        >\n          <div className=\"properties-container\">\n            <pre \n              style={{ \n                margin: 0,\n                padding: '16px',\n                fontSize: '12px',\n                lineHeight: '1.5',\n                fontFamily: 'SF Mono, Monaco, Consolas, monospace',\n                color: '#2d3748',\n                backgroundColor: 'transparent',\n                whiteSpace: 'pre-wrap',\n                wordBreak: 'break-word',\n              }}\n            >\n              {JSON.stringify(displayProperties, null, 2)}\n            </pre>\n          </div>\n        </Panel>\n      </Collapse>\n    </Card>\n  );\n};\n\nResourceCard.propTypes = {\n  resource: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    properties: PropTypes.object,\n  }).isRequired,\n  searchTerm: PropTypes.string,\n  iconUrl: PropTypes.string.isRequired,\n};\n\nResourceCard.defaultProps = {\n  searchTerm: '',\n};\n\nexport default ResourceCard;","import PropTypes from 'prop-types';\nimport { Card, Row, Col, Typography, Alert } from 'antd';\n\nconst { Title, Text } = Typography;\n\nconst StateOverview = ({ infrastructureData }) => {\n  if (!infrastructureData) return null;\n\n  // Handle different response structures - similar to old UI logic\n  let actualState = infrastructureData;\n  let dataSource = 'direct';\n  let resourceCount = 0;\n\n  // Check if we have discovered resources and managed state is empty or doesn't exist\n  const hasDiscoveredResources = infrastructureData.resources && infrastructureData.resources.length > 0;\n  const managedResourceCount = infrastructureData.managed_state ? \n    Object.keys(infrastructureData.managed_state.resources || {}).length : 0;\n\n  if (infrastructureData.managed_state && managedResourceCount > 0) {\n    // Use managed state if it has resources\n    actualState = infrastructureData.managed_state;\n    dataSource = 'managed';\n    resourceCount = managedResourceCount;\n  } else if (hasDiscoveredResources) {\n    // Use discovered resources if managed state is empty\n    dataSource = 'discovered';\n    resourceCount = infrastructureData.count || infrastructureData.resources.length;\n  } else {\n    // Direct resource count from API response\n    resourceCount = infrastructureData.count || (infrastructureData.resources?.length || 0);\n  }\n\n  return (\n    <>\n      <div className=\"infrastructure-state-overview\">\n        <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\n          <Col xs={24} sm={6}>\n            <Card>\n              <div style={{ textAlign: 'center' }}>\n                <Title level={2} style={{ margin: 0, color: '#1890ff' }}>\n                  {resourceCount}\n                </Title>\n                <Text type=\"secondary\">\n                  {dataSource === 'discovered' ? 'Discovered Resources' : 'Managed Resources'}\n                </Text>\n              </div>\n            </Card>\n          </Col>\n          \n          <Col xs={24} sm={6}>\n            <Card>\n              <div style={{ textAlign: 'center' }}>\n                <Title level={2} style={{ margin: 0, color: '#52c41a' }}>\n                  {actualState.version || '1.0.0'}\n                </Title>\n                <Text type=\"secondary\">State Version</Text>\n              </div>\n            </Card>\n          </Col>\n          \n          <Col xs={24} sm={6}>\n            <Card>\n              <div style={{ textAlign: 'center' }}>\n                <Title level={2} style={{ margin: 0, color: '#faad14' }}>\n                  {new Date(actualState.lastUpdated || actualState.last_updated || infrastructureData.timestamp || Date.now()).toLocaleDateString()}\n                </Title>\n                <Text type=\"secondary\">Last Updated</Text>\n              </div>\n            </Card>\n          </Col>\n\n          <Col xs={24} sm={6}>\n            <Card>\n              <div style={{ textAlign: 'center' }}>\n                <Title level={2} style={{ margin: 0, color: '#17a2b8' }}>\n                  {actualState.region || 'N/A'}\n                </Title>\n                <Text type=\"secondary\">Region</Text>\n              </div>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n\n      {dataSource === 'discovered' && (\n        <Alert\n          message={\n            <span>\n              <i className=\"fas fa-cloud\" style={{ marginRight: 8 }} />\n              Showing live AWS resources (no managed state found)\n            </span>\n          }\n          type=\"info\"\n          showIcon={false}\n          style={{ marginBottom: 16 }}\n        />\n      )}\n\n      {actualState.error && (\n        <Alert\n          message={`Error: ${actualState.error}`}\n          type=\"error\"\n          style={{ marginBottom: 16 }}\n        />\n      )}\n    </>\n  );\n};\n\nStateOverview.propTypes = {\n  infrastructureData: PropTypes.shape({\n    count: PropTypes.number,\n    resources: PropTypes.array,\n    managed_state: PropTypes.object,\n    timestamp: PropTypes.string,\n    error: PropTypes.string,\n  }),\n};\n\nexport default StateOverview;","import PropTypes from 'prop-types';\nimport { Card, Row, Col, Typography, Empty } from 'antd';\nimport ResourceCard from './ResourceCard';\n\nconst { Text } = Typography;\n\n// AWS service icon mapping\nconst getAWSServiceIcon = (resourceType) => {\n  const typeMapping = {\n    // Compute\n    'ec2_instance': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'instance': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'lambda': 'compute/32/Arch_AWS-Lambda_32.svg',\n    'auto_scaling_group': 'compute/32/Arch_Amazon-EC2-Auto-Scaling_32.svg',\n    'asg': 'compute/32/Arch_Amazon-EC2-Auto-Scaling_32.svg',\n    \n    // Networking\n    'vpc': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'subnet': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'security_group': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'securitygroup': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'load_balancer': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'loadbalancer': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'alb': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'route53': 'networking-content-delivery/32/Arch_Amazon-Route-53_32.svg',\n    'cloudfront': 'networking-content-delivery/32/Arch_Amazon-CloudFront_32.svg',\n    'internet_gateway': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'nat_gateway': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'route_table': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    \n    // Database\n    'rds': 'database/32/Arch_Amazon-RDS_32.svg',\n    'database': 'database/32/Arch_Amazon-RDS_32.svg',\n    'dynamodb': 'database/32/Arch_Amazon-DynamoDB_32.svg',\n    'redshift': 'database/32/Arch_Amazon-Redshift_32.svg',\n    \n    // Storage\n    's3': 'storage/32/Arch_Amazon-Simple-Storage-Service_32.svg',\n    'ebs': 'storage/32/Arch_Amazon-Elastic-Block-Store_32.svg',\n    'efs': 'storage/32/Arch_Amazon-Elastic-File-System_32.svg',\n    \n    // Default fallback\n    'default': 'management-governance/32/Arch_AWS-CloudFormation_32.svg'\n  };\n\n  const normalizedType = resourceType?.toLowerCase() || 'default';\n  return `/aws-service-icons/${typeMapping[normalizedType] || typeMapping.default}`;\n};\n\nconst ResourcesByCategory = ({ infrastructureData, searchTerm }) => {\n  if (!infrastructureData) {\n    return (\n      <div style={{ \n        backgroundColor: 'white',\n        borderRadius: '16px',\n        border: '1px solid #e8e8e8',\n        padding: '48px'\n      }}>\n        <Empty\n          description={\n            <Text type=\"secondary\" style={{ fontSize: '16px' }}>\n              No infrastructure data available\n            </Text>\n          }\n          style={{ padding: '48px 0' }}\n        />\n      </div>\n    );\n  }\n\n  // Handle different response structures\n  let resources = {};\n  \n  const hasDiscoveredResources = infrastructureData.resources && infrastructureData.resources.length > 0;\n  const managedResourceCount = infrastructureData.managed_state ? \n    Object.keys(infrastructureData.managed_state.resources || {}).length : 0;\n\n  if (infrastructureData.managed_state && managedResourceCount > 0) {\n    resources = infrastructureData.managed_state.resources || {};\n  } else if (hasDiscoveredResources) {\n    resources = {};\n    infrastructureData.resources.forEach((resource, index) => {\n      resources[resource.id || `resource-${index}`] = {\n        id: resource.id,\n        name: resource.name || resource.id,\n        type: resource.type,\n        status: resource.status,\n        properties: {\n          aws_details: resource.properties\n        },\n        createdAt: resource.createdAt,\n        dependencies: resource.properties?.dependencies\n      };\n    });\n  }\n\n  // Filter out step_reference resources and apply search\n  const filteredResources = Object.values(resources)\n    .filter(r => r.type !== 'step_reference')\n    .filter(r => !searchTerm || r.id.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  // Group resources by type (category)\n  const resourcesByCategory = filteredResources.reduce((acc, resource) => {\n    const type = resource.type || 'unknown';\n    if (!acc[type]) {\n      acc[type] = [];\n    }\n    acc[type].push(resource);\n    return acc;\n  }, {});\n\n  if (Object.keys(resourcesByCategory).length === 0) {\n    return (\n      <div style={{ \n        backgroundColor: 'white',\n        borderRadius: '16px',\n        border: '1px solid #e8e8e8',\n        padding: '48px'\n      }}>\n        <Empty\n          description={\n            <Text type=\"secondary\" style={{ fontSize: '16px' }}>\n              {searchTerm ? 'No resources match your search' : 'No resources found'}\n            </Text>\n          }\n          style={{ padding: '48px 0' }}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}>\n      {Object.entries(resourcesByCategory).map(([category, resources]) => (\n        <Card\n          key={category}\n          className=\"category-card\"\n          bodyStyle={{ padding: '24px' }}\n          title={\n            <div className=\"category-header\">\n              <Text strong style={{ \n                textTransform: 'capitalize', \n                fontSize: '18px',\n                color: '#1a1a1a'\n              }}>\n                {category.replace('_', ' ')} ({resources.length})\n              </Text>\n            </div>\n          }\n        >\n          <Row gutter={[16, 16]}>\n            {resources.map((resource) => (\n              <Col key={resource.id} xs={24} sm={12} lg={8} xl={6}>\n                <ResourceCard \n                  resource={resource} \n                  searchTerm={searchTerm}\n                  iconUrl={getAWSServiceIcon(resource.type)}\n                />\n              </Col>\n            ))}\n          </Row>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\nResourcesByCategory.propTypes = {\n  infrastructureData: PropTypes.shape({\n    resources: PropTypes.array,\n    managed_state: PropTypes.object,\n  }),\n  searchTerm: PropTypes.string,\n};\n\nResourcesByCategory.defaultProps = {\n  searchTerm: '',\n};\n\nexport default ResourcesByCategory;","import PropTypes from 'prop-types';\nimport { Typography, Button, Input } from 'antd';\nimport { ReloadOutlined, SearchOutlined } from '@ant-design/icons';\n\nconst { Text, Title } = Typography;\n\nconst StateHeader = ({ \n  onRefresh, \n  refreshing, \n  searchTerm, \n  onSearchChange, \n  totalResources, \n  totalCategories \n}) => {\n  return (\n    <div style={{ \n      marginBottom: '32px',\n      backgroundColor: 'white',\n      padding: '24px',\n      borderRadius: '16px',\n      boxShadow: '0 2px 8px rgba(0, 0, 0, 0.04)',\n      border: '1px solid #e8e8e8'\n    }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>\n        <Title level={2} style={{ margin: 0, color: '#1a1a1a', fontWeight: 700 }}>\n          Infrastructure Resources\n        </Title>\n        <Button\n          type=\"primary\"\n          icon={<ReloadOutlined spin={refreshing} />}\n          onClick={onRefresh}\n          loading={refreshing}\n          style={{\n            borderRadius: '8px',\n            height: '40px',\n            backgroundColor: '#1890ff',\n            borderColor: '#1890ff',\n          }}\n        >\n          Refresh\n        </Button>\n      </div>\n      \n      <div style={{ display: 'flex', gap: '16px', alignItems: 'center' }}>\n        <Input\n          placeholder=\"Search resources by ID...\"\n          prefix={<SearchOutlined />}\n          value={searchTerm}\n          onChange={onSearchChange}\n          style={{\n            maxWidth: '300px',\n            borderRadius: '8px',\n          }}\n          allowClear\n        />\n        <Text type=\"secondary\">\n          {totalResources} resource{totalResources !== 1 ? 's' : ''} in {totalCategories} categories\n        </Text>\n      </div>\n    </div>\n  );\n};\n\nStateHeader.propTypes = {\n  onRefresh: PropTypes.func.isRequired,\n  refreshing: PropTypes.bool,\n  searchTerm: PropTypes.string,\n  onSearchChange: PropTypes.func,\n  totalResources: PropTypes.number,\n  totalCategories: PropTypes.number,\n};\n\nStateHeader.defaultProps = {\n  refreshing: false,\n  searchTerm: '',\n  onSearchChange: () => {},\n  totalResources: 0,\n  totalCategories: 0,\n};\n\nexport default StateHeader;","import { useEffect, useRef, useState, useCallback } from 'react';\nimport { Card, Space, Typography, Tooltip, Button, Tag, Modal } from 'antd';\nimport { NodeIndexOutlined, FullscreenOutlined, ZoomInOutlined, ZoomOutOutlined, CompressOutlined, DragOutlined, AimOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport mermaid from 'mermaid';\n\nconst { Text } = Typography;\n\n// AWS service icon mapping (same as ResourcesByCategory.js)\nconst getAWSServiceIcon = (resourceType) => {\n  const typeMapping = {\n    // Compute\n    'ec2_instance': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'instance': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'ec2': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'ami': 'compute/32/Arch_Amazon-EC2_32.svg',\n    'lambda': 'compute/32/Arch_AWS-Lambda_32.svg',\n    'auto_scaling_group': 'compute/32/Arch_Amazon-EC2-Auto-Scaling_32.svg',\n    'asg': 'compute/32/Arch_Amazon-EC2-Auto-Scaling_32.svg',\n    \n    // Networking\n    'vpc': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'subnet': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'security_group': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'securitygroup': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'sg': 'security-identity-compliance/32/Arch_AWS-WAF_32.svg',\n    'load_balancer': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'loadbalancer': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'alb': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'lb': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'route53': 'networking-content-delivery/32/Arch_Amazon-Route-53_32.svg',\n    'cloudfront': 'networking-content-delivery/32/Arch_Amazon-CloudFront_32.svg',\n    'internet_gateway': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'nat_gateway': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'natgw': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    'route_table': 'networking-content-delivery/32/Arch_Amazon-Virtual-Private-Cloud_32.svg',\n    \n    // Database\n    'rds': 'database/32/Arch_Amazon-RDS_32.svg',\n    'database': 'database/32/Arch_Amazon-RDS_32.svg',\n    'dynamodb': 'database/32/Arch_Amazon-DynamoDB_32.svg',\n    'redshift': 'database/32/Arch_Amazon-Redshift_32.svg',\n    \n    // Storage\n    's3': 'storage/32/Arch_Amazon-Simple-Storage-Service_32.svg',\n    'ebs': 'storage/32/Arch_Amazon-Elastic-Block-Store_32.svg',\n    'efs': 'storage/32/Arch_Amazon-Elastic-File-System_32.svg',\n    \n    // Other\n    'tg': 'networking-content-delivery/32/Arch_Elastic-Load-Balancing_32.svg',\n    'lt': 'compute/32/Arch_Amazon-EC2_32.svg',\n    \n    // Default fallback\n    'default': 'management-governance/32/Arch_AWS-CloudFormation_32.svg'\n  };\n\n  const normalizedType = resourceType?.toLowerCase() || 'default';\n  return `/aws-service-icons/${typeMapping[normalizedType] || typeMapping.default}`;\n};\n\n/**\n * Parse Mermaid syntax to extract node type mappings\n * Returns a map of nodeId -> resourceType from :::className annotations\n */\nconst parseNodeTypes = (mermaidSyntax) => {\n  const typeMap = {};\n  if (!mermaidSyntax) return typeMap;\n  \n  const lines = mermaidSyntax.split('\\n');\n  \n  lines.forEach(line => {\n    // Match node definitions with class: nodeId[\"label\"]:::className\n    const match = line.trim().match(/^(\\S+)\\[.*?\\]:::(\\w+)/);\n    if (match) {\n      const [, nodeId, className] = match;\n      typeMap[nodeId] = className; // e.g., vpc_0933701ec3e750243 -> vpc\n    }\n  });\n  \n  return typeMap;\n};\n\n/**\n * Extract original node ID from Mermaid's transformed ID\n * Mermaid adds prefixes like 'flowchart-' and suffixes like '-123'\n */\nconst extractOriginalId = (mermaidId) => {\n  if (!mermaidId) return '';\n  \n  // Remove common Mermaid prefixes (flowchart-, graph-, L-, etc.)\n  let id = mermaidId.replace(/^(flowchart-|graph-|L-|subgraph-)/gi, '');\n  \n  // Remove numeric-only suffixes added by Mermaid (e.g., -123, -456)\n  // But preserve resource IDs that contain hyphens and numbers (e.g., vpc-0d67cc5f)\n  // Only remove if it's a hyphen followed by ONLY digits at the end\n  id = id.replace(/-(\\d+)$/g, '');\n  \n  return id;\n};\n\n/**\n * Detect resource type from node ID or class\n * Returns the AWS service type if detected\n */\nconst detectResourceType = (nodeId, classNames) => {\n  const idLower = nodeId.toLowerCase();\n  \n  // Check class names first (more reliable)\n  // IMPORTANT: Order matters! Check specific patterns before generic ones\n  if (classNames) {\n    const classLower = classNames.toLowerCase();\n    \n    // Check specific resource types FIRST (before generic patterns like 'instance')\n    if (classLower.includes('vpc') && !classLower.includes('subnet')) return 'vpc'; // Must check vpc before subnet\n    if (classLower.includes('subnet')) return 'subnet';\n    if (classLower.includes('lambda')) return 'lambda';\n    if (classLower.includes('rds') || classLower.includes('database')) return 'rds';\n    if (classLower.includes('dynamodb')) return 'dynamodb';\n    if (classLower.includes('s3')) return 's3';\n    if (classLower.includes('ami')) return 'ami';\n    if (classLower.includes('natgw') || classLower.includes('nat_gateway')) return 'nat_gateway';\n    if (classLower.includes('alb') || classLower.includes('lb') || classLower.includes('loadbalancer') || classLower.includes('load_balancer')) return 'load_balancer';\n    if (classLower.includes('tg') || classLower.includes('targetgroup')) return 'load_balancer';\n    if (classLower.includes('asg') || classLower.includes('auto_scaling')) return 'auto_scaling_group';\n    if (classLower.includes('sg') || classLower.includes('security') || classLower.includes('securitygroup')) return 'security_group';\n    \n    // Check generic patterns LAST (these are broader and might cause false positives)\n    if (classLower.includes('ec2')) return 'ec2_instance';\n    if (classLower.includes('lt') || classLower.includes('launch')) return 'ec2_instance';\n    // Only check 'instance' if it's clearly an EC2 instance context, not Mermaid internals\n    if (classLower.match(/\\bec2\\b|\\binstance\\b/) && !classLower.includes('vpc')) return 'ec2_instance';\n  }\n\n  // Fallback: check node ID patterns (Mermaid adds prefixes like 'flowchart-', so use includes not startsWith)\n  // IMPORTANT: Check VPC/Subnet patterns BEFORE EC2 patterns since they're more specific\n  if (idLower.includes('vpc-') || idLower.includes('vpc_')) return 'vpc';\n  if (idLower.includes('subnet-') || idLower.includes('subnet_')) return 'subnet';\n  if (idLower.includes('sg-') || idLower.includes('sg_')) return 'security_group';\n  if (idLower.includes('i-') || idLower.includes('i_')) return 'ec2_instance';\n  if (idLower.includes('lt-') || idLower.includes('lt_')) return 'ec2_instance';\n  if (idLower.includes('ami-') || idLower.includes('ami_')) return 'ami';\n  if (idLower.includes('targetgroup') || idLower.includes('elasticloadbalancing')) return 'load_balancer';\n  \n  return null;\n};\n\n/**\n * Build a type map from node metadata (from API response)\n * Returns a map of sanitized nodeId -> resourceType\n */\nconst buildTypeMapFromMetadata = (nodeMetadata) => {\n  const typeMap = {};\n  if (!nodeMetadata || !Array.isArray(nodeMetadata)) return typeMap;\n  \n  nodeMetadata.forEach(node => {\n    if (node.id && node.type) {\n      // Sanitize the ID to match Mermaid's transformation\n      const sanitizedId = node.id.replace(/[^a-zA-Z0-9_]/g, '_');\n      typeMap[sanitizedId] = node.type;\n    }\n  });\n  \n  return typeMap;\n};\n\n/**\n * MermaidDiagram Component\n * Renders a Mermaid diagram with automatic initialization and error handling\n * Supports AWS service icons in node labels\n * @param {Object} props\n * @param {string} props.mermaidSyntax - The Mermaid diagram syntax\n * @param {string} props.timestamp - Timestamp of the data\n * @param {Function} props.onFullscreen - Callback for fullscreen mode\n * @param {Array} props.nodeMetadata - Array of node objects with {id, type, ...} from API response\n */\nconst MermaidDiagram = ({ mermaidSyntax, timestamp, onFullscreen, nodeMetadata }) => {\n  const mermaidRef = useRef(null);\n  const renderingRef = useRef(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [zoom, setZoom] = useState(1);\n  const [pan, setPan] = useState({ x: 0, y: 0 });\n  const svgContainerRef = useRef(null);\n  const [renderedSvg, setRenderedSvg] = useState(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const dragContainerRef = useRef(null);\n\n  useEffect(() => {\n    if (!mermaidSyntax || !mermaidRef.current || renderingRef.current) return;\n\n    let isMounted = true;\n    renderingRef.current = true;\n\n    const renderMermaid = async () => {\n      try {\n        // Generate a unique ID for this diagram\n        const id = `mermaid-${Date.now()}`;\n        \n        if (!isMounted || !mermaidRef.current) return;\n        \n        // Clear previous content and remove any previous data-processed attribute\n        const element = mermaidRef.current;\n        element.removeAttribute('data-processed');\n        element.innerHTML = '';\n        \n        // Create a new div for the diagram (use original syntax without HTML modifications)\n        const diagramDiv = document.createElement('div');\n        diagramDiv.className = 'mermaid';\n        diagramDiv.id = id;\n        diagramDiv.textContent = mermaidSyntax;\n        element.appendChild(diagramDiv);\n        \n        // Simple delay to let DOM settle\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        if (!isMounted) return;\n        \n        // Render the mermaid diagram\n        await mermaid.run({\n          nodes: [diagramDiv],\n          suppressErrors: false,\n        });\n        \n        if (!isMounted) return;\n        \n        // After rendering, add AWS icons as overlay elements\n        await addIconsToNodes(element);\n        \n        // Clone the rendered SVG to both containers\n        const svgElement = element.querySelector('svg');\n        if (svgElement) {\n          // Store in state for use in modal\n          setRenderedSvg(svgElement.outerHTML);\n          \n          // Also add to card view container\n          if (svgContainerRef.current) {\n            svgContainerRef.current.innerHTML = svgElement.outerHTML;\n          }\n        }\n        \n      } catch (error) {\n        console.error('Mermaid rendering error:', error);\n        \n        // Display error in the visible container\n        const errorHtml = `\n          <div style=\"color: #ff4d4f; text-align: left; padding: 20px; background: #fff2f0; border: 1px solid #ffccc7; border-radius: 4px;\">\n            <div style=\"font-weight: bold; margin-bottom: 8px;\">⚠️ Error rendering diagram</div>\n            <div style=\"margin-bottom: 12px;\">${error.message}</div>\n            <details style=\"margin-top: 12px;\">\n              <summary style=\"cursor: pointer; color: #1890ff;\">Show Mermaid Syntax</summary>\n              <pre style=\"margin-top: 8px; padding: 12px; background: #f5f5f5; border-radius: 4px; overflow: auto;\">${mermaidSyntax}</pre>\n            </details>\n          </div>\n        `;\n        \n        if (isMounted && svgContainerRef.current) {\n          svgContainerRef.current.innerHTML = errorHtml;\n        }\n        \n        setRenderedSvg(errorHtml);\n      } finally {\n        if (isMounted) {\n          renderingRef.current = false;\n        }\n      }\n    };\n    \n    // Function to add icon overlays to rendered nodes\n    const addIconsToNodes = async (container) => {\n      if (!isMounted) return;\n      \n      try {\n        // Wait a bit more for Mermaid to fully render\n        await new Promise(resolve => setTimeout(resolve, 150));\n        \n        if (!isMounted) return;\n        \n        // Build type map from node metadata (PRIMARY source - from API)\n        const metadataTypeMap = buildTypeMapFromMetadata(nodeMetadata);\n        \n        // Parse node types from original Mermaid syntax (FALLBACK source)\n        const mermaidTypeMap = parseNodeTypes(mermaidSyntax);\n        \n        // Find all nodes in the rendered SVG\n        const nodes = container.querySelectorAll('.node');\n        \n        nodes.forEach(node => {\n          // Get node ID from the element\n          const nodeId = node.id || '';\n          const classAttr = node.getAttribute('class') || '';\n          \n          // Extract original node ID from Mermaid's transformed ID\n          const originalId = extractOriginalId(nodeId);\n          \n          // Try to get type from metadata first (TIER 1 - most reliable)\n          let resourceType = metadataTypeMap[originalId];\n          \n          // Fallback to Mermaid syntax parsing (TIER 2)\n          if (!resourceType) {\n            resourceType = mermaidTypeMap[originalId];\n          }\n          \n          // Final fallback to pattern detection (TIER 3)\n          if (!resourceType) {\n            resourceType = detectResourceType(nodeId, classAttr);\n          }\n          \n          if (resourceType) {\n            const iconPath = getAWSServiceIcon(resourceType);\n            \n            // Find the rect element (the node box)\n            const rect = node.querySelector('rect, polygon, circle, ellipse');\n            if (!rect) return;\n            \n            // Get the position and size\n            const bbox = rect.getBBox();\n            \n            // Create an image element\n            const img = document.createElementNS('http://www.w3.org/2000/svg', 'image');\n            img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', iconPath);\n            img.setAttribute('width', '32');\n            img.setAttribute('height', '32');\n            // Center the icon horizontally at the top of the node\n            img.setAttribute('x', bbox.x + (bbox.width / 2) - 16); // Center icon (32/2 = 16)\n            img.setAttribute('y', bbox.y + 12); // Top padding\n            img.style.pointerEvents = 'none'; // Don't interfere with node interactions\n            \n            // Insert the icon before the text label so it appears behind\n            const labelContainer = node.querySelector('.label');\n            const textElements = node.querySelectorAll('.label text, text');\n            \n            if (labelContainer && labelContainer.parentNode) {\n              labelContainer.parentNode.insertBefore(img, labelContainer);\n            } else if (textElements.length > 0 && textElements[0].parentNode) {\n              textElements[0].parentNode.insertBefore(img, textElements[0]);\n            } else {\n              node.appendChild(img);\n            }\n            \n            // Move all text elements down to make room for icon (separate line)\n            textElements.forEach(textEl => {\n              // Get current transform if any\n              const currentTransform = textEl.getAttribute('transform') || '';\n              const currentY = parseFloat(textEl.getAttribute('y') || 0);\n              \n              // Move text down by icon height + spacing (more aggressive)\n              if (currentTransform) {\n                // If there's a transform, we need to add a translate\n                const newTransform = `${currentTransform} translate(0, 35)`;\n                textEl.setAttribute('transform', newTransform);\n              } else {\n                // Otherwise just adjust Y\n                textEl.setAttribute('y', currentY + 35);\n              }\n            });\n            \n            // Also adjust label container if it exists\n            if (labelContainer) {\n              const currentTransform = labelContainer.getAttribute('transform') || '';\n              if (currentTransform) {\n                const newTransform = `${currentTransform} translate(0, 35)`;\n                labelContainer.setAttribute('transform', newTransform);\n              } else {\n                const currentY = parseFloat(labelContainer.getAttribute('y') || 0);\n                labelContainer.setAttribute('y', currentY + 35);\n              }\n            }\n          }\n        });\n      } catch (error) {\n        console.warn('Failed to add icons to nodes:', error);\n        // Non-critical error, diagram will still display without icons\n      }\n    };\n    \n    renderMermaid();\n    \n    // Cleanup function\n    return () => {\n      isMounted = false;\n      renderingRef.current = false;\n    };\n  }, [mermaidSyntax, nodeMetadata]); // Re-render if mermaid syntax or node metadata changes\n\n  const handleFullscreen = () => {\n    if (onFullscreen) {\n      onFullscreen();\n    } else {\n      setIsFullscreen(true);\n    }\n  };\n\n  const handleCloseFullscreen = () => {\n    setIsFullscreen(false);\n    setZoom(1);\n    setPan({ x: 0, y: 0 }); // Reset pan when closing fullscreen\n  };\n\n  const handleZoomIn = () => {\n    setZoom(prevZoom => Math.min(prevZoom + 0.25, 5)); // Max 5x zoom\n  };\n\n  const handleZoomOut = () => {\n    setZoom(prevZoom => Math.max(prevZoom - 0.25, 0.25)); // Min 0.25x zoom\n  };\n\n  const handleResetZoom = () => {\n    setZoom(1);\n    setPan({ x: 0, y: 0 });\n  };\n\n  // Mouse wheel zoom\n  const handleWheel = useCallback((e) => {\n    e.preventDefault();\n    const delta = e.deltaY > 0 ? -0.1 : 0.1;\n    setZoom(prevZoom => Math.min(Math.max(prevZoom + delta, 0.25), 5));\n  }, []);\n\n  // Pan handlers\n  const handleMouseDown = useCallback((e) => {\n    if (e.button === 0) { // Left mouse button\n      setIsDragging(true);\n      setDragStart({ x: e.clientX - pan.x, y: e.clientY - pan.y });\n      e.preventDefault();\n    }\n  }, [pan]);\n\n  const handleMouseMove = useCallback((e) => {\n    if (isDragging) {\n      setPan({\n        x: e.clientX - dragStart.x,\n        y: e.clientY - dragStart.y,\n      });\n    }\n  }, [isDragging, dragStart]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  // Add/remove event listeners for dragging\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  const renderDiagramContent = (isInModal = false) => (\n    <div style={{ position: 'relative' }}>\n      {/* Zoom Controls */}\n      <div style={{\n        position: 'absolute',\n        top: '10px',\n        right: '10px',\n        zIndex: 10,\n        display: 'flex',\n        gap: '8px',\n        background: 'rgba(255, 255, 255, 0.95)',\n        padding: '8px',\n        borderRadius: '6px',\n        boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\n      }}>\n        <Tooltip title=\"Zoom In (or scroll up)\">\n          <Button \n            icon={<ZoomInOutlined />} \n            size=\"small\"\n            onClick={handleZoomIn}\n          />\n        </Tooltip>\n        <Tooltip title=\"Reset View (Zoom & Pan)\">\n          <Button \n            icon={<AimOutlined />}\n            size=\"small\"\n            onClick={handleResetZoom}\n          >\n            {Math.round(zoom * 100)}%\n          </Button>\n        </Tooltip>\n        <Tooltip title=\"Zoom Out (or scroll down)\">\n          <Button \n            icon={<ZoomOutOutlined />} \n            size=\"small\"\n            onClick={handleZoomOut}\n          />\n        </Tooltip>\n        <Tooltip title=\"Drag to Pan\">\n          <Tag icon={<DragOutlined />} color=\"blue\" style={{ margin: 0 }}>\n            Pan Mode\n          </Tag>\n        </Tooltip>\n      </div>\n      \n      {/* Diagram Container with Pan & Zoom */}\n      <div \n        ref={dragContainerRef}\n        onWheel={handleWheel}\n        onMouseDown={handleMouseDown}\n        style={{ \n          textAlign: 'center',\n          backgroundColor: '#fafafa',\n          padding: '20px',\n          borderRadius: '6px',\n          overflow: 'hidden', // Changed from 'auto' to 'hidden' for pan to work\n          maxHeight: isInModal ? 'calc(100vh - 200px)' : '600px',\n          minHeight: isInModal ? '500px' : '200px',\n          cursor: isDragging ? 'grabbing' : 'grab',\n          position: 'relative',\n        }}\n      >\n        <div \n          ref={isInModal ? null : svgContainerRef}\n          style={{ \n            display: 'inline-block',\n            minWidth: '100%',\n            transform: `translate(${pan.x}px, ${pan.y}px) scale(${zoom})`,\n            transformOrigin: 'center center',\n            transition: isDragging ? 'none' : 'transform 0.1s ease-out',\n            willChange: 'transform',\n          }}\n          dangerouslySetInnerHTML={isInModal && renderedSvg ? { __html: renderedSvg } : undefined}\n        >\n          {/* Card view: SVG injected via ref, Modal view: SVG injected via dangerouslySetInnerHTML */}\n        </div>\n      </div>\n      \n      {/* Instructions */}\n      <div style={{ \n        marginTop: '8px', \n        textAlign: 'center',\n        color: '#999',\n        fontSize: '12px'\n      }}>\n        💡 Drag to pan • Scroll to zoom • Click controls for precise zoom\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      {/* Hidden container for Mermaid rendering */}\n      <div ref={mermaidRef} style={{ position: 'absolute', left: '-9999px', top: 0 }} />\n      \n      <Card\n        title={\n          <Space>\n            <NodeIndexOutlined />\n            <Text strong>Dependency Visualization</Text>\n            <Tag color=\"blue\">Mermaid Diagram</Tag>\n          </Space>\n        }\n        extra={\n          <Space>\n            {timestamp && (\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                Generated: {new Date(timestamp).toLocaleString()}\n              </Text>\n            )}\n            <Tooltip title=\"View fullscreen\">\n              <Button \n                icon={<FullscreenOutlined />} \n                size=\"small\"\n                onClick={handleFullscreen}\n              />\n            </Tooltip>\n          </Space>\n        }\n      >\n        {renderDiagramContent(false)}\n      </Card>\n\n      {/* Fullscreen Modal */}\n      <Modal\n        title={\n          <Space>\n            <NodeIndexOutlined />\n            <Text strong>Dependency Visualization (Fullscreen)</Text>\n            <Tag color=\"blue\">Mermaid Diagram</Tag>\n          </Space>\n        }\n        open={isFullscreen}\n        onCancel={handleCloseFullscreen}\n        width=\"96vw\"\n        style={{ \n          top: 20,\n          maxWidth: '96vw',\n          paddingBottom: 0,\n        }}\n        styles={{ \n          body: { \n            height: 'calc(100vh - 120px)', // Full height minus header, margins, and footer space\n            overflow: 'auto',\n            padding: '16px',\n          } \n        }}\n        footer={null}\n        closeIcon={<CompressOutlined />}\n        destroyOnClose={false}\n        centered={false}\n      >\n        {renderDiagramContent(true)}\n      </Modal>\n    </>\n  );\n};\n\nMermaidDiagram.propTypes = {\n  mermaidSyntax: PropTypes.string.isRequired,\n  timestamp: PropTypes.string,\n  onFullscreen: PropTypes.func,\n  nodeMetadata: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    type: PropTypes.string,\n  })),\n};\n\nexport default MermaidDiagram;\n","import { Card, Row, Col, Statistic, Space, Tag, Typography } from 'antd';\nimport { NodeIndexOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\nconst { Text } = Typography;\n\n/**\n * GraphStatistics Component\n * Displays statistics about the dependency graph including nodes, edges, types, and bottlenecks\n */\nconst GraphStatistics = ({ metadata }) => {\n  if (!metadata) return null;\n\n  const { nodeCount, edgeCount, resourceTypeCounts, bottlenecks } = metadata;\n\n  return (\n    <Card title=\"Graph Statistics\" style={{ marginTop: 16 }}>\n      <Row gutter={[16, 16]}>\n        <Col xs={12} sm={8} md={6}>\n          <Statistic\n            title=\"Total Resources\"\n            value={nodeCount}\n            valueStyle={{ color: '#1890ff' }}\n            prefix={<NodeIndexOutlined />}\n          />\n        </Col>\n        \n        <Col xs={12} sm={8} md={6}>\n          <Statistic\n            title=\"Dependencies\"\n            value={edgeCount}\n            valueStyle={{ color: '#52c41a' }}\n          />\n        </Col>\n        \n        <Col xs={12} sm={8} md={6}>\n          <Statistic\n            title=\"Resource Types\"\n            value={Object.keys(resourceTypeCounts || {}).length}\n            valueStyle={{ color: '#faad14' }}\n          />\n        </Col>\n        \n        <Col xs={12} sm={8} md={6}>\n          <Statistic\n            title=\"Bottlenecks\"\n            value={bottlenecks?.length || 0}\n            valueStyle={{ \n              color: bottlenecks?.length > 0 ? '#ff4d4f' : '#52c41a' \n            }}\n          />\n        </Col>\n      </Row>\n      \n      {resourceTypeCounts && Object.keys(resourceTypeCounts).length > 0 && (\n        <>\n          <div style={{ marginTop: 24, marginBottom: 12 }}>\n            <Text strong>Resource Type Distribution</Text>\n          </div>\n          <Space wrap>\n            {Object.entries(resourceTypeCounts).map(([type, count]) => (\n              <Tag key={type} color=\"blue\">\n                {type}: {count}\n              </Tag>\n            ))}\n          </Space>\n        </>\n      )}\n    </Card>\n  );\n};\n\nGraphStatistics.propTypes = {\n  metadata: PropTypes.shape({\n    nodeCount: PropTypes.number,\n    edgeCount: PropTypes.number,\n    resourceTypeCounts: PropTypes.object,\n    bottlenecks: PropTypes.array,\n  }),\n};\n\nexport default GraphStatistics;\n","import { Card, Space, Tag, Typography } from 'antd';\nimport { WarningOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\n\nconst { Text } = Typography;\n\n/**\n * BottlenecksList Component\n * Displays performance bottlenecks with color-coded impact levels\n */\nconst BottlenecksList = ({ bottlenecks }) => {\n  if (!bottlenecks || bottlenecks.length === 0) {\n    return null;\n  }\n\n  const getImpactColor = (impact) => {\n    switch (impact) {\n      case 'critical': return '#ff4d4f';\n      case 'high': return '#faad14';\n      case 'medium': return '#1890ff';\n      case 'low': return '#52c41a';\n      default: return '#d9d9d9';\n    }\n  };\n\n  const getImpactIcon = (impact) => {\n    return <WarningOutlined style={{ color: getImpactColor(impact) }} />;\n  };\n\n  return (\n    <Card \n      title={\n        <Space>\n          <WarningOutlined style={{ color: '#faad14' }} />\n          <Text strong>Performance Bottlenecks Detected</Text>\n        </Space>\n      }\n      style={{ marginTop: 16 }}\n    >\n      <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n        {bottlenecks.map((bottleneck, index) => (\n          <Card \n            key={index}\n            size=\"small\"\n            style={{ \n              borderLeft: `4px solid ${getImpactColor(bottleneck.impact)}`,\n              backgroundColor: '#fafafa'\n            }}\n          >\n            <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n              <Space>\n                {getImpactIcon(bottleneck.impact)}\n                <Text strong style={{ fontSize: '14px' }}>\n                  {bottleneck.resourceId}\n                </Text>\n                <Tag color={getImpactColor(bottleneck.impact)}>\n                  {bottleneck.impact.toUpperCase()}\n                </Tag>\n              </Space>\n              <div style={{ paddingLeft: '24px' }}>\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  Type: {bottleneck.resourceType} • {bottleneck.dependentCount} dependent{bottleneck.dependentCount !== 1 ? 's' : ''}\n                </Text>\n              </div>\n            </Space>\n          </Card>\n        ))}\n      </Space>\n    </Card>\n  );\n};\n\nBottlenecksList.propTypes = {\n  bottlenecks: PropTypes.arrayOf(\n    PropTypes.shape({\n      resourceId: PropTypes.string.isRequired,\n      resourceType: PropTypes.string.isRequired,\n      dependentCount: PropTypes.number.isRequired,\n      impact: PropTypes.oneOf(['low', 'medium', 'high', 'critical']).isRequired,\n      dependents: PropTypes.arrayOf(PropTypes.string),\n    })\n  ),\n};\n\nexport default BottlenecksList;\n"],"names":["safeFetch","url","options","arguments","length","undefined","timeout","Promise","resolve","xhr","XMLHttpRequest","method","timeoutId","setTimeout","abort","console","warn","concat","ok","status","statusText","data","error","onload","clearTimeout","parseError","responseText","JSON","parse","e","onerror","onabort","open","headers","Object","entries","forEach","_ref","key","value","setRequestHeader","body","send","message","setupErrorSuppression","handleError","event","includes","_event$error","stack","preventDefault","stopPropagation","stopImmediatePropagation","handleUnhandledRejection","_event$reason","_event$reason2","errorMsg","reason","toString","_event$reason3","window","addEventListener","removeEventListener","constructor","this","mockEnabled","process","log","delay","ms","loadMockData","filename","response","fetch","Error","json","getDependencyGraph","source","mockFile","transformGraphData","mockData","mermaid","graph","timestamp","Date","toISOString","metadata","generateDefaultMetadata","format","edges","convertGraphToMermaid","generateMetadataFromGraph","lines","nodes","Set","nodeTypes","edge","add","target","sanitizedSource","replace","sanitizedTarget","startsWith","push","node","type","sanitizedId","sourceId","targetId","join","sourceType","detectNodeType","targetType","nodeCount","size","edgeCount","resourceTypeCounts","bottlenecks","generateMockBottlenecks","nodeId","count","resource","dependents","Math","floor","random","impact","baseURL","call","endpoint","config","_objectSpread","errorMessage","errorDetails","errorText","text","errorData","detail","jsonError","readError","details","name","enhancedError","originalError","isNetworkError","isTimeoutError","safeCall","result","processAgentRequest","request","dryRun","stringify","dry_run","executeConfirmedPlan","decisionId","getInfrastructureState","params","discoverInfrastructure","exportState","blob","mockDataService","detectConflicts","URLSearchParams","auto_resolve","generateDeploymentPlan","targetResources","includeLevels","append","set","downloadFile","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","getCurrentTimestamp","split","getBaseURL","getConfig","wsURL","environment","showIcon","closable","style","props","_objectWithoutProperties","_excluded","alertType","getAlertType","msg","toLowerCase","displayMessage","substring","_jsx","Alert","borderRadius","fontSize","marginBottom","Title","Paragraph","Typography","title","description","level","extra","_jsxs","children","display","justifyContent","alignItems","margin","ExecutionStep","forwardRef","ref","step","index","logs","className","logsExpanded","setLogsExpanded","useState","parametersExpanded","setParametersExpanded","stepStatus","useEffect","stepTitle","action","stepDescription","isRecoveryStep","isCompletedStep","marginLeft","padding","background","color","fontWeight","duration","dependencies","id","mcpTool","toolParameters","parameters","marginTop","Button","icon","CodeOutlined","onClick","height","border","overflow","maxHeight","paddingBottom","borderBottom","fontFamily","whiteSpace","wordBreak","CheckOutlined","CloseOutlined","LoadingOutlined","spin","ClockCircleOutlined","getStatusIcon","UpOutlined","DownOutlined","map","logIndex","_log$timestamp","_log$type","toLocaleTimeString","toUpperCase","displayName","Text","RecoveryOption","_ref2","option","isSelected","onSelect","showDetails","setShowDetails","successProb","round","successProbability","riskLevel","isMultiStep","multiStepPlan","Card","cursor","backgroundColor","strong","Tag","totalSteps","Space","risk","getRiskColor","reasoning","newTool","modifiedParameters","paddingLeft","borderLeft","stepIndex","gap","minWidth","stepOrder","flex","toolName","purpose","keys","stepId","recoveryData","onProceedWithRecovery","onAbortRecovery","selectedOptionIndex","setSelectedOptionIndex","inProgress","selectedOption","parseInt","progressMessage","visible","failureContext","recoveryOptions","handleOptionSelect","optionIndex","ExclamationCircleOutlined","stepName","_Fragment","aiAnalysis","rootCause","recommendation","direction","width","danger","StopOutlined","handleAbort","PlayCircleOutlined","disabled","handleProceed","ExecutionPlan","steps","isExecuting","executionProgress","executionElapsed","executionCompleted","isRecoveryAnalyzing","onConfirm","onCancel","showConfirmButton","showCancelButton","confirmButtonText","RobotOutlined","stepRefs","useRef","useImperativeHandle","scrollToStep","stepRef","current","scrollIntoView","behavior","block","inline","cardStyle","borderColor","boxShadow","renderStatusHeader","statusStyle","Progress","percent","strokeColor","trailColor","flexDirection","React","el","filter","Spin","indicator","InlineRecovery","getStepLogs","child","_child$type","Panel","Collapse","ResourceCard","_resource$properties","searchTerm","iconUrl","isExpanded","setIsExpanded","displayProperties","properties","hoverable","bodyStyle","src","alt","onError","highlightSearchTerm","regex","RegExp","part","test","textTransform","letterSpacing","CompressOutlined","ExpandOutlined","opacity","ghost","activeKey","onChange","header","showArrow","lineHeight","defaultProps","getAWSServiceIcon","resourceType","typeMapping","normalizedType","default","ResourcesByCategory","infrastructureData","Empty","resources","hasDiscoveredResources","managedResourceCount","managed_state","aws_details","createdAt","resourcesByCategory","values","r","reduce","acc","category","Row","gutter","Col","xs","sm","lg","xl","StateHeader","onRefresh","refreshing","onSearchChange","totalResources","totalCategories","ReloadOutlined","loading","Input","placeholder","prefix","SearchOutlined","maxWidth","allowClear","mermaidSyntax","onFullscreen","nodeMetadata","mermaidRef","renderingRef","isFullscreen","setIsFullscreen","zoom","setZoom","pan","setPan","x","y","svgContainerRef","renderedSvg","setRenderedSvg","isDragging","setIsDragging","dragStart","setDragStart","dragContainerRef","isMounted","addIconsToNodes","async","metadataTypeMap","typeMap","Array","isArray","buildTypeMapFromMetadata","mermaidTypeMap","line","match","trim","parseNodeTypes","container","querySelectorAll","classAttr","getAttribute","originalId","mermaidId","extractOriginalId","detectResourceType","classNames","idLower","classLower","iconPath","rect","querySelector","bbox","getBBox","img","createElementNS","setAttributeNS","setAttribute","pointerEvents","labelContainer","textElements","parentNode","insertBefore","textEl","currentTransform","currentY","parseFloat","newTransform","now","element","removeAttribute","innerHTML","diagramDiv","textContent","run","suppressErrors","svgElement","outerHTML","errorHtml","renderMermaid","handleZoomIn","prevZoom","min","handleZoomOut","max","handleResetZoom","handleWheel","useCallback","delta","deltaY","handleMouseDown","button","clientX","clientY","handleMouseMove","handleMouseUp","renderDiagramContent","isInModal","position","top","right","zIndex","Tooltip","ZoomInOutlined","AimOutlined","ZoomOutOutlined","DragOutlined","onWheel","onMouseDown","textAlign","minHeight","transform","transformOrigin","transition","willChange","dangerouslySetInnerHTML","__html","left","NodeIndexOutlined","toLocaleString","FullscreenOutlined","handleFullscreen","Modal","handleCloseFullscreen","styles","footer","closeIcon","destroyOnClose","centered","md","Statistic","valueStyle","wrap","getImpactColor","WarningOutlined","bottleneck","resourceId","dependentCount"],"sourceRoot":""}