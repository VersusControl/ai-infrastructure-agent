{"version":3,"file":"static/js/4195.7a20b893.chunk.js","mappings":"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","sources":["pages/DependencyGraphPage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport {\n  Card,\n  Button,\n  Space,\n  Typography,\n  Alert,\n  Spin,\n  message,\n  Empty,\n} from 'antd';\nimport {\n  NodeIndexOutlined,\n  ReloadOutlined,\n} from '@ant-design/icons';\nimport { useApp } from '../contexts/AppContext';\nimport { ACTION_TYPES } from '../contexts/AppContext';\nimport apiService from '../services/apiService';\nimport { MermaidDiagram, GraphStatistics, BottlenecksList } from '../components';\nimport mermaid from 'mermaid';\n\nconst { Title, Text, Paragraph } = Typography;\n\nconst DependencyGraphPage = () => {\n  const { dispatch } = useApp();\n  const [graphData, setGraphData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // Initialize Mermaid\n  useEffect(() => {\n    mermaid.initialize({\n      startOnLoad: true,\n      theme: 'default',\n      themeVariables: {\n        primaryColor: '#007bff',\n        primaryTextColor: '#333',\n        primaryBorderColor: '#dee2e6',\n        lineColor: '#666'\n      }\n    });\n  }, []);\n\n  const loadDependencyGraph = async () => {\n    setLoading(true);\n    dispatch({\n      type: ACTION_TYPES.SET_LOADING,\n      payload: { key: 'graph', value: true },\n    });\n\n    try {\n      const data = await apiService.getDependencyGraph();\n      setGraphData(data);\n      \n      dispatch({\n        type: ACTION_TYPES.SET_DEPENDENCY_GRAPH,\n        payload: data,\n      });\n      \n      dispatch({\n        type: ACTION_TYPES.SET_STATUS_MESSAGE,\n        payload: 'Dependency graph generated successfully',\n      });\n      \n      message.success('Dependency graph loaded successfully');\n    } catch (error) {\n      message.error(`Failed to generate graph: ${error.message}`);\n      console.error('Failed to load dependency graph:', error);\n    } finally {\n      setLoading(false);\n      dispatch({\n        type: ACTION_TYPES.SET_LOADING,\n        payload: { key: 'graph', value: false },\n      });\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: 1400, margin: '0 auto' }}>\n      <div style={{ marginBottom: 24 }}>\n        <Title level={2}>\n          <NodeIndexOutlined /> Resource Dependency Graph\n        </Title>\n        <Paragraph type=\"secondary\">\n          Visualize dependencies between infrastructure resources and identify potential bottlenecks.\n          The graph shows how resources depend on each other, helping you understand the infrastructure topology.\n        </Paragraph>\n      </div>\n\n      <Card>\n        <Space \n          size=\"large\" \n          style={{ \n            width: '100%', \n            display: 'flex', \n            justifyContent: 'space-between',\n            alignItems: 'center',\n            flexWrap: 'wrap' \n          }}\n        >\n          <Space wrap>\n            <Alert\n              message=\"The dependency graph is rendered using Mermaid diagram syntax for clear visualization\"\n              type=\"info\"\n              showIcon\n              style={{ marginBottom: 0 }}\n            />\n          </Space>\n          \n          <Button\n            type=\"primary\"\n            icon={<ReloadOutlined />}\n            onClick={loadDependencyGraph}\n            loading={loading}\n            size=\"large\"\n          >\n            Generate Graph\n          </Button>\n        </Space>\n      </Card>\n\n      {loading ? (\n        <Card style={{ marginTop: 16 }}>\n          <div style={{ textAlign: 'center', padding: '50px 0' }}>\n            <Spin size=\"large\" />\n            <div style={{ marginTop: 16 }}>\n              <Text>Analyzing dependencies...</Text>\n            </div>\n          </div>\n        </Card>\n      ) : graphData ? (\n        <>\n          <MermaidDiagram \n            mermaidSyntax={graphData.mermaid} \n            timestamp={graphData.timestamp}\n          />\n          <GraphStatistics metadata={graphData.metadata} />\n          <BottlenecksList bottlenecks={graphData.metadata?.bottlenecks} />\n        </>\n      ) : (\n        <Card style={{ marginTop: 16 }}>\n          <Empty\n            description=\"No dependency graph generated yet\"\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n          >\n            <Button type=\"primary\" onClick={loadDependencyGraph} icon={<ReloadOutlined />}>\n              Generate Graph\n            </Button>\n          </Empty>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default DependencyGraphPage;"],"names":["Title","Text","Paragraph","Typography","DependencyGraphPage","_graphData$metadata","dispatch","useApp","graphData","setGraphData","useState","loading","setLoading","useEffect","mermaid","initialize","startOnLoad","theme","themeVariables","primaryColor","primaryTextColor","primaryBorderColor","lineColor","loadDependencyGraph","async","type","ACTION_TYPES","SET_LOADING","payload","key","value","data","apiService","getDependencyGraph","SET_DEPENDENCY_GRAPH","SET_STATUS_MESSAGE","message","success","error","concat","console","_jsxs","style","maxWidth","margin","children","marginBottom","level","_jsx","NodeIndexOutlined","Card","Space","size","width","display","justifyContent","alignItems","flexWrap","wrap","Alert","showIcon","Button","icon","ReloadOutlined","onClick","marginTop","textAlign","padding","Spin","_Fragment","MermaidDiagram","mermaidSyntax","timestamp","GraphStatistics","metadata","BottlenecksList","bottlenecks","Empty","description","image","PRESENTED_IMAGE_SIMPLE"],"sourceRoot":""}