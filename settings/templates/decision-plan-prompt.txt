üéØ DECISION-MAKING GUIDELINES:
1. RESOURCE REUSE: Always prefer existing AWS resources over creating new ones
2. STATE AWARENESS: Consider all resources in the state file for dependencies and conflicts
3. INTELLIGENT PLANNING: Create execution plans that leverage existing infrastructure
4. MINIMAL CHANGES: Make only necessary changes to achieve the user's request
5. DEPENDENCY MANAGEMENT: Ensure proper dependency ordering in execution plans

üìã YOUR TASK:
Based on the user request and ALL infrastructure state information above:
1. Analyze what already exists in both managed and discovered resources
2. Determine the minimal set of actions needed to fulfill the request
3. Create an execution plan using available MCP tools
4. Provide clear reasoning for your decisions

üîß REQUIRED JSON RESPONSE FORMAT:
Respond with ONLY valid JSON in this exact format:

{
  "action": "create_infrastructure|update_infrastructure|delete_infrastructure|no_action",
  "reasoning": "Detailed explanation of your analysis and decision-making process",
  "confidence": 0.0-1.0,
  "resourcesAnalyzed": {
    "managedCount": 0,
    "discoveredCount": 0,
    "reusableResources": ["list of resources that can be reused"]
  },
  "executionPlan": [
    {
      "id": "step-1",
      "name": "Step Description",
      "description": "Detailed step description",
      "action": "create|update|delete|validate|api_value_retrieval",
      "resourceId": "logical-resource-id",
      "mcpTool": "exact-mcp-tool-name",
      "toolParameters": {
        "parameter": "value"
      },
      "dependsOn": ["list-of-step-ids"],
      "estimatedDuration": "10s",
      "status": "pending"
    }
  ]
}

üö® STEP DEPENDENCY REQUIREMENTS:
NEVER use hardcoded AWS resource IDs like sg-12345678, vpc-abcdef, ami-987654, etc.
ALWAYS create step dependencies and use {{step-id.resourceId}} references:

‚úÖ CORRECT Load Balancer Pattern:
{
  "id": "step-create-lb-sg",
  "action": "create",
  "mcpTool": "create-security-group",
  "toolParameters": {
    "groupName": "web-alb-sg",
    "description": "Security group for load balancer",
    "vpcId": "{{step-vpc.resourceId}}"
  }
},
{
  "id": "step-create-alb",
  "action": "create",
  "mcpTool": "create-load-balancer",
  "toolParameters": {
    "name": "web-app-alb",
    "securityGroupIds": ["{{step-create-lb-sg.resourceId}}"]
  },
  "dependsOn": ["step-create-lb-sg"]
}

‚ùå WRONG - Hardcoded IDs will cause failures:
"securityGroupIds": ["sg-05dc049424690e203"]  // This ID may not exist!

‚ö†Ô∏è IMPORTANT: Distinguish between HARDCODED AWS IDs vs LEGITIMATE PARAMETERS:
‚úÖ LEGITIMATE parameter values (these are fine):
  - Resource names: "web-app-alb", "production-vpc", "public-subnet-1"
  - Parameter types: "vpc_id", "subnet_id", "security_group_id", "existing_resource"
  - Schemes/types: "internet-facing", "application", "HTTP", "HTTPS"
  - CIDR blocks: "10.0.0.0/16", "192.168.1.0/24"
‚ùå HARDCODED AWS resource IDs (NEVER use these):
  - VPC IDs: "vpc-12345678abcdef"
  - Subnet IDs: "subnet-87654321fedcba"
  - Security Group IDs: "sg-05dc049424690e203"
  - Instance IDs: "i-1234567890abcdef0"
  - AMI IDs: "ami-0abcdef1234567890"

üö®üö® CRITICAL INSTRUCTIONS:
1. ANALYZE ALL RESOURCES: Consider every resource shown above before making decisions
2. REUSE FIRST: Always check if existing resources can fulfill the request
3. USE EXACT TOOL NAMES: Only use MCP tool names shown in the tools context above
4. PARAMETER ACCURACY: Use correct parameter names and types for each tool
5. DEPENDENCY REFERENCES: Use {{step-id.resourceId}} format for dependencies
6. JSON ONLY: Return only valid JSON - no markdown, no explanations, no extra text
7. STATE FILE AWARENESS: Remember that managed resources exist in the state file
8. ACTION TYPE USAGE:
   - create: For new AWS resources that don't exist (VPC, subnets, route table associations, routes, security rules, etc.)
   - update: For modifying properties of existing resources (changing tags, descriptions)
   - delete: For removing AWS resources
   - validate: For checking resource states or configurations
   - api_value_retrieval: For fetching real AWS values to replace placeholders
   üö® ONLY use these exact actions: create, update, add, delete, validate, api_value_retrieval
   üö® NEVER use: associate, attach, connect, link, join, bind, or any other action names

üí° DECISION EXAMPLES:
Example 1 - Resource Reuse: If user wants a web server and you see existing VPC and security groups, reuse them
Example 2 - Minimal Changes: If user wants to add a database and VPC exists, only create database resources
Example 3 - No Action: If user requests something that already exists, return action: "no_action"

üí° ACTION EXAMPLES:
‚úÖ CREATE: "action": "create" for new VPC, subnets, security groups, route table associations, routes, etc.
‚úÖ CREATE: "action": "create" for associating route tables with subnets (creates new association resource)
‚úÖ CREATE: "action": "create" for adding routes to route tables (creates new route resource)
‚ùå NEVER USE: associate, attach, connect, link, join, bind

BEGIN YOUR ANALYSIS AND PROVIDE YOUR JSON RESPONSE: