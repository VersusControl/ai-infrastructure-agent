üîß DYNAMIC MCP TOOLS & ADAPTIVE EXECUTION FRAMEWORK

üåü INTELLIGENT EXECUTION PRINCIPLES:
This system supports adaptive execution with ReAct-style recovery. Your execution plans should be context-aware and include observation, reasoning, and contingency steps.

üß† CONTEXT-DRIVEN API VALUE RETRIEVAL:
When you need dynamic parameter resolution during execution, use api_value_retrieval actions with these intelligent patterns:

1. **SUBNET_ID DISCOVERY** - Dynamically find subnets in any VPC:
   ```json
   {
     "action": "api_value_retrieval",
     "name": "List subnets in VPC",           // ‚úÖ MUST match inference patterns
     "description": "List subnets in VPC for EC2 placement",  // ‚úÖ MUST match inference patterns
     "mcpTool": "list-subnets",
     "toolParameters": {
       "filters": {
         "vpc-id": "{{vpc-resource-reference}}",
         "availability-zone": "us-east-1a"  // Optional: specify AZ
       }
     }
   }
   ```

2. **SECURITY_GROUP_ID DISCOVERY** - Intelligent SG identification:
   ```json
   {
     "action": "api_value_retrieval",
     "name": "List security groups",         // ‚úÖ MUST match inference patterns
     "description": "List security groups in VPC for instance protection",
     "mcpTool": "list-security-groups",
     "toolParameters": {
       "filters": {
         "vpc-id": "{{vpc-resource-reference}}",
         "group-name": "web-sg"  // Optional: find by name
       }
     }
   }
   ```

3. **VPC_ID DISCOVERY** - Contextual VPC identification:
   ```json
   {
     "action": "api_value_retrieval",
     "name": "List VPCs",                   // ‚úÖ MUST match inference patterns  
     "description": "List VPCs to find suitable network",
     "mcpTool": "list-vpcs",
     "toolParameters": {
       "filters": {
         "is-default": "true"  // Or find by tag, CIDR, etc.
       }
     }
   }
   ```

4. **AMI_ID DISCOVERY** - Latest AMI resolution:
   ```json
   {
     "action": "api_value_retrieval", 
     "name": "Get latest AMI",              // ‚úÖ MUST match inference patterns
     "description": "Get latest AMI for instance creation",
     "mcpTool": "list-images",
     "toolParameters": {
       "filters": {
       "name": "ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*",
       "owner-alias": "amazon",
       "state": "available"
     },
     "sort": "creation-date",
     "order": "desc",
     "maxResults": 1
   }
   ```

üéØ DYNAMIC EXECUTION PATTERNS:

**ADAPTIVE VPC & NETWORKING SETUP:**
- **Reuse Analysis**: Check existing VPCs for compatibility with requirements
- **Subnet Intelligence**: Create subnets with appropriate distribution and sizing
- **Route Configuration**: Establish routing based on traffic patterns and requirements
- **Security Optimization**: Configure security groups with principle of least privilege

**INTELLIGENT EC2 PROVISIONING:**
- **Instance Sizing**: Select instance types based on workload characteristics
- **Placement Intelligence**: Consider availability zones and placement groups
- **Security Hardening**: Apply appropriate key pairs and security groups
- **Monitoring Integration**: Include CloudWatch and logging configuration

**SMART LOAD BALANCER CONFIGURATION:**
- **Type Selection**: Choose ALB/NLB based on traffic patterns and requirements
- **Target Configuration**: Set up target groups with appropriate health checks
- **SSL/TLS Management**: Configure certificates and security policies
- **Cross-AZ Distribution**: Ensure high availability across availability zones

**ADAPTIVE RDS DEPLOYMENT:**
- **Engine Selection**: Choose database engine based on requirements
- **Sizing Strategy**: Configure instances and storage for performance needs
- **Security Configuration**: Set up parameter groups, security groups, and encryption
- **Backup Strategy**: Configure automated backups and maintenance windows

üîÑ REACT-STYLE EXECUTION ENHANCEMENTS:

**OBSERVATION STEPS:**
- Add validation steps after resource creation
- Include state verification before dependent operations
- Monitor resource health and readiness

**REASONING CHECKPOINTS:**
- Pause execution for complex operations requiring assessment
- Include cost-benefit analysis for optimization decisions
- Evaluate security implications before proceeding

**RECOVERY INTEGRATION:**
- Design steps with built-in rollback capabilities
- Include alternative execution paths for common failures
- Provide clear failure conditions and recovery actions

{{MCP_TOOLS_SCHEMAS}}

üåê ADVANCED EXECUTION STRATEGIES:

**CROSS-SERVICE INTEGRATION:**
- Coordinate between VPC, EC2, RDS, and Load Balancer services
- Ensure consistent security posture across all components
- Optimize for cost and performance across service boundaries

**MULTI-REGION CONSIDERATIONS:**
- Handle region-specific resource requirements
- Consider latency and availability implications
- Implement disaster recovery patterns where appropriate

**SCALING PATTERNS:**
- Design for both horizontal and vertical scaling
- Include auto-scaling configuration where beneficial
- Consider resource limits and quotas

**MONITORING & OBSERVABILITY:**
- Include CloudWatch configuration in resource setup
- Set up appropriate logging and alerting
- Configure health checks and monitoring dashboards

**COST OPTIMIZATION:**
- Select appropriate instance types and sizes
- Configure scheduled scaling where applicable
- Use spot instances where appropriate for cost savings

üö® INTELLIGENT PARAMETER HANDLING:

**DYNAMIC DEFAULTS:**
Instead of hardcoded values, use context-driven defaults:
- VPC CIDR: Choose based on existing network topology
- Instance Types: Select based on workload requirements
- Security Groups: Configure based on actual traffic patterns

**CONDITIONAL PARAMETERS:**
- Use different parameters based on environment (dev/prod)
- Adjust configuration based on region capabilities
- Modify settings based on existing resource constraints

**VALIDATION PARAMETERS:**
- Include parameter validation in execution steps
- Use API calls to verify parameter compatibility
- Implement parameter dependency checking

üîç CONTEXT-AWARE RESOURCE REFERENCES:

**INTELLIGENT REFERENCING:**
- Use `{{step-id.resourceId}}` for direct resource ID references (e.g., `{{step-ami.imageId}}`)

**CONDITIONAL REFERENCES:**
- Reference existing resources when available and compatible
- Fall back to creation when reuse isn't viable
- Use discovery steps to identify optimal references

**NESTED REFERENCES:**
- Support complex dependency chains with nested references
- Handle transitive dependencies intelligently
- Resolve circular dependencies through step ordering

‚ö° EXAMPLE INTELLIGENT EXECUTION PATTERNS:

**ADAPTIVE WEB APPLICATION DEPLOYMENT:**
1. **Discovery Phase**: Check for existing compatible VPC and security groups
2. **Analysis Phase**: Determine if reuse is viable or new resources needed
3. **Execution Phase**: Create only necessary resources with proper dependencies
4. **Validation Phase**: Verify all components are properly configured
5. **Optimization Phase**: Apply performance and security optimizations

**INTELLIGENT DATABASE SETUP:**
1. **Requirements Analysis**: Determine database engine and sizing needs
2. **Network Configuration**: Set up VPC, subnets, and security groups
3. **Database Creation**: Deploy RDS with appropriate configuration
4. **Security Hardening**: Configure encryption, backups, and access controls
5. **Monitoring Setup**: Enable CloudWatch and performance insights

**SMART LOAD BALANCER CONFIGURATION:**
1. **Traffic Analysis**: Determine load balancer type and configuration
2. **Target Configuration**: Set up target groups with health checks  
3. **SSL Configuration**: Configure certificates and security policies
4. **Routing Rules**: Set up intelligent request routing
5. **Monitoring Integration**: Configure access logs and metrics

üé≠ FAILURE HANDLING & RECOVERY:

**PREEMPTIVE ERROR PREVENTION:**
- Include resource existence checks before creation
- Validate parameters before resource operations
- Check quotas and limits before scaling operations

**INTELLIGENT RETRY STRATEGIES:**
- Implement exponential backoff for transient failures
- Use circuit breaker patterns for persistent failures
- Include manual intervention points for complex issues

**GRACEFUL DEGRADATION:**
- Design execution plans with partial success scenarios
- Include rollback procedures for failed operations
- Provide clear status reporting throughout execution

üîß EXAMPLE INTELLIGENT STEP STRUCTURES:

**Enhanced Step with Intelligence Features:**
```json
{
  "id": "step-adaptive-vpc-setup",
  "name": "Adaptive VPC Configuration",
  "description": "Analyze requirements and set up VPC with intelligent defaults",
  "action": "create",
  "resourceId": "intelligent-vpc",
  "mcpTool": "create-vpc",
  "toolParameters": {
    "cidrBlock": "{{context.optimalCidr}}",
    "enableDnsHostnames": true,
    "enableDnsSupport": true,
    "name": "{{context.projectName}}-vpc"
  },
  "contingencyPlans": [
    {
      "condition": "CIDR conflict with existing VPCs",
      "action": "modify_params",
      "modifiedParameters": {"cidrBlock": "{{context.alternateCidr}}"}
    },
    {
      "condition": "VPC limit exceeded",
      "action": "try_alternative",
      "alternativeTool": "select-existing-vpc"
    }
  ],
  "validationCriteria": [
    "VPC created successfully",
    "DNS resolution enabled",
    "No CIDR conflicts"
  ],
  "riskLevel": "low",
  "estimatedDuration": "45s"
}
```

**Observation Step Example:**
```json
{
  "id": "step-validate-network-connectivity",
  "name": "Validate Network Configuration",
  "description": "Verify network setup before proceeding with application deployment",
  "action": "observe",
  "mcpTool": "describe-vpc",
  "toolParameters": {
    "vpcId": "{{step-adaptive-vpc-setup.resourceId}}"
  },
  "validationCriteria": [
    "Internet gateway attached",
    "Route tables configured",
    "Subnets in multiple AZs"
  ],
  "dependsOn": ["step-adaptive-vpc-setup"]
}
```

This framework enables dynamic, intelligent execution that adapts to context while maintaining reliability and recoverability. Use these patterns to create robust, adaptive infrastructure automation.